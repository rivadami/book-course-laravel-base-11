{"version":3,"file":"DropdownItem.vue_vue_type_script_setup_true_lang-Dpj7m-LI.mjs","sources":["../../src/components/dropdown/Dropdown.vue","../../src/components/dropdown/DropdownItem.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport {\n    computed,\n    nextTick,\n    ref,\n    watch,\n    onUnmounted,\n    type PropType,\n    type Component,\n} from \"vue\";\n\nimport PositionWrapper from \"../utils/PositionWrapper.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { vTrapFocus } from \"@/directives/trapFocus\";\nimport { toCssDimension, isMobileAgent } from \"@/utils/helpers\";\nimport { isClient } from \"@/utils/ssr\";\nimport {\n    unrefElement,\n    defineClasses,\n    useProviderParent,\n    useMatchMedia,\n    useEventListener,\n    useClickOutside,\n} from \"@/composables\";\n\nimport type { DropdownComponent } from \"./types\";\n\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\n\n/**\n * Dropdowns are very versatile, can used as a quick menu or even like a select for discoverable content\n * @displayName Dropdown\n * @requires ./DropdownItem.vue\n * @style _dropdown.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"ODropdown\",\n    configField: \"dropdown\",\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** @model */\n    modelValue: {\n        type: [String, Number, Boolean, Object, Array],\n        default: undefined,\n    },\n    /** The active state of the dropdown, use v-model:active to make it two-way binding. */\n    active: { type: Boolean, default: false },\n    /** Trigger label, unnecessary when trgger slot is used */\n    label: { type: String, default: undefined },\n    /** Dropdown is disabled */\n    disabled: { type: Boolean, default: false },\n    /** Dropdown content (items) are shown inline, trigger is removed */\n    inline: { type: Boolean, default: false },\n    /** Dropdown content will be scrollable */\n    scrollable: { type: Boolean, default: false },\n    /** Max height of dropdown content */\n    maxHeight: {\n        type: [String, Number],\n        default: () => getOption(\"dropdown.maxHeight\", 200),\n    },\n    /**\n     * Position of the dropdown relative to the trigger\n     * @values auto, top, bottom, left, right, top-right, top-left, bottom-left, bottom-right\n     */\n    position: {\n        type: String,\n        default: () => getOption(\"dropdown.position\", \"bottom-left\"),\n        validator: (value: string) =>\n            [\n                \"auto\",\n                \"top\",\n                \"bottom\",\n                \"left\",\n                \"right\",\n                \"top-right\",\n                \"top-left\",\n                \"bottom-left\",\n                \"bottom-right\",\n            ].indexOf(value) > -1,\n    },\n    /** Dropdown content (items) are shown into a modal on mobile */\n    mobileModal: {\n        type: Boolean,\n        default: () => getOption(\"dropdown.mobileModal\", true),\n    },\n    /** Custom animation (transition name) */\n    animation: {\n        type: String,\n        default: () => getOption(\"dropdown.animation\", \"fade\"),\n    },\n    /** Allows multiple selections */\n    multiple: { type: Boolean, default: false },\n    /** Trap focus inside the dropdown. */\n    trapFocus: {\n        type: Boolean,\n        default: () => getOption(\"dropdown.trapFocus\", true),\n    },\n    /** Makes the component check if menu reached scroll start or end and emit scroll events. */\n    checkScroll: {\n        type: Boolean,\n        default: () => getOption(\"dropdown.checkScroll\", false),\n    },\n    /** Dropdown will be expanded (full-width) */\n    expanded: { type: Boolean, default: false },\n    /** HTML element ID of the dropdown menu element */\n    menuId: { type: String, default: null },\n    /** Tabindex of the dropdown menu element */\n    menuTabindex: { type: Number, default: null },\n    /** Dropdown menu tag name */\n    menuTag: {\n        type: [String, Object, Function] as PropType<DynamicComponent>,\n        default: () => getOption<DynamicComponent>(\"dropdown.menuTag\", \"div\"),\n    },\n    /** Dropdown trigger tag name */\n    triggerTag: {\n        type: [String, Object, Function] as PropType<DynamicComponent>,\n        default: () =>\n            getOption<DynamicComponent>(\"dropdown.triggerTag\", \"div\"),\n    },\n    /**\n     * Dropdown will be triggered by any events\n     * @values click, hover, contextmenu, focus\n     */\n    triggers: {\n        type: Array as PropType<string[]>,\n        default: () => getOption(\"dropdown.triggers\", [\"click\"]),\n        validator: (values: string[]) =>\n            values.filter(\n                (value) =>\n                    [\"click\", \"hover\", \"contextmenu\", \"focus\"].indexOf(value) >\n                    -1,\n            ).length === values.length,\n    },\n    /** Dropdown delay before it appears (number in ms) */\n    delay: { type: Number, default: undefined },\n    /**\n     * Dropdown close options (pressing escape, clicking the content or outside)\n     * @values true, false, escape, outside, content\n     */\n    closeable: {\n        type: [Array, Boolean] as PropType<string[] | boolean>,\n        default: () =>\n            getOption(\"dropdown.closeable\", [\"escape\", \"outside\", \"content\"]),\n    },\n    /** Set the tabindex attribute on the dropdown trigger div (-1 to prevent selection via tab key) */\n    tabindex: { type: Number, default: 0 },\n    /**\n     * Role attribute to be passed to the list container for better accessibility.\n     * Use menu only in situations where your dropdown is related to a navigation menu.\n     * @values list, listbox, menu, dialog\n     */\n    ariaRole: {\n        type: String,\n        default: getOption(\"dropdown.ariaRole\", \"list\"),\n        validator: (value: string) =>\n            [\"list\", \"listbox\", \"menu\", \"dialog\"].indexOf(value) > -1,\n    },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"dropdown.mobileBreakpoint\"),\n    },\n    /**\n     * Append the component to another part of the DOM.\n     * Set `true` to append the component to the body.\n     * In addition, any CSS selector string or an actual DOM node can be used.\n     */\n    teleport: {\n        type: [Boolean, String, Object],\n        default: () => getOption(\"dropdown.teleport\", false),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class when the dropdown is teleported */\n    teleportClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the trigger element */\n    triggerClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of dropdown menu when inline */\n    inlineClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the overlay when on mobile */\n    menuMobileOverlayClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the dropdown menu */\n    menuClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of dropdown menu position */\n    menuPositionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of dropdown menu when active */\n    menuActiveClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of dropdown when on mobile */\n    mobileClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of dropdown when disabled */\n    disabledClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of dropdown when expanded */\n    expandedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the root element indicating position of dropdown */\n    positionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the root element indicating whether the dropdown is open */\n    activeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the root element when the dropdown is hoverable */\n    hoverableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * modelValue prop two-way binding\n     * @param value {[String, Number, Boolean, Object, Array]} updated modelValue prop\n     */\n    (\n        e: \"update:modelValue\",\n        value: [string, number, boolean, object, Array<any>],\n    ): void;\n    /**\n     * active prop two-way binding\n     * @param value {boolean} updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * on change event - fired after modelValue:update\n     * @param value {any} selected value\n     */\n    (e: \"change\", value: any): void;\n    /**\n     * on close event\n     * @param method {string} close method\n     */\n    (e: \"close\", method: string): void;\n    /** the list inside the dropdown reached the start */\n    (e: \"scroll-start\"): void;\n    /** the list inside the dropdown reached it's end */\n    (e: \"scroll-end\"): void;\n}>();\n\nconst vmodel = defineModel<any>();\n\nconst isActive = defineModel<boolean>(\"active\");\n\nconst autoPosition = ref(props.position);\n\n/** update autoPosition on prop change */\nwatch(\n    () => props.position,\n    (v) => (autoPosition.value = v),\n);\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\n// check if mobile modal should be shown\nconst isMobileModal = computed(\n    () => isMobile.value && props.mobileModal && !props.inline,\n);\n\n// check if client is mobile native\nconst isMobileNative = computed(() => props.mobileModal && isMobileAgent.any());\n\nconst menuStyle = computed(() => ({\n    maxHeight: props.scrollable ? toCssDimension(props.maxHeight) : null,\n    overflow: props.scrollable ? \"auto\" : null,\n}));\n\nconst hoverable = computed(() => props.triggers.indexOf(\"hover\") >= 0);\n\n// --- Event Handler ---\n\nconst contentRef = ref<HTMLElement | Component>();\nconst triggerRef = ref<HTMLElement>();\n\nconst eventCleanups = [];\nlet timer: NodeJS.Timeout;\n\nwatch(\n    isActive,\n    (value) => {\n        // on active set event handler\n        if (value && isClient) {\n            setTimeout(() => {\n                if (cancelOptions.value.indexOf(\"outside\") >= 0) {\n                    // set outside handler\n                    eventCleanups.push(\n                        useClickOutside(contentRef, onClickedOutside, [\n                            triggerRef,\n                        ]),\n                    );\n                }\n\n                if (cancelOptions.value.indexOf(\"escape\") >= 0) {\n                    // set keyup handler\n                    eventCleanups.push(\n                        useEventListener(\"keyup\", onKeyPress, document, {\n                            immediate: true,\n                        }),\n                    );\n                }\n            });\n        } else if (!value) {\n            // on close cleanup event handler\n            eventCleanups.forEach((fn) => fn());\n            eventCleanups.length = 0;\n        }\n    },\n    { immediate: true },\n);\n\nonUnmounted(() => {\n    // on close cleanup event handler\n    eventCleanups.forEach((fn) => fn());\n    eventCleanups.length = 0;\n});\n\nconst cancelOptions = computed(() =>\n    typeof props.closeable === \"boolean\"\n        ? props.closeable\n            ? [\"escape\", \"outside\", \"content\"]\n            : []\n        : props.closeable,\n);\n\n/** Close dropdown if clicked outside. */\nfunction onClickedOutside(): void {\n    if (!isActive.value || props.inline) return;\n    if (cancelOptions.value.indexOf(\"outside\") < 0) return;\n    emits(\"close\", \"outside\");\n    isActive.value = false;\n}\n\n/** Keypress event that is bound to the document */\nfunction onKeyPress(event: KeyboardEvent): void {\n    if (isActive.value && (event.key === \"Escape\" || event.key === \"Esc\")) {\n        if (cancelOptions.value.indexOf(\"escape\") < 0) return;\n        emits(\"close\", \"escape\");\n        isActive.value = false;\n    }\n}\n\nfunction onClick(): void {\n    if (props.triggers.indexOf(\"click\") < 0) return;\n    toggle();\n}\n\nfunction onContextMenu(event: MouseEvent): void {\n    if (props.triggers.indexOf(\"contextmenu\") < 0) return;\n    event.preventDefault();\n    open();\n}\n\nfunction onFocus(): void {\n    if (props.triggers.indexOf(\"focus\") < 0) return;\n    open();\n}\n\nconst isHovered = ref(false);\nfunction onHover(): void {\n    if (!isMobileNative.value && props.triggers.indexOf(\"hover\") >= 0) {\n        isHovered.value = true;\n        open();\n    }\n}\nfunction onHoverLeave(): void {\n    if (!isMobileNative.value && isHovered.value) {\n        isHovered.value = false;\n        onClose();\n    }\n}\n\n/** Toggle dropdown if it's not disabled. */\nfunction toggle(): void {\n    if (props.disabled) return;\n    if (isActive.value) isActive.value = !isActive.value;\n    // if not active, toggle after clickOutside event\n    // this fixes toggling programmatic\n    else nextTick(() => (isActive.value = !isActive.value));\n}\n\nfunction open(): void {\n    if (props.disabled) return;\n    if (props.delay) {\n        timer = setTimeout(() => {\n            isActive.value = true;\n            timer = null;\n        }, props.delay);\n    } else {\n        isActive.value = true;\n    }\n}\n\nfunction onClose(): void {\n    if (cancelOptions.value.indexOf(\"content\") < 0) return;\n    emits(\"close\", \"content\");\n    isActive.value = !props.closeable;\n    if (timer && props.closeable) clearTimeout(timer);\n}\n\n// --- InfitiveScroll Feature ---\n\nif (isClient && props.checkScroll)\n    useEventListener(\"scroll\", checkDropdownScroll, contentRef);\n\n/** Check if the scroll list inside the dropdown reached the top or it's end. */\nfunction checkDropdownScroll(): void {\n    const dropdown = unrefElement(contentRef);\n    if (dropdown.clientHeight !== dropdown.scrollHeight) {\n        if (\n            dropdown.scrollTop + dropdown.clientHeight >=\n            dropdown.scrollHeight\n        ) {\n            emits(\"scroll-end\");\n        } else if (dropdown.scrollTop <= 0) {\n            emits(\"scroll-start\");\n        }\n    }\n}\n\n// --- Dependency Injection Feature ---\n\n/**\n * Click listener from DropdownItem.\n *   1. Set new selected item.\n *   2. Emit input event to update the user v-model.\n *   3. Close the dropdown.\n */\nfunction selectItem(value: any): void {\n    if (props.multiple) {\n        if (vmodel.value && Array.isArray(vmodel.value)) {\n            if (vmodel.value.indexOf(value) === -1) {\n                // add a value\n                vmodel.value = [...vmodel.value, value];\n            } else {\n                // remove a value\n                vmodel.value = vmodel.value.filter((val) => val !== value);\n            }\n        } else {\n            // init new value array\n            vmodel.value = [value];\n        }\n        // emit change after vmodel has changed\n        nextTick(() => emits(\"change\", vmodel.value));\n    } else {\n        if (vmodel.value !== value) {\n            // update a single value\n            vmodel.value = value;\n            // emit change after vmodel has changed\n            nextTick(() => emits(\"change\", vmodel.value));\n        }\n    }\n    if (!props.multiple) {\n        if (cancelOptions.value.indexOf(\"content\") < 0) return;\n        emits(\"close\", \"content\");\n        isActive.value = false;\n        isHovered.value = false;\n    }\n}\n\n// Provided data is a computed ref to enjure reactivity.\nconst provideData = computed<DropdownComponent>(() => ({\n    props,\n    selected: vmodel.value,\n    selectItem,\n}));\n\n/** Provide functionalities and data to child item components */\nuseProviderParent(contentRef, { data: provideData });\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-drop\"],\n    [\"disabledClass\", \"o-drop--disabled\", null, computed(() => props.disabled)],\n    [\"expandedClass\", \"o-drop--expanded\", null, computed(() => props.expanded)],\n    [\"inlineClass\", \"o-drop--inline\", null, computed(() => props.inline)],\n    [\n        \"mobileClass\",\n        \"o-drop--mobile\",\n        null,\n        computed(() => isMobileModal.value && !hoverable.value),\n    ],\n    [\n        \"positionClass\",\n        \"o-drop--position-\",\n        autoPosition,\n        computed(() => !!autoPosition.value),\n    ],\n    [\n        \"activeClass\",\n        \"o-drop--active\",\n        null,\n        computed(() => isActive.value || props.inline),\n    ],\n    [\"hoverableClass\", \"o-drop--hoverable\", null, hoverable],\n);\n\nconst triggerClasses = defineClasses([\"triggerClass\", \"o-drop__trigger\"]);\n\nconst positionWrapperClasses = defineClasses([\n    \"teleportClass\",\n    \"o-drop--teleport\",\n    null,\n    computed(() => !!props.teleport),\n]);\n\nconst menuMobileOverlayClasses = defineClasses([\n    \"menuMobileOverlayClass\",\n    \"o-drop__overlay\",\n]);\n\nconst menuClasses = defineClasses(\n    [\"menuClass\", \"o-drop__menu\"],\n    [\n        \"menuPositionClass\",\n        \"o-drop__menu--\",\n        autoPosition,\n        computed(() => !!autoPosition.value),\n    ],\n    [\n        \"menuActiveClass\",\n        \"o-drop__menu--active\",\n        null,\n        computed(() => isActive.value || props.inline),\n    ],\n);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ $trigger: triggerRef, $content: contentRef });\n</script>\n\n<template>\n    <div\n        data-oruga=\"dropdown\"\n        :class=\"rootClasses\"\n        @mouseleave=\"onHoverLeave\"\n        @focusout=\"onHoverLeave\">\n        <component\n            :is=\"triggerTag\"\n            v-if=\"!inline\"\n            ref=\"triggerRef\"\n            :tabindex=\"disabled ? null : tabindex\"\n            :class=\"triggerClasses\"\n            :aria-haspopup=\"ariaRole === 'list' ? true : ariaRole\"\n            @click=\"onClick\"\n            @contextmenu=\"onContextMenu\"\n            @mouseenter=\"onHover\"\n            @focus.capture=\"onFocus\">\n            <!--\n                @slot Override the trigger element, default is label prop\n                @binding {boolean} active - dropdown active state\n            -->\n            <slot name=\"trigger\" :active=\"isActive\">\n                {{ label }}\n            </slot>\n        </component>\n\n        <PositionWrapper\n            v-slot=\"{ setContent }\"\n            v-model:position=\"autoPosition\"\n            :teleport=\"teleport\"\n            :class=\"[...rootClasses, ...positionWrapperClasses]\"\n            :trigger=\"triggerRef\"\n            :disabled=\"!isActive\"\n            default-position=\"bottom\"\n            :disable-positioning=\"!isMobileModal\">\n            <transition :name=\"animation\">\n                <div\n                    v-if=\"isMobileModal\"\n                    v-show=\"isActive\"\n                    :tabindex=\"-1\"\n                    :class=\"menuMobileOverlayClasses\"\n                    :aria-hidden=\"disabled || !isActive\" />\n            </transition>\n\n            <transition :name=\"animation\">\n                <component\n                    :is=\"menuTag\"\n                    v-show=\"(!disabled && (isActive || isHovered)) || inline\"\n                    :id=\"menuId\"\n                    :ref=\"(el) => (contentRef = setContent(el))\"\n                    v-trap-focus=\"trapFocus\"\n                    :tabindex=\"menuTabindex\"\n                    :class=\"menuClasses\"\n                    :style=\"menuStyle\"\n                    :role=\"ariaRole\"\n                    :aria-hidden=\"disabled || !isActive\"\n                    :aria-modal=\"!inline && trapFocus\">\n                    <!--\n                        @slot Place dropdown items here\n                        @binding {boolean} active - dropdown active state\n                        @binding {boolean} toggle - toggle active state function\n                    -->\n                    <slot :active=\"isActive\" :toggle=\"toggle\" />\n                </component>\n            </transition>\n        </PositionWrapper>\n    </div>\n</template>\n","<script setup lang=\"ts\" generic=\"T\">\nimport { computed, type PropType } from \"vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { uuid, isEqual } from \"@/utils/helpers\";\nimport { defineClasses, useProviderChild } from \"@/composables\";\n\nimport type { DropdownComponent } from \"./types\";\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\n\n/**\n * @displayName Dropdown Item\n */\ndefineOptions({\n    isOruga: true,\n    name: \"ODropdownItem\",\n    configField: \"dropdown\",\n});\n\nconst props = defineProps({\n    /** The value that will be returned on events and v-model - default is a uuid */\n    value: {\n        type: [String, Number, Boolean, Object, Array] as PropType<T>,\n        default: undefined, // () => uuid(),\n    },\n    /** Item label, unnecessary when default slot is used */\n    label: { type: String, default: undefined },\n    /** Item is disabled */\n    disabled: { type: Boolean, default: false },\n    /** Item is clickable and emit an event */\n    clickable: { type: Boolean, default: true },\n    /** Dropdown item tag name */\n    tag: {\n        type: [String, Object, Function] as PropType<DynamicComponent>,\n        default: () => getOption<DynamicComponent>(\"dropdown.itemTag\", \"div\"),\n    },\n    /** Set the tabindex attribute on the dropdown item div (-1 to prevent selection via tab key) */\n    tabindex: { type: [Number, String], default: 0 },\n    /**\n     * Role attribute to be passed to the list item for better accessibility.\n     * Use menuitem only in situations where your dropdown is related to a navigation menu.\n     * @values listitem, menuitem, button\n     */\n    ariaRole: {\n        type: String,\n        default: getOption(\"dropdown.itemAriaRole\", \"listitem\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the dropdown item */\n    itemClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the dropdown item when active  */\n    itemActiveClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the dropdown item when clickable */\n    itemClickableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the dropdown item when disabled */\n    itemDisabledClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * onclick event\n     * @param value {[String, Number, Boolean, Object, Array]} value prop data\n     * @param event {event} Native Event\n     */\n    (e: \"click\", value: T, event: Event): void;\n}>();\n\nconst itemValue = computed(() => (props.value || uuid()) as T);\n\n// Inject functionalities and data from the parent component\nconst { parent } = useProviderChild<DropdownComponent<T>>();\n\nconst isClickable = computed(\n    () => !parent.value.props.disabled && !props.disabled && props.clickable,\n);\n\nconst isActive = computed(() => {\n    if (parent.value.selected === null) return false;\n    if (parent.value.props.multiple && Array.isArray(parent.value.selected))\n        return parent.value.selected.some((selected) =>\n            isEqual(itemValue.value, selected),\n        );\n    return isEqual(itemValue.value, parent.value.selected);\n});\n\n/** Click listener, select the item. */\nfunction selectItem(event: Event): void {\n    if (!isClickable.value) return;\n    parent.value.selectItem(itemValue.value);\n    emits(\"click\", itemValue.value, event);\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"itemClass\", \"o-drop__item\"],\n    [\n        \"itemDisabledClass\",\n        \"o-drop__item--disabled\",\n        null,\n        computed(() => parent.value.props.disabled || props.disabled),\n    ],\n    [\"itemActiveClass\", \"o-drop__item--active\", null, isActive],\n    [\"itemClickableClass\", \"o-drop__item--clickable\", null, isClickable],\n);\n</script>\n\n<template>\n    <component\n        :is=\"tag\"\n        :class=\"rootClasses\"\n        :role=\"ariaRole\"\n        :tabindex=\"tabindex\"\n        data-oruga=\"dropdown-item\"\n        @click=\"selectItem\">\n        <!--\n            @slot Override the label, default is label prop \n        -->\n        <slot>{{ label }}</slot>\n    </component>\n</template>\n"],"names":["_useModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,UAAM,QAAQ;AA+Md,UAAM,QAAQ;AA8BR,UAAA,SAASA,SAAiB,SAAA,YAAA;AAE1B,UAAA,WAAWA,SAAqB,SAAA,QAAQ;AAExC,UAAA,eAAe,IAAI,MAAM,QAAQ;AAGvC;AAAA,MACI,MAAM,MAAM;AAAA,MACZ,CAAC,MAAO,aAAa,QAAQ;AAAA,IAAA;AAGjC,UAAM,EAAE,SAAa,IAAA,cAAc,MAAM,gBAAgB;AAGzD,UAAM,gBAAgB;AAAA,MAClB,MAAM,SAAS,SAAS,MAAM,eAAe,CAAC,MAAM;AAAA,IAAA;AAIxD,UAAM,iBAAiB,SAAS,MAAM,MAAM,eAAe,cAAc,KAAK;AAExE,UAAA,YAAY,SAAS,OAAO;AAAA,MAC9B,WAAW,MAAM,aAAa,eAAe,MAAM,SAAS,IAAI;AAAA,MAChE,UAAU,MAAM,aAAa,SAAS;AAAA,IACxC,EAAA;AAEI,UAAA,YAAY,SAAS,MAAM,MAAM,SAAS,QAAQ,OAAO,KAAK,CAAC;AAIrE,UAAM,aAAa;AACnB,UAAM,aAAa;AAEnB,UAAM,gBAAgB,CAAA;AAClB,QAAA;AAEJ;AAAA,MACI;AAAA,MACA,CAAC,UAAU;AAEP,YAAI,SAAS,UAAU;AACnB,qBAAW,MAAM;AACb,gBAAI,cAAc,MAAM,QAAQ,SAAS,KAAK,GAAG;AAE/B,4BAAA;AAAA,gBACV,gBAAgB,YAAY,kBAAkB;AAAA,kBAC1C;AAAA,gBAAA,CACH;AAAA,cAAA;AAAA,YAET;AAEA,gBAAI,cAAc,MAAM,QAAQ,QAAQ,KAAK,GAAG;AAE9B,4BAAA;AAAA,gBACV,iBAAiB,SAAS,YAAY,UAAU;AAAA,kBAC5C,WAAW;AAAA,gBAAA,CACd;AAAA,cAAA;AAAA,YAET;AAAA,UAAA,CACH;AAAA,QAAA,WACM,CAAC,OAAO;AAEf,wBAAc,QAAQ,CAAC,OAAO,GAAI,CAAA;AAClC,wBAAc,SAAS;AAAA,QAC3B;AAAA,MACJ;AAAA,MACA,EAAE,WAAW,KAAK;AAAA,IAAA;AAGtB,gBAAY,MAAM;AAEd,oBAAc,QAAQ,CAAC,OAAO,GAAI,CAAA;AAClC,oBAAc,SAAS;AAAA,IAAA,CAC1B;AAED,UAAM,gBAAgB;AAAA,MAAS,MAC3B,OAAO,MAAM,cAAc,YACrB,MAAM,YACF,CAAC,UAAU,WAAW,SAAS,IAC/B,KACJ,MAAM;AAAA,IAAA;AAIhB,aAAS,mBAAyB;AAC1B,UAAA,CAAC,SAAS,SAAS,MAAM;AAAQ;AACrC,UAAI,cAAc,MAAM,QAAQ,SAAS,IAAI;AAAG;AAChD,YAAM,SAAS,SAAS;AACxB,eAAS,QAAQ;AAAA,IACrB;AAGA,aAAS,WAAW,OAA4B;AAC5C,UAAI,SAAS,UAAU,MAAM,QAAQ,YAAY,MAAM,QAAQ,QAAQ;AACnE,YAAI,cAAc,MAAM,QAAQ,QAAQ,IAAI;AAAG;AAC/C,cAAM,SAAS,QAAQ;AACvB,iBAAS,QAAQ;AAAA,MACrB;AAAA,IACJ;AAEA,aAAS,UAAgB;AACrB,UAAI,MAAM,SAAS,QAAQ,OAAO,IAAI;AAAG;AAClC;IACX;AAEA,aAAS,cAAc,OAAyB;AAC5C,UAAI,MAAM,SAAS,QAAQ,aAAa,IAAI;AAAG;AAC/C,YAAM,eAAe;AAChB;IACT;AAEA,aAAS,UAAgB;AACrB,UAAI,MAAM,SAAS,QAAQ,OAAO,IAAI;AAAG;AACpC;IACT;AAEM,UAAA,YAAY,IAAI,KAAK;AAC3B,aAAS,UAAgB;AACjB,UAAA,CAAC,eAAe,SAAS,MAAM,SAAS,QAAQ,OAAO,KAAK,GAAG;AAC/D,kBAAU,QAAQ;AACb;MACT;AAAA,IACJ;AACA,aAAS,eAAqB;AAC1B,UAAI,CAAC,eAAe,SAAS,UAAU,OAAO;AAC1C,kBAAU,QAAQ;AACV;MACZ;AAAA,IACJ;AAGA,aAAS,SAAe;AACpB,UAAI,MAAM;AAAU;AACpB,UAAI,SAAS;AAAgB,iBAAA,QAAQ,CAAC,SAAS;AAAA;AAG1C,iBAAS,MAAO,SAAS,QAAQ,CAAC,SAAS,KAAM;AAAA,IAC1D;AAEA,aAAS,OAAa;AAClB,UAAI,MAAM;AAAU;AACpB,UAAI,MAAM,OAAO;AACb,gBAAQ,WAAW,MAAM;AACrB,mBAAS,QAAQ;AACT,kBAAA;AAAA,QAAA,GACT,MAAM,KAAK;AAAA,MAAA,OACX;AACH,iBAAS,QAAQ;AAAA,MACrB;AAAA,IACJ;AAEA,aAAS,UAAgB;AACrB,UAAI,cAAc,MAAM,QAAQ,SAAS,IAAI;AAAG;AAChD,YAAM,SAAS,SAAS;AACf,eAAA,QAAQ,CAAC,MAAM;AACxB,UAAI,SAAS,MAAM;AAAW,qBAAa,KAAK;AAAA,IACpD;AAIA,QAAI,YAAY,MAAM;AACD,uBAAA,UAAU,qBAAqB,UAAU;AAG9D,aAAS,sBAA4B;AAC3B,YAAA,WAAW,aAAa,UAAU;AACpC,UAAA,SAAS,iBAAiB,SAAS,cAAc;AACjD,YACI,SAAS,YAAY,SAAS,gBAC9B,SAAS,cACX;AACE,gBAAM,YAAY;AAAA,QAAA,WACX,SAAS,aAAa,GAAG;AAChC,gBAAM,cAAc;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAUA,aAAS,WAAW,OAAkB;AAClC,UAAI,MAAM,UAAU;AAChB,YAAI,OAAO,SAAS,MAAM,QAAQ,OAAO,KAAK,GAAG;AAC7C,cAAI,OAAO,MAAM,QAAQ,KAAK,MAAM,IAAI;AAEpC,mBAAO,QAAQ,CAAC,GAAG,OAAO,OAAO,KAAK;AAAA,UAAA,OACnC;AAEH,mBAAO,QAAQ,OAAO,MAAM,OAAO,CAAC,QAAQ,QAAQ,KAAK;AAAA,UAC7D;AAAA,QAAA,OACG;AAEI,iBAAA,QAAQ,CAAC,KAAK;AAAA,QACzB;AAEA,iBAAS,MAAM,MAAM,UAAU,OAAO,KAAK,CAAC;AAAA,MAAA,OACzC;AACC,YAAA,OAAO,UAAU,OAAO;AAExB,iBAAO,QAAQ;AAEf,mBAAS,MAAM,MAAM,UAAU,OAAO,KAAK,CAAC;AAAA,QAChD;AAAA,MACJ;AACI,UAAA,CAAC,MAAM,UAAU;AACjB,YAAI,cAAc,MAAM,QAAQ,SAAS,IAAI;AAAG;AAChD,cAAM,SAAS,SAAS;AACxB,iBAAS,QAAQ;AACjB,kBAAU,QAAQ;AAAA,MACtB;AAAA,IACJ;AAGM,UAAA,cAAc,SAA4B,OAAO;AAAA,MACnD;AAAA,MACA,UAAU,OAAO;AAAA,MACjB;AAAA,IACF,EAAA;AAGF,sBAAkB,YAAY,EAAE,MAAM,YAAa,CAAA;AAInD,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,QAAQ;AAAA,MACtB,CAAC,iBAAiB,oBAAoB,MAAM,SAAS,MAAM,MAAM,QAAQ,CAAC;AAAA,MAC1E,CAAC,iBAAiB,oBAAoB,MAAM,SAAS,MAAM,MAAM,QAAQ,CAAC;AAAA,MAC1E,CAAC,eAAe,kBAAkB,MAAM,SAAS,MAAM,MAAM,MAAM,CAAC;AAAA,MACpE;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,cAAc,SAAS,CAAC,UAAU,KAAK;AAAA,MAC1D;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,CAAC,CAAC,aAAa,KAAK;AAAA,MACvC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,SAAS,SAAS,MAAM,MAAM;AAAA,MACjD;AAAA,MACA,CAAC,kBAAkB,qBAAqB,MAAM,SAAS;AAAA,IAAA;AAG3D,UAAM,iBAAiB,cAAc,CAAC,gBAAgB,iBAAiB,CAAC;AAExE,UAAM,yBAAyB,cAAc;AAAA,MACzC;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,MAAM,CAAC,CAAC,MAAM,QAAQ;AAAA,IAAA,CAClC;AAED,UAAM,2BAA2B,cAAc;AAAA,MAC3C;AAAA,MACA;AAAA,IAAA,CACH;AAED,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,cAAc;AAAA,MAC5B;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,CAAC,CAAC,aAAa,KAAK;AAAA,MACvC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,SAAS,SAAS,MAAM,MAAM;AAAA,MACjD;AAAA,IAAA;AAMJ,aAAa,EAAE,UAAU,YAAY,UAAU,WAAY,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtiB3D,UAAM,QAAQ;AAmDd,UAAM,QAAQ;AASd,UAAM,YAAY,SAAS,MAAO,MAAM,SAAS,MAAY;AAGvD,UAAA,EAAE,WAAW;AAEnB,UAAM,cAAc;AAAA,MAChB,MAAM,CAAC,OAAO,MAAM,MAAM,YAAY,CAAC,MAAM,YAAY,MAAM;AAAA,IAAA;AAG7D,UAAA,WAAW,SAAS,MAAM;AACxB,UAAA,OAAO,MAAM,aAAa;AAAa,eAAA;AACvC,UAAA,OAAO,MAAM,MAAM,YAAY,MAAM,QAAQ,OAAO,MAAM,QAAQ;AAC3D,eAAA,OAAO,MAAM,SAAS;AAAA,UAAK,CAAC,aAC/B,QAAQ,UAAU,OAAO,QAAQ;AAAA,QAAA;AAEzC,aAAO,QAAQ,UAAU,OAAO,OAAO,MAAM,QAAQ;AAAA,IAAA,CACxD;AAGD,aAAS,WAAW,OAAoB;AACpC,UAAI,CAAC,YAAY;AAAO;AACjB,aAAA,MAAM,WAAW,UAAU,KAAK;AACjC,YAAA,SAAS,UAAU,OAAO,KAAK;AAAA,IACzC;AAIA,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,cAAc;AAAA,MAC5B;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,OAAO,MAAM,MAAM,YAAY,MAAM,QAAQ;AAAA,MAChE;AAAA,MACA,CAAC,mBAAmB,wBAAwB,MAAM,QAAQ;AAAA,MAC1D,CAAC,sBAAsB,2BAA2B,MAAM,WAAW;AAAA,IAAA;;;;;;;;;;;;;;;;;;;"}