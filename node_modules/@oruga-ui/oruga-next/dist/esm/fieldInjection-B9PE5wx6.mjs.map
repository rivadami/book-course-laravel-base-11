{"version":3,"file":"fieldInjection-B9PE5wx6.mjs","sources":["../../src/components/field/fieldInjection.ts"],"sourcesContent":["import {\n    computed,\n    inject,\n    provide,\n    type ComputedRef,\n    type InjectionKey,\n} from \"vue\";\n\nimport Field from \"./Field.vue\";\nimport { getOption } from \"@/utils/config\";\n\nexport type FieldProps = InstanceType<typeof Field>[\"$props\"];\n\ntype FieldData = {\n    $el: Element;\n    props: FieldProps;\n    hasInnerField: boolean;\n    hasMessage: boolean;\n    fieldVariant: string;\n    fieldMessage: string;\n    addInnerField: () => void;\n    setInputId: (value: string) => void;\n    setFocus: (value: boolean) => void;\n    setFilled: (value: boolean) => void;\n    setVariant: (value: string) => void;\n    setMessage: (value: string) => void;\n};\n\n/** provide/inject type */\ntype ProvidedField = ComputedRef<FieldData> | undefined;\n\n/** provide/inject key */\nconst $FieldKey: InjectionKey<ProvidedField> = Symbol(\"FielData\");\n\n/**\n * Provide field component data via dependency injection.\n * Provided data is a computed ref to enjure reactivity.\n */\nexport function provideField(data: ProvidedField): void {\n    provide($FieldKey, data);\n}\n\n/** Inject parent field component if used inside one. **/\nexport function injectField() {\n    const parentField = inject($FieldKey, undefined);\n\n    /**\n     * Get the type prop from parent if it's a Field.\n     */\n    const statusVariant = computed(() => {\n        if (!parentField?.value?.fieldVariant) return undefined;\n        if (typeof parentField.value.fieldVariant === \"string\")\n            return parentField.value.fieldVariant;\n        if (Array.isArray(parentField.value.fieldVariant)) {\n            for (const key in parentField.value.fieldVariant as any) {\n                if (parentField.value.fieldVariant[key]) return key;\n            }\n        }\n        return undefined;\n    });\n\n    /** Get the message prop from parent if it's a Field. */\n    const statusMessage = computed(() =>\n        parentField.value?.hasMessage ? parentField.value.fieldMessage : \"\",\n    );\n\n    /** Icon name based on the variant. */\n    const statusVariantIcon = computed<string>(() => {\n        const statusVariantIcon = getOption(\"statusVariantIcon\", {\n            success: \"check\",\n            danger: \"alert-circle\",\n            info: \"information\",\n            warning: \"alert\",\n        });\n        return statusVariantIcon[statusVariant.value] || \"\";\n    });\n\n    return {\n        parentField,\n        statusVariant,\n        statusVariantIcon,\n        statusMessage,\n    };\n}\n"],"names":["statusVariantIcon"],"mappings":";;;AAgCA,MAAM,YAAyC,OAAO,UAAU;AAMzD,SAAS,aAAa,MAA2B;AACpD,UAAQ,WAAW,IAAI;AAC3B;AAGO,SAAS,cAAc;AACpB,QAAA,cAAc,OAAO,WAAW,MAAS;AAKzC,QAAA,gBAAgB,SAAS,MAAM;;AAC7B,QAAA,GAAC,gDAAa,UAAb,mBAAoB;AAAqB,aAAA;AAC1C,QAAA,OAAO,YAAY,MAAM,iBAAiB;AAC1C,aAAO,YAAY,MAAM;AAC7B,QAAI,MAAM,QAAQ,YAAY,MAAM,YAAY,GAAG;AACpC,iBAAA,OAAO,YAAY,MAAM,cAAqB;AACjD,YAAA,YAAY,MAAM,aAAa,GAAG;AAAU,iBAAA;AAAA,MACpD;AAAA,IACJ;AACO,WAAA;AAAA,EAAA,CACV;AAGD,QAAM,gBAAgB;AAAA,IAAS,MAC3B;;AAAA,gCAAY,UAAZ,mBAAmB,cAAa,YAAY,MAAM,eAAe;AAAA;AAAA,EAAA;AAI/D,QAAA,oBAAoB,SAAiB,MAAM;AACvCA,UAAAA,qBAAoB,UAAU,qBAAqB;AAAA,MACrD,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IAAA,CACZ;AACMA,WAAAA,mBAAkB,cAAc,KAAK,KAAK;AAAA,EAAA,CACpD;AAEM,SAAA;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAER;"}