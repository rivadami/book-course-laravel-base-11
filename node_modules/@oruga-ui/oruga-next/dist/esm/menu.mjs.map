{"version":3,"file":"menu.mjs","sources":["../../src/components/menu/Menu.vue","../../src/components/menu/MenuItem.vue","../../src/components/menu/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, computed, type PropType } from \"vue\";\n\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport {\n    defineClasses,\n    useProviderParent,\n    type ProviderItem,\n} from \"@/composables\";\n\nimport type { MenuComponent, MenuItemComponent } from \"./types\";\nimport type { ComponentClass } from \"@/types\";\n\n/**\n * A simple menu\n * @displayName Menu\n * @requires ./MenuItem.vue\n * @style _menu.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OMenu\",\n    configField: \"menu\",\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Menu label */\n    label: { type: String, default: undefined },\n    /** If sub menu items are collapsible */\n    accordion: { type: Boolean, default: true },\n    /** If the menu items are clickable */\n    activable: { type: Boolean, default: true },\n    /**\n     * Role attribute to be passed to the list container for better accessibility.\n     * Use menu only in situations where your dropdown is related to a navigation menu.\n     * @values list, menu, dialog\n     */\n    ariaRole: {\n        type: String,\n        default: getOption(\"menu.ariaRole\", \"menu\"),\n        validator: (value: string) =>\n            [\"menu\", \"list\", \"dialog\"].indexOf(value) > -1,\n    },\n    /** Icon to be shown */\n    icon: { type: String, default: undefined },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"menu.iconPack\"),\n    },\n    /**\n     * Icon size\n     * @values small, medium, large\n     */\n    iconSize: {\n        type: String,\n        default: () => getOption(\"menu.iconSize\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the menu list */\n    listClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the menu list label */\n    listLabelClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst rootRef = ref();\n\n// provided data is a computed ref to enjure reactivity\nconst provideData = computed<MenuComponent>(() => ({\n    activable: props.activable,\n    accordion: props.accordion,\n    resetMenu,\n}));\n\n/** provide functionalities and data to child item components */\nconst { childItems } = useProviderParent<MenuItemComponent>(rootRef, {\n    data: provideData,\n});\n\nfunction resetMenu(excludedItems: ProviderItem[] = []): void {\n    childItems.value.forEach((item) => {\n        if (!excludedItems.map((i) => i?.identifier).includes(item.identifier))\n            item.data.reset();\n    });\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses([\"rootClass\", \"o-menu\"]);\n\nconst listClasses = defineClasses([\"listClass\", \"o-menu__list\"]);\n\nconst labelClasses = defineClasses([\"listLabelClass\", \"o-menu__label\"]);\n</script>\n\n<template>\n    <div ref=\"rootRef\" data-oruga=\"menu\" :class=\"rootClasses\">\n        <div v-if=\"label || $slots.label\" :class=\"labelClasses\">\n            <!-- \n                @slot Override icon and label\n            -->\n            <slot name=\"label\">\n                <o-icon\n                    v-if=\"icon\"\n                    :icon=\"icon\"\n                    :pack=\"iconPack\"\n                    :size=\"iconSize\" />\n                <span>{{ label }}</span>\n            </slot>\n        </div>\n        <ul :class=\"listClasses\" :role=\"ariaRole\">\n            <!--\n                @slot Place menu items here \n            -->\n            <slot />\n        </ul>\n    </div>\n</template>\n","<script setup lang=\"ts\">\nimport { ref, computed, toRaw, type PropType } from \"vue\";\n\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport {\n    defineClasses,\n    useProviderChild,\n    useProviderParent,\n    type ProviderItem,\n} from \"@/composables\";\n\nimport type {\n    MenuComponent,\n    MenuItemComponent,\n    MenuItemProvider,\n} from \"./types\";\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\n\n/**\n * A menu list item\n * @displayName Menu Item\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OMenuItem\",\n    configField: \"menu\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** The active state of the menu item, use v-model:active to make it two-way binding. */\n    active: { type: Boolean, default: false },\n    /** Menu item label */\n    label: { type: String, default: undefined },\n    /** Menu item will be expanded */\n    expanded: { type: Boolean, default: false },\n    /** Menu item will be disabled */\n    disabled: { type: Boolean, default: false },\n    /** Icon to be shown */\n    icon: { type: String, default: undefined },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"menu.iconPack\"),\n    },\n    /**\n     * Icon size\n     * @values small, medium, large\n     */\n    iconSize: {\n        type: String,\n        default: () => getOption(\"menu.iconSize\"),\n    },\n    /** Transition name to apply on menu list */\n    animation: {\n        type: String,\n        default: () => getOption(\"menu.animation\", \"slide\"),\n    },\n    /** Menu item tag name */\n    tag: {\n        type: [String, Object, Function] as PropType<DynamicComponent>,\n        default: () => getOption<DynamicComponent>(\"menu.menuTag\", \"button\"),\n    },\n    /**\n     * Role attribute to be passed to the list item for better accessibility.\n     * @values listitem, menuitem\n     */\n    ariaRole: {\n        type: String,\n        default: getOption(\"menu.itemAriaRole\", \"menuitem\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the menu item */\n    itemClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the active menu item */\n    itemActiveClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the disabled menu item */\n    itemDisabledClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the icon of menu item */\n    itemIconTextClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the menu item when is a submenu */\n    itemSubmenuClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the root element of menu item */\n    itemWrapperClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\ndefineEmits<{\n    /**\n     * active prop two-way binding\n     * @param value {boolean} updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * expanded prop two-way binding\n     * @param value {boolean} updated expanded prop\n     */\n    (e: \"update:expanded\", value: boolean): void;\n}>();\n\nconst providedData = computed<MenuItemComponent>(() => ({\n    reset,\n}));\n\n// inject functionalities and data from the parent menu component\nconst { parent, item } = useProviderChild<MenuComponent>({\n    data: providedData,\n});\n\n// inject functionalities and data from the parent menu-item component\nconst providedItem = useProviderChild<MenuItemProvider>({\n    key: \"menu-item\",\n    needParent: false,\n});\n\nconst itemParent = computed(() => providedItem.parent?.value);\n\nconst isActive = defineModel<boolean>(\"active\", { default: false });\n\nconst isExpanded = defineModel<boolean>(\"expanded\", { default: false });\n\n/** template identifier */\nconst identifier = computed(() =>\n    itemParent.value\n        ? `menu-item-${providedItem.item.value.identifier}`\n        : `menu-${item.value.identifier}`,\n);\n\nfunction onClick(): void {\n    if (props.disabled) return;\n    triggerReset();\n    if (parent.value.accordion) isExpanded.value = !isExpanded.value;\n    if (parent.value.activable) isActive.value = !isActive.value;\n}\n\nfunction triggerReset(child?: ProviderItem): void {\n    // The point of this method is to collect references to the clicked item and any parent,\n    // this way we can skip resetting those elements.\n    if (typeof itemParent.value?.triggerReset === \"function\") {\n        itemParent.value.triggerReset(toRaw(item.value));\n    }\n    // else if not a sub item reset parent menu\n    else if (typeof parent.value.resetMenu === \"function\") {\n        parent.value.resetMenu([toRaw(item.value), child]);\n    }\n}\n\nfunction reset(): void {\n    if (parent.value.accordion) isExpanded.value = false;\n    if (parent.value.activable) isActive.value = false;\n}\n\nconst rootRef = ref();\n\n// provided data is a computed ref to enjure reactivity\nconst provideData = computed<MenuItemProvider>(() => ({\n    triggerReset,\n}));\n\n/** provide functionalities and data to child item components */\nuseProviderParent(rootRef, { key: \"menu-item\", data: provideData });\n\n// --- Computed Component Classes ---\n\nconst wrapperClasses = defineClasses([\n    \"itemWrapperClass\",\n    \"o-menu__item__wrapper\",\n]);\n\nconst itemClasses = defineClasses(\n    [\"itemClass\", \"o-menu__item\"],\n    [\"itemActiveClass\", \"o-menu__item--active\", null, isActive],\n    [\n        \"itemDisabledClass\",\n        \"o-menu__item--disabled\",\n        null,\n        computed(() => props.disabled),\n    ],\n    [\n        \"itemIconTextClass\",\n        \"o-menu__item--icon-text\",\n        null,\n        computed(() => !!props.icon),\n    ],\n);\n\nconst submenuClasses = defineClasses([\n    \"itemSubmenuClass\",\n    \"o-menu__item__submenu\",\n]);\n</script>\n\n<template>\n    <li\n        ref=\"rootRef\"\n        :role=\"ariaRole\"\n        :class=\"wrapperClasses\"\n        :data-id=\"identifier\"\n        data-oruga=\"menu-item\"\n        aria-roledescription=\"item\">\n        <component\n            :is=\"tag\"\n            v-bind=\"$attrs\"\n            :class=\"itemClasses\"\n            role=\"button\"\n            :disabled=\"disabled\"\n            @keyup.enter=\"onClick()\"\n            @click=\"onClick()\">\n            <o-icon\n                v-if=\"icon\"\n                :icon=\"icon\"\n                :pack=\"iconPack\"\n                :size=\"iconSize\" />\n            <!-- \n                @slot Override label\n                @binding {boolean} expanded - item expanded state\n                @binding {boolean} active - item active state\n            -->\n            <slot name=\"label\" :expanded=\"isExpanded\" :active=\"isActive\">\n                <span>{{ label }}</span>\n            </slot>\n        </component>\n\n        <!-- sub menu items -->\n        <template v-if=\"$slots.default\">\n            <transition :name=\"animation\">\n                <ul v-show=\"isExpanded\" :class=\"submenuClasses\">\n                    <!--\n                        @slot Place menu items here \n                    -->\n                    <slot />\n                </ul>\n            </transition>\n        </template>\n    </li>\n</template>\n","import type { App, Plugin } from \"vue\";\n\nimport Menu from \"./Menu.vue\";\nimport MenuItem from \"./MenuItem.vue\";\n\nimport { registerComponent } from \"@/utils/plugins\";\n\n/** export menu plugin */\nexport default {\n    install(app: App) {\n        registerComponent(app, Menu);\n        registerComponent(app, MenuItem);\n    },\n} as Plugin;\n\n/** export menu components */\nexport { Menu as OMenu, MenuItem as OMenuItem };\n"],"names":["_useModel","Menu","MenuItem"],"mappings":"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"}