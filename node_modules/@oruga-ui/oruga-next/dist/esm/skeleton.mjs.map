{"version":3,"file":"skeleton.mjs","sources":["../../src/components/skeleton/Skeleton.vue","../../src/components/skeleton/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, type PropType } from \"vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { toCssDimension } from \"@/utils/helpers\";\nimport { defineClasses } from \"@/composables\";\n\nimport type { ComponentClass } from \"@/types\";\n\n/**\n * A placeholder for content to load\n * @displayName Skeleton\n * @style _skeleton.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OSkeleton\",\n    configField: \"skeleton\",\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Show or hide loader\t */\n    active: { type: Boolean, default: true },\n    /** Show a loading animation */\n    animated: {\n        type: Boolean,\n        default: () => getOption(\"skeleton.animated\", true),\n    },\n    /** Custom width */\n    width: { type: [Number, String], default: undefined },\n    /** Custom height */\n    height: { type: [Number, String], default: undefined },\n    /** Show a circle shape */\n    circle: { type: Boolean, default: false },\n    /** Enable rounded style */\n    rounded: {\n        type: Boolean,\n        default: () => getOption(\"skeleton.rounded\", true),\n    },\n    /** Number of shapes to display */\n    count: { type: Number, default: 1 },\n    /**\n     * Size of skeleton\n     * @values small, medium, large\n     */\n    size: { type: String, default: undefined },\n    /**\n     * Skeleton position in relation to the element\n     * @values left, centered, right\n     */\n    position: {\n        type: String as PropType<\"left\" | \"centered\" | \"right\">,\n        default: \"left\",\n        validator: (value: string) =>\n            [\"left\", \"centered\", \"right\"].indexOf(value) > -1,\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the skeleton animation */\n    animationClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the skeleton position */\n    positionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the skeleton item */\n    itemClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the skeleton item rounded */\n    itemRoundedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the skeleton size */\n    sizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst itemStyle = computed(() => ({\n    height: toCssDimension(props.height),\n    width: toCssDimension(props.width),\n    borderRadius: props.circle ? \"50%\" : null,\n}));\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-sklt\"],\n    [\n        \"positionClass\",\n        \"o-sklt--\",\n        computed(() => props.position),\n        computed(() => !!props.position),\n    ],\n);\n\nconst itemClasses = defineClasses(\n    [\"itemClass\", \"o-sklt__item\"],\n    [\n        \"itemRoundedClass\",\n        \"o-sklt__item--rounded\",\n        null,\n        computed(() => props.rounded),\n    ],\n    [\n        \"animationClass\",\n        \"o-sklt__item--animated\",\n        null,\n        computed(() => props.animated),\n    ],\n    [\n        \"sizeClass\",\n        \"o-sklt__item--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n);\n</script>\n\n<template>\n    <div v-if=\"active\" data-oruga=\"skeleton\" :class=\"rootClasses\">\n        <div\n            v-for=\"i in count\"\n            :key=\"i\"\n            :class=\"itemClasses\"\n            :style=\"itemStyle\" />\n    </div>\n</template>\n","import type { App, Plugin } from \"vue\";\n\nimport Skeleton from \"./Skeleton.vue\";\n\nimport { registerComponent } from \"@/utils/plugins\";\n\n/** export skeleton plugin */\nexport default {\n    install(app: App) {\n        registerComponent(app, Skeleton);\n    },\n} as Plugin;\n\n/** export skeleton components */\nexport { Skeleton as OSkeleton };\n"],"names":["Skeleton"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,UAAM,QAAQ;AAuER,UAAA,YAAY,SAAS,OAAO;AAAA,MAC9B,QAAQ,eAAe,MAAM,MAAM;AAAA,MACnC,OAAO,eAAe,MAAM,KAAK;AAAA,MACjC,cAAc,MAAM,SAAS,QAAQ;AAAA,IACvC,EAAA;AAIF,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,QAAQ;AAAA,MACtB;AAAA,QACI;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,QAAQ;AAAA,QAC7B,SAAS,MAAM,CAAC,CAAC,MAAM,QAAQ;AAAA,MACnC;AAAA,IAAA;AAGJ,UAAM,cAAc;AAAA,MAChB,CAAC,aAAa,cAAc;AAAA,MAC5B;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,OAAO;AAAA,MAChC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,QAAQ;AAAA,MACjC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA,SAAS,MAAM,MAAM,IAAI;AAAA,QACzB,SAAS,MAAM,CAAC,CAAC,MAAM,IAAI;AAAA,MAC/B;AAAA,IAAA;;;;;;;;;;;;;;;;;;ACzHJ,MAAe,QAAA;AAAA,EACX,QAAQ,KAAU;AACd,sBAAkB,KAAKA,SAAQ;AAAA,EACnC;AACJ;"}