{"version":3,"file":"table.mjs","sources":["../../src/components/table/TableMobileSort.vue","../../src/components/table/TableColumn.vue","../../src/components/table/TablePagination.vue","../../src/components/table/Table.vue","../../src/components/table/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, watch, ref, type PropType } from \"vue\";\n\nimport OButton from \"../button/Button.vue\";\nimport OSelect from \"../select/Select.vue\";\nimport OIcon from \"../icon/Icon.vue\";\nimport OField from \"../field/Field.vue\";\n\nimport { getValueByPath } from \"@/utils/helpers\";\n\nimport type { TableColumn } from \"./types\";\nimport type { ClassBind } from \"@/types\";\n\ndefineOptions({\n    isOruga: true,\n    name: \"OTableMobileSort\",\n    configField: \"table\",\n});\n\nconst props = defineProps({\n    currentSortColumn: {\n        type: Object as PropType<TableColumn>,\n        default: undefined,\n    },\n    columns: {\n        type: Array as PropType<TableColumn[]>,\n        default: undefined,\n    },\n    placeholder: { type: String, default: undefined },\n    iconPack: { type: String, default: undefined },\n    sortIcon: { type: String, default: \"arrow-up\" },\n    sortIconSize: { type: String, default: \"small\" },\n    isAsc: { type: Boolean, default: false },\n    mobileSortClasses: { type: Array as PropType<ClassBind[]>, required: true },\n});\n\nconst emits = defineEmits<{\n    (e: \"sort\", column: TableColumn, event: Event);\n}>();\n\nconst mobileSort = ref<string>(\n    getValueByPath(props.currentSortColumn, \"identifier\"),\n);\n\nconst showPlaceholder = computed(\n    () =>\n        !props.columns ||\n        !props.columns.some(\n            (column) =>\n                getValueByPath(column, \"identifier\") === mobileSort.value,\n        ),\n);\n\nconst sortableColumns = computed(() =>\n    props.columns ? props.columns.filter((c) => c.sortable) : [],\n);\n\nconst isCurrentSort = computed(\n    () =>\n        getValueByPath(props.currentSortColumn, \"identifier\") ===\n        mobileSort.value,\n);\n\nwatch(mobileSort, (value) => {\n    if (props.currentSortColumn.identifier === value) return;\n    sort();\n});\n\nwatch(\n    () => props.currentSortColumn,\n    (column) => {\n        mobileSort.value = getValueByPath(column, \"identifier\");\n    },\n);\n\nfunction sort(event?: Event): void {\n    const column = sortableColumns.value.filter(\n        (c) => getValueByPath(c, \"identifier\") === mobileSort.value,\n    )[0];\n    emits(\"sort\", column, event);\n}\n</script>\n\n<template>\n    <div :class=\"mobileSortClasses\">\n        <o-field>\n            <o-select v-model=\"mobileSort\" expanded>\n                <template v-if=\"placeholder\">\n                    <option\n                        v-show=\"showPlaceholder\"\n                        :value=\"{}\"\n                        selected\n                        disabled\n                        hidden>\n                        {{ placeholder }}\n                    </option>\n                </template>\n                <option\n                    v-for=\"(column, index) in sortableColumns\"\n                    :key=\"index\"\n                    :value=\"column.identifier\">\n                    {{ column.label }}\n                </option>\n            </o-select>\n            <o-button @click=\"sort($event)\">\n                <o-icon\n                    v-show=\"isCurrentSort\"\n                    :icon=\"sortIcon\"\n                    :pack=\"iconPack\"\n                    :size=\"sortIconSize\"\n                    both\n                    :rotation=\"!isAsc ? 180 : 0\" />\n            </o-button>\n        </o-field>\n    </div>\n</template>\n","<script setup lang=\"ts\">\nimport { toRaw, computed, getCurrentInstance, type PropType } from \"vue\";\n\nimport { useProviderChild } from \"@/composables\";\nimport { toCssDimension } from \"@/utils/helpers\";\n\nimport type { TableColumnComponent } from \"./types\";\n\n/**\n * @displayName Table Column\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OTableColumn\",\n    configField: \"table\",\n});\n\nconst props = defineProps({\n    /** Define the column label */\n    label: { type: String, default: undefined },\n    /** Define an object property key if data is an object */\n    field: { type: String, default: undefined },\n    /** Define a column sub heading  */\n    subheading: { type: String, default: undefined },\n    /** Add addtional meta information for the column for custom purpose*/\n    meta: {\n        type: [String, Number, Boolean, Function, Object, Array],\n        default: undefined,\n    },\n    /** Column fixed width */\n    width: { type: [Number, String], default: undefined },\n    /** Define column value as number */\n    numeric: { type: Boolean, default: false },\n    /**\n     * Position of the column content\n     * @values left, centered, right\n     */\n    position: {\n        type: String,\n        default: undefined,\n        validator: (value: string) =>\n            [\"left\", \"centered\", \"right\"].indexOf(value) > -1,\n    },\n    /** Enable an additional searchbar below the column header */\n    searchable: { type: Boolean, default: false },\n    /** Enable column sortability */\n    sortable: { type: Boolean, default: false },\n    /** Define whether the column is visible or not */\n    visible: { type: Boolean, default: true },\n    /** Define a custom sort function */\n    customSort: {\n        type: Function as PropType<\n            (a: unknown, b: unknown, isAsc: boolean) => number\n        >,\n        default: undefined,\n    },\n    /** Define a custom funtion for the filter search */\n    customSearch: {\n        type: Function as PropType<(row: unknown, filter: string) => boolean>,\n        default: undefined,\n    },\n    /** Whether the column is sticky or not */\n    sticky: { type: Boolean, default: false },\n    /** Make header selectable */\n    headerSelectable: { type: Boolean, default: false },\n    /**\n     * Adds native attributes to th\n     * @deprecated will be moved to table component in v0.9\n     */\n    thAttrs: {\n        type: Function as PropType<(column: typeof props) => object>,\n        default: () => ({}),\n    },\n    /**\n     * Adds native attributes to td\n     * @deprecated will be moved to table component in v0.9\n     */\n    tdAttrs: {\n        type: Function as PropType<\n            (row: unknown, column: typeof props) => object\n        >,\n        default: () => ({}),\n    },\n});\n\nconst style = computed(() => ({\n    width: toCssDimension(props.width),\n}));\n\nconst isHeaderUnselectable = computed(\n    () => !props.headerSelectable && props.sortable,\n);\n\nconst vm = getCurrentInstance();\n\nconst providedData = computed<TableColumnComponent>(() => ({\n    ...toRaw(props), // TODO: remove toRaw when tdAttrs/thAttrs are moved to table component\n    label: props.label,\n    field: props.field,\n    subheading: props.subheading,\n    meta: props.meta,\n    width: props.width,\n    numeric: props.numeric,\n    position: props.position,\n    searchable: props.searchable,\n    sortable: props.sortable,\n    visible: props.visible,\n    customSort: props.customSort,\n    customSearch: props.customSearch,\n    sticky: props.sticky,\n    headerSelectable: props.headerSelectable,\n    $el: vm.proxy,\n    $slots: vm.slots,\n    style: style.value,\n    isHeaderUnselectable: isHeaderUnselectable.value,\n}));\n\nconst { item } = useProviderChild({ data: providedData });\n</script>\n\n<template>\n    <span :data-id=\"item.identifier\" data-oruga=\"table-column\">\n        {{ label }}\n\n        <!--\n            Do not render these slots here.\n            These are only for documentation purposes.\n            Slots are defined in table component.\n        -->\n        <template v-if=\"false\">\n            <!--\n                @slot Default Slot\n                @binding {unknown} row - row data \n                @binding {Column} column - column definition \n                @binding {number} index - row index \n                @binding {number} colindex - column index \n                @binding {(row): void} toggle-details - toggle details function \n            -->\n            <slot\n                :row=\"null\"\n                :column=\"null\"\n                :index=\"null\"\n                :colindex=\"null\"\n                :toggle-details=\"null\" />\n            <!--\n                @slot Override header label \n                @binding {Column} column - column definition \n                @binding {number} index - column index \n            -->\n            <slot name=\"header\" :column=\"null\" :index=\"null\" />\n            <!--\n                @slot Override subheading label \n                @binding {Column} column - column definition \n                @binding {number} index - column index \n            -->\n            <slot name=\"subheading\" :column=\"null\" :index=\"null\" />\n\n            <!--\n                @slot Override searchable input \n                @binding {Column} column - column definition \n                @binding {number} index - column index \n                @binding {Record<string,string>} filters - active filters object\n            -->\n            <slot\n                name=\"searchable\"\n                :column=\"null\"\n                :index=\"null\"\n                :filters=\"null\" />\n        </template>\n    </span>\n</template>\n","<script setup lang=\"ts\">\nimport type { PropType } from \"vue\";\n\nimport OPagination from \"../pagination/Pagination.vue\";\n\nimport { usePropBinding } from \"@/composables\";\n\nimport type { ComponentClass } from \"@/types\";\n\ndefineOptions({\n    isOruga: true,\n    name: \"OTablePagination\",\n    configField: \"table\",\n});\n\nconst props = defineProps({\n    current: { type: Number, default: undefined },\n    paginated: { type: Boolean, default: false },\n    rootClass: {\n        type: [String, Array, Object] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * current prop two-way binding\n     * @param value {number} updated current prop\n     */\n    (e: \"update:current\", value: number): void;\n    /**\n     * on current change event\n     * @param value {number} current value\n     */\n    (e: \"change\", event: number): void;\n}>();\n\nconst currentPage = usePropBinding(\"current\", props, emits);\n\n/** Paginator change listener. */\nfunction pageChanged(page: number): void {\n    const newPage = page > 0 ? page : 1;\n    currentPage.value = newPage;\n    emits(\"change\", newPage);\n}\n</script>\n\n<template>\n    <div :class=\"rootClass\">\n        <div>\n            <slot />\n        </div>\n        <div>\n            <o-pagination\n                v-if=\"paginated\"\n                v-bind=\"$attrs\"\n                :current=\"currentPage\"\n                @change=\"pageChanged\" />\n        </div>\n    </div>\n</template>\n","<script setup lang=\"ts\">\nimport {\n    computed,\n    ref,\n    watch,\n    onMounted,\n    nextTick,\n    useSlots,\n    toValue,\n    type PropType,\n} from \"vue\";\n\nimport OCheckbox from \"../checkbox/Checkbox.vue\";\nimport OIcon from \"../icon/Icon.vue\";\nimport OInput from \"../input/Input.vue\";\nimport OLoading from \"../loading/Loading.vue\";\nimport OSlotComponent from \"../utils/SlotComponent\";\n\nimport OTableMobileSort from \"./TableMobileSort.vue\";\nimport OTableColumn from \"./TableColumn.vue\";\nimport OTablePagination from \"./TablePagination.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport {\n    getValueByPath,\n    indexOf,\n    toCssDimension,\n    escapeRegExpChars,\n    removeDiacriticsFromString,\n    uuid,\n} from \"@/utils/helpers\";\nimport {\n    defineClasses,\n    useProviderParent,\n    usePropBinding,\n    useMatchMedia,\n    useDebounce,\n    getActiveClasses,\n} from \"@/composables\";\n\nimport type { Column, TableColumn, TableColumnComponent } from \"./types\";\nimport type { ComponentClass, ClassBind } from \"@/types\";\n\n/**\n * Tabulated data are sometimes needed, it's even better when it's responsive\n * @displayName Table\n * @requires ./TableColumn.vue\n * @style _table.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OTable\",\n    configField: \"table\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Table data */\n    data: { type: Array as PropType<unknown[]>, default: () => [] },\n    /** Table columns */\n    columns: { type: Array as PropType<Column[]>, default: () => [] },\n    /** Border to all cells */\n    bordered: {\n        type: Boolean,\n        default: () => getOption(\"table.bordered\", false),\n    },\n    /** Whether table is striped */\n    striped: {\n        type: Boolean,\n        default: () => getOption(\"table.striped\", false),\n    },\n    /** Makes the cells narrower */\n    narrowed: {\n        type: Boolean,\n        default: () => getOption(\"table.narrowed\", false),\n    },\n    /** Rows are highlighted when hovering */\n    hoverable: {\n        type: Boolean,\n        default: () => getOption(\"table.hoverable\", false),\n    },\n    /** Enable loading state */\n    loading: { type: Boolean, default: false },\n    /** Allow row details  */\n    detailed: { type: Boolean, default: false },\n    /** Rows can be checked (multiple) */\n    checkable: { type: Boolean, default: false },\n    /** Show check/uncheck all checkbox in table header when checkable */\n    headerCheckable: { type: Boolean, default: true },\n    /**\n     * Position of the checkbox when checkable\n     * @values left, right\n     */\n    checkboxPosition: {\n        type: String,\n        default: () => getOption(\"table.checkboxPosition\", \"left\"),\n        validator: (value: string) => [\"left\", \"right\"].indexOf(value) >= 0,\n    },\n    /**\n     * Color of the checkbox when checkable\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    checkboxVariant: {\n        type: String,\n        default: () => getOption(\"table.checkboxVariant\"),\n    },\n    /** Set which row is selected, use v-model:selected to make it two-way binding */\n    selected: { type: Object, default: undefined },\n    /** Custom method to verify if a row is selectable, works when is selected. */\n    isRowSelectable: { type: Function, default: () => true },\n    /** Table can be focused and user can navigate with keyboard arrows (require selected) and rows are highlighted when hovering */\n    focusable: { type: Boolean, default: false },\n    /** Custom method to verify if row is checked, works when is checkable. Useful for backend pagination */\n    customIsChecked: {\n        type: Function as PropType<(row: unknown, data: unknown[]) => boolean>,\n        default: undefined,\n    },\n    /** Custom method to verify if a row is checkable, works when is checkable */\n    isRowCheckable: {\n        type: Function as PropType<(row: unknown) => boolean>,\n        default: (row: unknown) =>\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            getOption(\"table.isRowCheckable\", (row) => true)(row),\n    },\n    /** Set which rows are checked, use v-model:checkedRows to make it two-way binding */\n    checkedRows: { type: Array, default: () => [] },\n    /** Rows appears as cards on mobile (collapse rows) */\n    mobileCards: {\n        type: Boolean,\n        default: () => getOption(\"table.mobileCards\", true),\n    },\n    /** Sets the default sort column and order — e.g. ['first_name', 'desc'] */\n    defaultSort: {\n        type: [String, Array] as PropType<string | string[]>,\n        default: () => getOption(\"table.defaultSort\"),\n    },\n    /**\n     * Sets the default sort column direction on the first click\n     * @values asc, desc\n     */\n    defaultSortDirection: {\n        type: String,\n        default: () => getOption(\"table.defaultSortDirection\", \"asc\"),\n    },\n    /** Sets the header sorting icon */\n    sortIcon: {\n        type: String,\n        default: () => getOption(\"table.sortIcon\", \"arrow-up\"),\n    },\n    /**\n     * Sets the size of the sorting icon\n     * @values small, medium, large\n     */\n    sortIconSize: {\n        type: String,\n        default: () => getOption(\"table.sortIconSize\", \"small\"),\n    },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"table.iconPack\"),\n    },\n    /** Columns won't be sorted with Javascript, use with sort event to sort in your backend */\n    backendSorting: {\n        type: Boolean,\n        default: () => getOption(\"table.backendSorting\", false),\n    },\n    /** Columns won't be filtered with Javascript, use with searchable prop to the columns to filter in your backend */\n    backendFiltering: {\n        type: Boolean,\n        default: () => getOption(\"table.backendFiltering\", false),\n    },\n    /** Add a class to row based on the return */\n    rowClass: {\n        type: Function as PropType<(row: unknown, index: number) => string>,\n        default: (row: unknown, index: number) =>\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            getOption(\"table.rowClass\", (row, index) => \"\")(row, index),\n    },\n    /** Allow pre-defined opened details. Ideal to open details via vue-router. (A unique key is required; check detail-key prop) */\n    openedDetailed: { type: Array, default: () => [] },\n    /** Controls the visibility of the trigger that toggles the detailed rows. */\n    hasDetailedVisible: {\n        type: Function as PropType<(row: unknown) => boolean>,\n        default: (row: unknown) =>\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            getOption(\"table.hasDetailedVisible\", (row) => true)(row),\n    },\n    /** Use a unique key of your data Object when use detailed or opened detailed. (id recommended) */\n    detailKey: {\n        type: String,\n        default: () => getOption(\"table.detailKey\"),\n    },\n    /** Allow chevron icon and column to be visible */\n    showDetailIcon: {\n        type: Boolean,\n        default: () => getOption(\"table.showDetailIcon\", true),\n    },\n    /** Icon name of detail action */\n    detailIcon: {\n        type: String,\n        default: () => getOption(\"table.detailIcon\", \"chevron-right\"),\n    },\n    /** Custom style on details */\n    customDetailRow: { type: Boolean, default: false },\n    /* Transition name to use when toggling row details. */\n    detailTransition: {\n        type: String,\n        default: () => getOption(\"table.detailTransition\", \"slide\"),\n    },\n    /** Text when nothing is selected */\n    mobileSortPlaceholder: {\n        type: String,\n        default: () => getOption(\"table.mobileSortPlaceholder\"),\n    },\n    /** Use a unique key of your data Object for each row. Useful if your data prop has dynamic indices. (id recommended) */\n    customRowKey: {\n        type: String,\n        default: () => getOption(\"table.customRowKey\"),\n    },\n    /** Allows rows to be draggable */\n    draggable: { type: Boolean, default: false },\n    /** Allows columns to be draggable */\n    draggableColumn: { type: Boolean, default: false },\n    /** Add a horizontal scrollbar when table is too wide */\n    scrollable: { type: Boolean, default: undefined },\n    /** Show a sticky table header */\n    stickyHeader: { type: Boolean, default: false },\n    /** Table fixed height */\n    height: { type: [Number, String], default: undefined },\n    /** Add a native event to filter */\n    filtersEvent: { type: String, default: \"\" },\n    /** Filtering debounce time (in milliseconds) */\n    debounceSearch: {\n        type: Number,\n        default: () => getOption(\"table.debounceSearch\", undefined),\n    },\n    /** Show header */\n    showHeader: {\n        type: Boolean,\n        default: () => getOption(\"table.showHeader\", true),\n    },\n    /** Make the checkbox column sticky when checkable */\n    stickyCheckbox: { type: Boolean, default: false },\n    /** Adds pagination to the table */\n    paginated: {\n        type: Boolean,\n        default: () => getOption(\"table.paginated\", false),\n    },\n    /** Rows won't be paginated with Javascript, use with page-change event to paginate in your backend */\n    backendPagination: { type: Boolean, default: false },\n    /** Total number of table data if backend-pagination is enabled */\n    total: { type: Number, default: 0 },\n    /** Current page of table data (if paginated), use v-model:currentPage to make it two-way binding */\n    currentPage: { type: Number, default: 1 },\n    /** How many rows per page (if paginated) */\n    perPage: {\n        type: [Number, String],\n        default: () => getOption(\"table.perPage\", 20),\n    },\n    /**\n     * Pagination position (if paginated)\n     * @values bottom, top, both\n     */\n    paginationPosition: {\n        type: String,\n        default: () => getOption(\"table.paginationPosition\", \"bottom\"),\n        validator: (value: string) =>\n            [\"bottom\", \"top\", \"both\"].indexOf(value) >= 0,\n    },\n    /** Rounded pagination if paginated */\n    paginationRounded: {\n        type: Boolean,\n        default: () => getOption(\"table.paginationRounded\", false),\n    },\n    /** Size of pagination if paginated */\n    paginationSize: {\n        type: String,\n        default: () => getOption(\"table.paginationSize\", \"small\"),\n    },\n    /** Enable simple style pagination if paginated */\n    paginationSimple: {\n        type: Boolean,\n        default: () => getOption(\"table.paginationSimple\", false),\n    },\n    /**\n     * Pagination buttons order if paginated\n     * @values centered, right, left\n     */\n    paginationOrder: {\n        type: String,\n        default: () => getOption(\"table.paginationOrder\"),\n        validator: (value: string) =>\n            [\"centered\", \"right\", \"left\"].indexOf(value) >= 0,\n    },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"table.mobileBreakpoint\"),\n    },\n    /** Accessibility label for the pagination next page button. */\n    ariaNextLabel: {\n        type: String,\n        default: () => getOption(\"table.ariaNextLabel\"),\n    },\n    /** Accessibility label for the pagination previous page button. */\n    ariaPreviousLabel: {\n        type: String,\n        default: () => getOption(\"table.ariaPreviousLabel\"),\n    },\n    /** Accessibility label for the pagination page button. */\n    ariaPageLabel: {\n        type: String,\n        default: () => getOption(\"table.ariaPageLabel\"),\n    },\n    /** Accessibility label for the pagination current page button. */\n    ariaCurrentLabel: {\n        type: String,\n        default: () => getOption(\"table.ariaCurrentLabel\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table */\n    tableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table wrapper */\n    wrapperClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table footer */\n    footerClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table when it is empty */\n    emptyClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table row detail */\n    detailedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table when is bordered */\n    borderedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table when rows are striped */\n    stripedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table when rows are narrowed */\n    narrowedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table when is hoverable */\n    hoverableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table wrapper when header is sticky */\n    stickyHeaderClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table wrapper when its content is scrollable */\n    scrollableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table row when selected */\n    trSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table row when checkable and checked */\n    trCheckedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `th` element */\n    thClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `th` element when component is positioned */\n    thPositionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `th` element when component is sticky\" */\n    thStickyClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `th` element when is checkable */\n    thCheckboxClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `th` element currently sorted */\n    thCurrentSortClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sortable Table `th` element */\n    thSortableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `th` element that is unsortable */\n    thUnselectableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table sort icon in the header */\n    thSortIconClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `th` element of the detail column of triggers */\n    thDetailedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `th` subheading element */\n    thSubheadingClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `td` element */\n    tdClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `td` element when component is positioned */\n    tdPositionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `td` element when component is sticky */\n    tdStickyClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `td` element when is checkable */\n    tdCheckboxClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table `td` element that contains the chevron to trigger details */\n    tdDetailedChevronClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sortable form wrapper on mobile */\n    mobileSortClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table pagination wrapper */\n    paginationWrapperClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Table component when on mobile */\n    mobileClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * currentPage prop two-way binding\n     * @param value {number} updated currentPage prop\n     */\n    (e: \"update:currentPage\", value: number): void;\n    /**\n     * on pagination page change event\n     * @param page {number} updated page\n     */\n    (e: \"page-change\", page: number): void;\n    /**\n     * select prop two-way binding\n     * @param value {typeof data} updated select prop\n     */\n    (e: \"update:selected\", value: unknown): void;\n    /**\n     * on row select event\n     * @param newRow {typeof data} new select value\n     * @param oldRow {typeof data} old select value\n     */\n    (e: \"select\", newrow: unknown, oldrow: unknown): void;\n    /**\n     * on row checked event\n     * @param value {Array<typeof data>} all checked rows\n     * @param row {typeof data} row data\n     */\n    (e: \"check\", value: Array<unknown>, row?: unknown): void;\n    /**\n     * on all rows checked event\n     * @param value {Array<typeof data>} all checked rows\n     */\n    (e: \"check-all\", value: Array<unknown>): void;\n    /**\n     * checkedRows prop two-way binding\n     * @param value {Array<typeof data>} updated checkedRows prop\n     */\n    (e: \"update:checkedRows\", value: Array<unknown>): void;\n    /**\n     * on column sort change event\n     * @param column {Column} column data\n     * @param direction {string}  'asc' or 'desc'\n     *\n     * @param event {Event} native  event\n     */\n    (e: \"sort\", column: Column, direction: \"asc\" | \"desc\", event: Event): void;\n    /**\n     * on filter change event\n     * @param filters {Record<string, string>} filter object\n     */\n    (e: \"filters-change\", value: Record<string, string>): void;\n    /**\n     * on natvie filter event based on props filtersEvent\n     * @param filtersEvent {string} props filtersEvent value\n     * @param filters {Record<string, string>} filter object\n     * @param event {Event} native  event\n     */\n    (\n        e: \"filters-event\",\n        filtersEvent: string,\n        filters: Record<string, string>,\n        event: Event,\n    ): void;\n    /**\n     * openedDetailed prop two-way binding\n     * @param value {Array<typeof data>} updated openedDetailed prop\n     */\n    (e: \"update:openedDetailed\", value: Array<unknown>): void;\n    /**\n     * on details open event\n     * @param row {typeof data} row data\n     */\n    (e: \"details-open\", row: unknown): void;\n    /**\n     * on details close event\n     * @param row {typeof data} row data\n     */\n    (e: \"details-close\", row: unknown): void;\n    /**\n     * on row click event\n     * @param row {typeof data} row data\n     * @param index {number} index of clicked row\n     * @param event {Event} native click event\n     */\n    (e: \"click\", row: unknown, index: number, event: Event): void;\n    /**\n     * on row double click event\n     * @param row {typeof data} row data\n     * @param index {number} index of clicked row\n     * @param event {Event} native click event\n     */\n    (e: \"dblclick\", row: unknown, index: number, event: Event): void;\n    /**\n     * on row right click event\n     * @param row {typeof data} row data\n     * @param index {number} index of clicked row\n     * @param event {Event} native contextmenu event\n     */\n    (e: \"contextmenu\", row: unknown, index: number, event: Event): void;\n    /**\n     * on row mouseenter event\n     * @param row {typeof data} row data\n     * @param index {number} index of clicked row\n     * @param event {Event} native mouseenter event\n     */\n    (e: \"mouseenter\", row: unknown, index: number, event: Event): void;\n    /**\n     * on row mouseleave event\n     * @param row {typeof data} row data\n     * @param index {number} index of clicked row\n     * @param event {Event} native mouseleave event\n     */\n    (e: \"mouseleave\", row: unknown, index: number, event: Event): void;\n    /**\n     * on cell click event\n     * @param row {typeof data} row data\n     * @param column {Column} column data\n     * @param index {number} row index\n     * @param colindex {number} column index\n     * @param event {Event} native click event\n     */\n    (\n        e: \"cell-click\",\n        row: unknown,\n        column: Column,\n        index: number,\n        colindex: number,\n        event: Event,\n    ): void;\n    /**\n     * on row dragstart event\n     * @param row {typeof data} row data\n     * @param index {number} index of draged row\n     * @param event {DragEvent} native dragstart event\n     */\n    (e: \"dragstart\", row: unknown, index: number, event: DragEvent): void;\n    /**\n     * on row dragend event\n     * @param row {typeof data} row data\n     * @param index {number} index of draged row\n     * @param event {DragEvent} native dragend event\n     */\n    (e: \"dragend\", row: unknown, index: number, event: DragEvent): void;\n    /**\n     * on row drop event\n     * @param row {typeof data} row data\n     * @param index {number} index of draged row\n     * @param event {DragEvent} native drop event\n     */\n    (e: \"drop\", row: unknown, index: number, event: DragEvent): void;\n\n    /**\n     * on row dragleave event\n     * @param row {typeof data} row data\n     * @param index {number} index of draged row\n     * @param event {DragEvent} native dragleave event\n     */\n    (e: \"dragleave\", row: unknown, index: number, event: DragEvent): void;\n    /**\n     * on row dragover event\n     * @param row {typeof data} row data\n     * @param index {number} index of draged row\n     * @param event {DragEvent} native dragover event\n     */\n    (e: \"dragover\", row: unknown, index: number, event: DragEvent): void;\n    /**\n     * on column columndragstart event\n     * @param column {Column} column data\n     * @param index {number} index of draged column\n     * @param event {DragEvent} native columndragstart event\n     */\n    (\n        e: \"columndragstart\",\n        column: Column,\n        index: number,\n        event: DragEvent,\n    ): void;\n    /**\n     * on column columndragend event\n     * @param column {Column} column data\n     * @param index {number} index of draged column\n     * @param event {DragEvent} native columndragend event\n     */\n    (e: \"columndragend\", column: Column, index: number, event: DragEvent): void;\n    /**\n     * on column columndrop event\n     * @param column {Column} column data\n     * @param index {number} index of draged column\n     * @param event {DragEvent} native columndrop event\n     */\n    (e: \"columndrop\", column: Column, index: number, event: DragEvent): void;\n    /**\n     * on column columndragleave event\n     * @param column {Column} column data\n     * @param index {number} index of draged column\n     * @param event {DragEvent} native columndragleave event\n     */\n    (\n        e: \"columndragleave\",\n        column: Column,\n        index: number,\n        event: DragEvent,\n    ): void;\n    /**\n     * on column columndragover event\n     * @param column {Column} column data\n     * @param index {number} index of draged column\n     * @param event {DragEvent} native columndragover event\n     */\n    (\n        e: \"columndragover\",\n        column: Column,\n        index: number,\n        event: DragEvent,\n    ): void;\n}>();\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\nconst isMobileActive = computed(() => props.mobileCards && isMobile.value);\n\nconst rootRef = ref<HTMLElement>();\nconst slotRef = ref<HTMLElement>();\n\n/** Provide functionalities and data to child item components */\nconst provider = useProviderParent<TableColumnComponent>(slotRef);\n\nconst tableColumns = computed<TableColumn[]>(() =>\n    provider.sortedItems.value.map((column) => ({\n        index: column.index,\n        identifier: column.identifier,\n        ...toValue(column.data),\n        thAttrsData: {},\n        tdAttrsData: [],\n    })),\n);\n\nconst tableData = computed(() => {\n    if (!props.data?.length) return [...props.data];\n    // if no customRowKey is given and data are objects, create unique row id for each row\n    return props.data.map((row) =>\n        !props.customRowKey && typeof row === \"object\"\n            ? Object.assign({ __rowKey: uuid() }, row)\n            : row,\n    );\n});\n\nconst tableRows = ref(tableData.value);\nconst dataTotal = ref(\n    props.backendPagination ? props.total : tableData.value.length,\n);\n\nconst tableCurrentPage = usePropBinding<number>(\"currentPage\", props, emits, {\n    passive: true,\n});\n\n/**\n * When table rows data change:\n *   1. Update internal value.\n *   2. Filter data if it's not backend-filtered.\n *   3. Sort again if it's not backend-sorted.\n *   4. Set new total if it's not backend-paginated.\n */\nwatch(\n    () => tableData.value,\n    (value) => {\n        // if not backend filtered, filter rows\n        if (!props.backendFiltering)\n            tableRows.value = value.filter((row) => isRowFiltered(row));\n        else tableRows.value = [...value];\n        // if not backend sorted, sort rows\n        if (!props.backendSorting) sort(currentSortColumn.value, true);\n        // if not backend paginated, set pagination total\n        if (!props.backendPagination) dataTotal.value = tableRows.value.length;\n    },\n    { deep: true },\n);\n\n/**\n * When Pagination total change, update internal total\n * only if it's backend-paginated.\n */\nwatch(\n    () => props.total,\n    (newTotal) => {\n        if (!props.backendPagination) return;\n        dataTotal.value = newTotal;\n    },\n);\n\nconst tableWrapperStyle = computed(() => ({\n    height: toCssDimension(props.height),\n}));\n\n/** Splitted data based on the pagination. */\nconst visibleRows = computed(() => {\n    if (!props.paginated) return tableRows.value;\n\n    const currentPage = tableCurrentPage.value;\n    const perPage = Number(props.perPage);\n\n    if (tableRows.value.length <= perPage) {\n        return tableRows.value;\n    } else {\n        const start = (currentPage - 1) * perPage;\n        const end = start + perPage;\n        return tableRows.value.slice(start, end);\n    }\n});\n\nconst visibleColumns = computed(() => {\n    if (!tableColumns.value) return [];\n    return tableColumns.value.filter(\n        (column) => column.visible || column.visible === undefined,\n    );\n});\n\n/** process thAttrs & tdAttrs when row or columns got changed */\nwatch([visibleRows, visibleColumns], () => {\n    if (visibleColumns.value.length && visibleRows.value.length) {\n        for (let i = 0; i < visibleColumns.value.length; i++) {\n            const col = visibleColumns.value[i];\n            col.thAttrsData =\n                typeof col.thAttrs === \"function\" ? col.thAttrs(col) : {};\n            col.tdAttrsData = visibleRows.value.map((data) =>\n                typeof col.tdAttrs === \"function\" ? col.tdAttrs(data, col) : {},\n            );\n        }\n    }\n});\n\n/** Return total column count based if it's checkable or expanded */\nconst columnCount = computed(() => {\n    let count = visibleColumns.value.length;\n    count += props.checkable ? 1 : 0;\n    count += props.detailed && props.showDetailIcon ? 1 : 0;\n    return count;\n});\n\n/** Check if has any searchable column. */\nconst hasSearchablenewColumns = computed(() =>\n    tableColumns.value.some((column) => column.searchable),\n);\n\n/** return if scrollable table */\nconst isScrollable = computed(() => {\n    if (props.scrollable) return true;\n    if (!tableColumns.value) return false;\n    return tableColumns.value.some((column) => column.sticky);\n});\n\nconst slots = useSlots();\n\nconst hasCustomSubheadings = computed(() => {\n    if (slots.subheading) return true;\n    return tableColumns.value.some((column) => !!column.subheading);\n});\n\n/** Check if footer slot has custom content. */\nfunction hasCustomFooterSlot(): boolean {\n    if (slots.footer) {\n        // [Vue warn]: Slot \"footer\" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.\n        const footer = slots.footer();\n        if (footer.length > 1) return true;\n\n        const tag = footer[0][\"tag\"];\n        if (tag !== \"th\" && tag !== \"td\") return false;\n    }\n    return true;\n}\n\n/** Table arrow keys listener, change selection. */\nfunction onArrowPressed(pos: number, event: KeyboardEvent): void {\n    if (!visibleRows.value.length) return;\n\n    let index = visibleRows.value.indexOf(props.selected) + pos;\n\n    // Prevent from going up from first and down from last\n    index =\n        index < 0\n            ? 0\n            : index > visibleRows.value.length - 1\n              ? visibleRows.value.length - 1\n              : index;\n\n    const row = visibleRows.value[index];\n\n    if (!props.isRowSelectable(row)) {\n        let newIndex = null;\n        if (pos > 0) {\n            for (\n                let i = index;\n                i < visibleRows.value.length && newIndex === null;\n                i++\n            ) {\n                if (props.isRowSelectable(visibleRows.value[i])) newIndex = i;\n            }\n        } else {\n            for (let i = index; i >= 0 && newIndex === null; i--) {\n                if (props.isRowSelectable(visibleRows.value[i])) newIndex = i;\n            }\n        }\n        if (newIndex >= 0) {\n            selectRow(visibleRows.value[newIndex], index, event);\n        }\n    } else {\n        selectRow(row, index, event);\n    }\n}\n\n/**\n * Row click listener.\n * Emit all necessary events.\n */\nfunction selectRow(row: unknown, index: number, event: Event): void {\n    emits(\"click\", row, index, event);\n\n    if (props.selected === row) return;\n    if (!props.isRowSelectable(row)) return;\n\n    // emit new and old row\n    emits(\"select\", row, props.selected);\n\n    // emit new row to update user variable\n    emits(\"update:selected\", row);\n}\n\nfunction isRowSelected(row: unknown, selectedRow: unknown): boolean {\n    return selectedRow ? getRowKey(row) === getRowKey(selectedRow) : false;\n}\n\nfunction getRowKey(row: unknown): unknown {\n    if (props.customRowKey) return row[props.customRowKey];\n    if (typeof row === \"object\") return row[\"__rowKey\"];\n    return row;\n}\n\n// --- Filter Feature ---\n\nconst filters = ref<Record<string, string>>({});\n\nwatch(\n    filters.value,\n    (value) => {\n        if (props.debounceSearch)\n            useDebounce(\n                () => handleFiltersChange(value),\n                props.debounceSearch,\n            )();\n        else handleFiltersChange(value);\n    },\n    { deep: true },\n);\n\nfunction onFiltersEvent(event: Event): void {\n    emits(\"filters-event\", props.filtersEvent, filters.value, event);\n}\n\nfunction handleFiltersChange(value: Record<string, string>): void {\n    if (props.backendFiltering) {\n        emits(\"filters-change\", value);\n    } else {\n        tableRows.value = props.data.filter((row) => isRowFiltered(row));\n        if (!props.backendPagination) {\n            dataTotal.value = tableRows.value.length;\n        }\n        if (!props.backendSorting) {\n            if (\n                currentSortColumn.value &&\n                Object.keys(currentSortColumn.value).length > 0\n            ) {\n                doSortSingleColumn(currentSortColumn.value);\n            }\n        }\n    }\n}\n\nfunction isRowFiltered(row: unknown): boolean {\n    for (const key in filters.value) {\n        if (!filters.value[key]) continue;\n        const input = filters.value[key];\n        const column = tableColumns.value.filter((c) => c.field === key)[0];\n        if (typeof column?.customSearch === \"function\") {\n            if (!column.customSearch(row, input)) return false;\n        } else {\n            const value = getValueByPath(row, key);\n            if (value == null) return false;\n            if (Number.isInteger(value)) {\n                if (value !== Number(input)) return false;\n            } else {\n                const re = new RegExp(escapeRegExpChars(input), \"i\");\n                if (Array.isArray(value)) {\n                    const valid = value.some(\n                        (val) =>\n                            re.test(removeDiacriticsFromString(val)) ||\n                            re.test(val),\n                    );\n                    if (!valid) return false;\n                } else {\n                    if (\n                        !re.test(removeDiacriticsFromString(value)) &&\n                        !re.test(value)\n                    ) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}\n\n// --- Sort Feature ---\n\nconst currentSortColumn = ref<TableColumn>();\nconst isAsc = ref(true);\n\nonMounted(() => nextTick(() => checkSort()));\n\n/** Check if has any sortable column. */\nconst hasSortablenewColumns = computed(() =>\n    tableColumns.value.some((column) => column.sortable),\n);\n\n/** Check if the column is the current sort column. */\nfunction isColumnSorted(column: TableColumn): boolean {\n    return currentSortColumn.value?.identifier === column.identifier;\n}\n\n/** Call initSort only first time (For example async data). */\nfunction checkSort(): void {\n    if (tableColumns.value.length && !currentSortColumn.value) {\n        // is first time sort\n        initSort();\n    } else if (tableColumns.value.length) {\n        if (\n            currentSortColumn.value &&\n            Object.keys(currentSortColumn.value).length > 0\n        ) {\n            for (let i = 0; i < tableColumns.value.length; i++) {\n                if (\n                    currentSortColumn.value.field ===\n                    tableColumns.value[i].field\n                ) {\n                    currentSortColumn.value = tableColumns.value[i];\n                    break;\n                }\n            }\n        }\n    }\n}\n\n/** Initial sorted column based on the default-sort prop. */\nfunction initSort(): void {\n    if (!props.defaultSort) return;\n    let sortField = \"\";\n    let sortDirection = props.defaultSortDirection;\n    if (Array.isArray(props.defaultSort)) {\n        sortField = props.defaultSort[0];\n        if (props.defaultSort[1]) {\n            sortDirection = props.defaultSort[1];\n        }\n    } else {\n        sortField = props.defaultSort;\n    }\n    const sortColumn = tableColumns.value.filter(\n        (column) => column.field === sortField,\n    )[0];\n    if (sortColumn) {\n        isAsc.value = sortDirection.toLowerCase() !== \"desc\";\n        sort(sortColumn, true);\n    }\n}\n\n/**\n * Sort the column.\n * Toggle current direction on column if it's sortable\n * and not just updating the prop.\n */\nfunction sort(\n    column: TableColumn,\n    updateDirection = false,\n    event?: Event,\n): void {\n    if (!column || !column.sortable) return;\n\n    if (!updateDirection)\n        isAsc.value = isColumnSorted(column)\n            ? !isAsc.value\n            : props.defaultSortDirection.toLowerCase() !== \"desc\";\n\n    // if not first time sort\n    if (currentSortColumn.value)\n        emits(\"sort\", column, isAsc.value ? \"asc\" : \"desc\", event);\n\n    if (!props.backendSorting) doSortSingleColumn(column);\n\n    currentSortColumn.value = column;\n}\n\nfunction doSortSingleColumn(column: Column): void {\n    tableRows.value = sortBy(\n        tableRows.value,\n        column.field,\n        column.customSort,\n        isAsc.value,\n    );\n}\n\n/**\n * Sort an array by key without mutating original data.\n * Call the user sort function if it was passed.\n */\nfunction sortBy(\n    array: unknown[],\n    key: string,\n    fn: (a: unknown, b: unknown, asc: boolean) => number,\n    isAsc: boolean,\n): unknown[] {\n    let sorted = [];\n    // Sorting without mutating original data\n    if (fn && typeof fn === \"function\") {\n        sorted = [...array].sort((a, b) => fn(a, b, isAsc));\n    } else {\n        sorted = [...array].sort((a, b) => {\n            // Get nested values from objects\n            let newA = getValueByPath(a, key);\n            let newB = getValueByPath(b, key);\n\n            // sort boolean type\n            if (typeof newA === \"boolean\" && typeof newB === \"boolean\") {\n                return isAsc ? (newA > newB ? 1 : -1) : newA > newB ? -1 : 1;\n            }\n\n            if (!newA && newA !== 0) return 1;\n            if (!newB && newB !== 0) return -1;\n            if (newA === newB) return 0;\n\n            newA = typeof newA === \"string\" ? newA.toUpperCase() : newA;\n            newB = typeof newB === \"string\" ? newB.toUpperCase() : newB;\n\n            return isAsc ? (newA > newB ? 1 : -1) : newA > newB ? -1 : 1;\n        });\n    }\n\n    return sorted;\n}\n\n// --- Checkable Feature ---\n\nconst newCheckedRows = ref([...props.checkedRows]);\nconst lastCheckedRowIndex = ref(null);\n\n/**\n * When checkedRows prop change, update internal value without\n * mutating original data.\n */\nwatch(\n    () => props.checkedRows,\n    (rows) => {\n        newCheckedRows.value = [...rows];\n    },\n    { deep: true },\n);\n\n/** Check if all rows in the page are checked. */\nconst isAllChecked = computed(() => {\n    const validVisibleData = visibleRows.value.filter((row) =>\n        props.isRowCheckable(row),\n    );\n    if (validVisibleData.length === 0) return false;\n    const isAllChecked = validVisibleData.some(\n        (currentVisibleRow) =>\n            indexOf(\n                newCheckedRows.value,\n                currentVisibleRow,\n                props.customIsChecked,\n            ) < 0,\n    );\n    return !isAllChecked;\n});\n\n/** Check if all rows in the page are checkable. */\nconst isAllUncheckable = computed(() => {\n    const validVisibleData = visibleRows.value.filter((row) =>\n        props.isRowCheckable(row),\n    );\n    return validVisibleData.length === 0;\n});\n\n/** Check if the row is checked (is added to the array). */\nfunction isRowChecked(row: unknown): boolean {\n    return indexOf(newCheckedRows.value, row, props.customIsChecked) >= 0;\n}\n\n/** Remove a checked row from the array. */\nfunction removeCheckedRow(row: unknown): void {\n    const index = indexOf(newCheckedRows.value, row, props.customIsChecked);\n    if (index >= 0) newCheckedRows.value.splice(index, 1);\n}\n\n/**\n * Header checkbox click listener.\n * Add or remove all rows in current page.\n */\nfunction checkAll(): void {\n    const allChecked = isAllChecked.value;\n    visibleRows.value.forEach((currentRow) => {\n        if (props.isRowCheckable(currentRow)) removeCheckedRow(currentRow);\n\n        if (!allChecked) {\n            if (props.isRowCheckable(currentRow))\n                newCheckedRows.value.push(currentRow);\n        }\n    });\n\n    emits(\"check\", newCheckedRows.value);\n    emits(\"check-all\", newCheckedRows.value);\n\n    // Emit checked rows to update user variable\n    emits(\"update:checkedRows\", newCheckedRows.value);\n}\n\n/** Row checkbox click listener. */\nfunction checkRow(row: unknown, index: number): void {\n    if (!props.isRowCheckable(row)) return;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const lastIndex = lastCheckedRowIndex.value;\n    lastCheckedRowIndex.value = index;\n\n    // if (event.shiftKey && lastIndex !== null && index !== lastIndex) {\n    //         shiftCheckRow(row, index, lastIndex);\n\n    if (!isRowChecked(row)) newCheckedRows.value.push(row);\n    else removeCheckedRow(row);\n\n    emits(\"check\", newCheckedRows.value, row);\n\n    // Emit checked rows to update user variable\n    emits(\"update:checkedRows\", newCheckedRows.value);\n}\n\n/** Check row when shift is pressed. */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction shiftCheckRow(\n    row: unknown,\n    index: number,\n    lastCheckedRowIndex: number,\n): void {\n    // Get the subset of the list between the two indicies\n    const subset = visibleRows.value.slice(\n        Math.min(index, lastCheckedRowIndex),\n        Math.max(index, lastCheckedRowIndex) + 1,\n    );\n\n    // Determine the operation based on the state of the clicked checkbox\n    const shouldCheck = !isRowChecked(row);\n\n    subset.forEach((item) => {\n        removeCheckedRow(item);\n        if (shouldCheck && props.isRowCheckable(item))\n            newCheckedRows.value.push(item);\n    });\n}\n\n// --- Detail Row Feature ---\n\nconst visibleDetailRows = ref(props.openedDetailed);\n\n/**\n * return if detailed row tabled\n * will be with chevron column & icon or not\n */\nconst showDetailRowIcon = computed(\n    () => props.detailed && props.showDetailIcon,\n);\n\n/**\n * When the user wants to control the detailed rows via props.\n * Or wants to open the details of certain row with the router for example.\n */\nwatch(\n    () => props.openedDetailed,\n    (expandedRows) => {\n        visibleDetailRows.value = expandedRows;\n    },\n);\n\n/** Toggle to show/hide details slot */\nfunction toggleDetails(row: unknown): void {\n    const found = isVisibleDetailRow(row);\n\n    if (found) {\n        closeDetailRow(row);\n        emits(\"details-close\", row);\n    } else {\n        openDetailRow(row);\n        emits(\"details-open\", row);\n    }\n\n    // Syncs the detailed rows with the parent component\n    emits(\"update:openedDetailed\", visibleDetailRows.value);\n}\n\nfunction openDetailRow(row: unknown): void {\n    const index = handleDetailKey(row);\n    visibleDetailRows.value.push(index);\n}\n\nfunction closeDetailRow(row: unknown): void {\n    const index = handleDetailKey(row);\n    const i = visibleDetailRows.value.indexOf(index);\n    if (i >= 0) visibleDetailRows.value.splice(i, 1);\n}\n\nfunction isVisibleDetailRow(row: unknown): boolean {\n    const index = handleDetailKey(row);\n    return visibleDetailRows.value.indexOf(index) >= 0;\n}\n\nfunction isActiveDetailRow(row: unknown): boolean {\n    return props.detailed && !props.customDetailRow && isVisibleDetailRow(row);\n}\n\nfunction isActiveCustomDetailRow(row: unknown): boolean {\n    return props.detailed && props.customDetailRow && isVisibleDetailRow(row);\n}\n\n/**\n * When the detailKey is defined we use the object[detailKey] as index.\n * If not, use the object reference by default.\n */\nfunction handleDetailKey(row: unknown): string {\n    const key = props.detailKey;\n    return !key?.length || !row ? row : row[key];\n}\n\n// --- Drag&Drop Feature ---\n\nconst isDraggingRow = ref(false);\nconst isDraggingColumn = ref(false);\n\nconst canDragRow = computed(() => props.draggable && !isDraggingColumn.value);\n\nconst canDragColumn = computed(\n    () => props.draggableColumn && !isDraggingRow.value,\n);\n\n/** Emits drag start event*/\nfunction handleDragStart(row: unknown, index: number, event: DragEvent): void {\n    if (!props.draggable) return;\n    emits(\"dragstart\", row, index, event);\n}\n\n/** Emits drag leave event */\nfunction handleDragEnd(row: unknown, index: number, event: DragEvent): void {\n    if (!props.draggable) return;\n    emits(\"dragend\", row, index, event);\n}\n\n/** Emits drop event */\nfunction handleDrop(row: unknown, index: number, event: DragEvent): void {\n    if (!props.draggable) return;\n    emits(\"drop\", row, index, event);\n}\n\n/** Emits drag over event */\nfunction handleDragOver(row: unknown, index: number, event: DragEvent): void {\n    if (!props.draggable) return;\n    emits(\"dragover\", row, index, event);\n}\n\n/** Emits drag leave event */\nfunction handleDragLeave(row: unknown, index: number, event: DragEvent): void {\n    if (!props.draggable) return;\n    emits(\"dragleave\", row, index, event);\n}\n\n/** Emits drag start event (column) */\nfunction handleColumnDragStart(\n    column: Column,\n    index: number,\n    event: DragEvent,\n): void {\n    if (!canDragColumn.value) return;\n    isDraggingColumn.value = true;\n    emits(\"columndragstart\", column, index, event);\n}\n\n/** Emits drag leave event (column) */\nfunction handleColumnDragEnd(\n    column: Column,\n    index: number,\n    event: DragEvent,\n): void {\n    if (!canDragColumn.value) return;\n    isDraggingColumn.value = false;\n    emits(\"columndragend\", column, index, event);\n}\n\n/** Emits drop event (column) */\nfunction handleColumnDrop(\n    column: Column,\n    index: number,\n    event: DragEvent,\n): void {\n    if (!canDragColumn.value) return;\n    emits(\"columndrop\", column, index, event);\n}\n\n/** Emits drag over event (column) */\nfunction handleColumnDragOver(\n    column: Column,\n    index: number,\n    event: DragEvent,\n): void {\n    if (!canDragColumn.value) return;\n    emits(\"columndragover\", column, index, event);\n}\n\n/** Emits drag leave event (column) */\nfunction handleColumnDragLeave(\n    column: Column,\n    index: number,\n    event: DragEvent,\n): void {\n    if (!canDragColumn.value) return;\n    emits(\"columndragleave\", column, index, event);\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-table__root\"],\n    [\"mobileClass\", \"o-table__wrapper--mobile\", null, isMobileActive],\n);\n\nconst tableClasses = defineClasses(\n    [\"tableClass\", \"o-table\"],\n    [\n        \"borderedClass\",\n        \"o-table--bordered\",\n        null,\n        computed(() => props.bordered),\n    ],\n    [\"stripedClass\", \"o-table--striped\", null, computed(() => props.striped)],\n    [\n        \"narrowedClass\",\n        \"o-table--narrowed\",\n        null,\n        computed(() => props.narrowed),\n    ],\n    [\n        \"hoverableClass\",\n        \"o-table--hoverable\",\n        null,\n        computed(\n            () =>\n                (props.hoverable || props.focusable) &&\n                !!visibleRows.value.length,\n        ),\n    ],\n    [\n        \"emptyClass\",\n        \"o-table--table__empty\",\n        null,\n        computed(() => !visibleRows.value.length),\n    ],\n);\n\nconst tableWrapperClasses = defineClasses(\n    [\"wrapperClass\", \"o-table__wrapper\"],\n    [\n        \"stickyHeaderClass\",\n        \"o-table__wrapper--sticky-header\",\n        null,\n        computed(() => props.stickyHeader),\n    ],\n    [\"scrollableClass\", \"o-table__wrapper--scrollable\", null, isScrollable],\n    [\"mobileClass\", \"o-table__wrapper--mobile\", null, isMobileActive],\n);\n\nconst footerClasses = defineClasses([\"footerClass\", \"o-table__footer\"]);\n\nconst thBaseClasses = defineClasses([\"thClass\", \"o-table__th\"]);\n\nconst tdBaseClasses = defineClasses([\"tdClass\", \"o-table__td\"]);\n\nconst thCheckboxClasses = defineClasses([\n    \"thCheckboxClass\",\n    \"o-table__th-checkbox\",\n]);\n\nconst thDetailedClasses = defineClasses([\n    \"thDetailedClass\",\n    \"o-table__th--detailed\",\n]);\n\nconst thSubheadingClasses = defineClasses([\"thSubheadingClass\", \"o-table__th\"]);\n\nconst tdCheckboxClasses = defineClasses(\n    [\"tdCheckboxClass\", \"o-table__td-checkbox\"],\n    [\n        \"thStickyClass\",\n        \"o-table__th--sticky\",\n        null,\n        computed(() => props.stickyCheckbox),\n    ],\n);\n\nconst detailedClasses = defineClasses([\"detailedClass\", \"o-table__detail\"]);\n\nconst tdDetailedChevronClasses = defineClasses([\n    \"tdDetailedChevronClass\",\n    \"o-table__td-chevron\",\n]);\n\nconst mobileSortClasses = defineClasses([\n    \"mobileSortClass\",\n    \"o-table__mobile-sort\",\n]);\n\nconst paginationWrapperClasses = defineClasses([\n    \"paginationWrapperClass\",\n    \"o-table__pagination\",\n]);\n\nconst paginationWrapperRootClasses = computed(() =>\n    getActiveClasses(paginationWrapperClasses.value),\n);\n\nconst thSortIconClasses = defineClasses([\n    \"thSortIconClass\",\n    \"o-table__th__sort-icon\",\n]);\n\nfunction thClasses(column: TableColumn): ClassBind[] {\n    const classes = defineClasses(\n        [\n            \"thCurrentSortClass\",\n            \"o-table__th-current-sort\",\n            null,\n            isColumnSorted(column),\n        ],\n        [\"thSortableClass\", \"o-table__th--sortable\", null, column.sortable],\n        [\n            \"thUnselectableClass\",\n            \"o-table__th--unselectable\",\n            null,\n            column.isHeaderUnselectable,\n        ],\n        [\n            \"thPositionClass\",\n            \"o-table__th--\",\n            column.position,\n            !!column.position,\n        ],\n        [\"thStickyClass\", \"o-table__th--sticky\", null, column.sticky],\n    );\n\n    return [...thBaseClasses.value, ...classes.value];\n}\n\nfunction rowClasses(row: unknown, index: number): ClassBind[] {\n    const classes = defineClasses(\n        [\n            \"trSelectedClass\",\n            \"o-table__tr--selected\",\n            null,\n            isRowSelected(row, props.selected),\n        ],\n        [\"trCheckedClass\", \"o-table__tr--checked\", null, isRowChecked(row)],\n    );\n\n    const rowClass = props.rowClass(row, index);\n\n    return [...classes.value, { [rowClass]: true }];\n}\n\nfunction tdClasses(row: unknown, column: TableColumnComponent): ClassBind[] {\n    const classes = defineClasses(\n        [\n            \"tdPositionClass\",\n            \"o-table__td--\",\n            column.position,\n            !!column.position,\n        ],\n\n        [\"tdStickyClass\", \"o-table__td--sticky\", null, column.sticky],\n    );\n\n    return [...tdBaseClasses.value, ...classes.value];\n}\n</script>\n\n<template>\n    <div ref=\"rootRef\" :class=\"rootClasses\" data-oruga=\"table\">\n        <div ref=\"slotRef\" style=\"display: none\">\n            <!--\n                @slot Place o-table-column here\n            -->\n            <slot>\n                <template v-if=\"columns?.length\">\n                    <o-table-column\n                        v-for=\"(column, idx) in columns\"\n                        :key=\"idx\"\n                        v-slot=\"{ row }\"\n                        v-bind=\"column\">\n                        {{ column.field ? row[column.field] : row }}\n                    </o-table-column>\n                </template>\n            </slot>\n        </div>\n\n        <o-table-mobile-sort\n            v-if=\"isMobileActive && hasSortablenewColumns\"\n            :current-sort-column=\"currentSortColumn\"\n            :columns=\"tableColumns\"\n            :placeholder=\"mobileSortPlaceholder\"\n            :icon-pack=\"iconPack\"\n            :sort-icon=\"sortIcon\"\n            :sort-icon-size=\"sortIconSize\"\n            :is-asc=\"isAsc\"\n            :mobile-sort-classes=\"mobileSortClasses\"\n            @sort=\"(column, event) => sort(column, null, event)\" />\n\n        <template\n            v-if=\"\n                paginated &&\n                (paginationPosition === 'top' || paginationPosition === 'both')\n            \">\n            <!--\n                @slot Override pagination label\n                @binding {number} current - current page\n                @binding {number} per-page - rows per page\n                @binding {number} total - total rows count\n                @binding {(page: number): void } change - on page change event\n            -->\n            <slot\n                name=\"pagination\"\n                :current=\"tableCurrentPage\"\n                :per-page=\"perPage\"\n                :total=\"dataTotal\"\n                :change=\"(page) => (tableCurrentPage = page)\">\n                <o-table-pagination\n                    v-bind=\"$attrs\"\n                    v-model:current=\"tableCurrentPage\"\n                    :paginated=\"paginated\"\n                    :per-page=\"perPage\"\n                    :total=\"dataTotal\"\n                    :rounded=\"paginationRounded\"\n                    :size=\"paginationSize\"\n                    :order=\"paginationOrder\"\n                    :simple=\"paginationSimple\"\n                    :icon-pack=\"iconPack\"\n                    :aria-next-label=\"ariaNextLabel\"\n                    :aria-previous-label=\"ariaPreviousLabel\"\n                    :aria-page-label=\"ariaPageLabel\"\n                    :aria-current-label=\"ariaCurrentLabel\"\n                    :root-class=\"paginationWrapperRootClasses\"\n                    @change=\"(page) => $emit('page-change', page)\">\n                    <!--\n                        @slot Additional slot if table is paginated\n                    -->\n                    <slot name=\"top-left\" />\n                </o-table-pagination>\n            </slot>\n        </template>\n\n        <div :class=\"tableWrapperClasses\" :style=\"tableWrapperStyle\">\n            <table\n                :class=\"tableClasses\"\n                :tabindex=\"!focusable ? null : 0\"\n                @keydown.self.prevent.up=\"onArrowPressed(-1, $event)\"\n                @keydown.self.prevent.down=\"onArrowPressed(1, $event)\">\n                <caption v-if=\"$slots.caption\">\n                    <!--\n                        @slot Define a table caption here\n                    -->\n                    <slot name=\"caption\" />\n                </caption>\n                <thead v-if=\"tableColumns.length && showHeader\">\n                    <!--\n                        @slot Define preheader content here\n                    -->\n                    <slot name=\"preheader\" />\n                    <tr>\n                        <th\n                            v-if=\"showDetailRowIcon\"\n                            :class=\"[...thBaseClasses, ...thDetailedClasses]\" />\n                        <th\n                            v-if=\"checkable && checkboxPosition === 'left'\"\n                            :class=\"[...thBaseClasses, ...thCheckboxClasses]\">\n                            <!--\n                                @slot Override check all checkbox\n                                @binding {boolean} is-all-checked - if all rows are checked\n                                @binding {boolean} is-all-uncheckable - if check all is uncheckable\n                                @binding {(): void} check-all - check all function\n                            -->\n                            <slot\n                                name=\"check-all\"\n                                :is-all-checked=\"isAllChecked\"\n                                :is-all-uncheckable=\"isAllUncheckable\"\n                                :check-all=\"checkAll\">\n                                <o-checkbox\n                                    v-if=\"headerCheckable\"\n                                    :model-value=\"isAllChecked\"\n                                    autocomplete=\"off\"\n                                    :variant=\"checkboxVariant\"\n                                    :disabled=\"isAllUncheckable\"\n                                    @update:model-value=\"checkAll\" />\n                            </slot>\n                        </th>\n                        <th\n                            v-for=\"(column, index) in visibleColumns\"\n                            :key=\"column.identifier + ':' + index + 'header'\"\n                            v-bind=\"column.thAttrsData\"\n                            :class=\"thClasses(column)\"\n                            :style=\"isMobileActive ? {} : column.style\"\n                            :draggable=\"canDragColumn\"\n                            @click.stop=\"sort(column, null, $event)\"\n                            @dragstart=\"\n                                handleColumnDragStart(column, index, $event)\n                            \"\n                            @dragend=\"\n                                handleColumnDragEnd(column, index, $event)\n                            \"\n                            @drop=\"handleColumnDrop(column, index, $event)\"\n                            @dragover=\"\n                                handleColumnDragOver(column, index, $event)\n                            \"\n                            @dragleave=\"\n                                handleColumnDragLeave(column, index, $event)\n                            \">\n                            <template v-if=\"column.$slots?.header\">\n                                <o-slot-component\n                                    :component=\"column.$el\"\n                                    name=\"header\"\n                                    tag=\"span\"\n                                    :props=\"{ column, index }\" />\n                            </template>\n                            <template v-else>\n                                <span>\n                                    {{ column.label }}\n                                    <span\n                                        v-show=\"\n                                            column.sortable &&\n                                            isColumnSorted(column)\n                                        \"\n                                        :class=\"thSortIconClasses\">\n                                        <o-icon\n                                            :icon=\"sortIcon\"\n                                            :pack=\"iconPack\"\n                                            both\n                                            :size=\"sortIconSize\"\n                                            :rotation=\"!isAsc ? 180 : 0\" />\n                                    </span>\n                                </span>\n                            </template>\n                        </th>\n                        <th\n                            v-if=\"checkable && checkboxPosition === 'right'\"\n                            :class=\"[...thBaseClasses, ...thCheckboxClasses]\">\n                            <template v-if=\"headerCheckable\">\n                                <!--\n                                    @slot Override check all checkbox\n                                    @binding {boolean} is-all-checked - if all rows are checked\n                                    @binding {boolean} is-all-uncheckable - if check all is uncheckable\n                                    @binding {(): void} check-all - check all function\n                                -->\n                                <slot\n                                    name=\"check-all\"\n                                    :is-all-checked=\"isAllChecked\"\n                                    :is-all-uncheckable=\"isAllUncheckable\"\n                                    :check-all=\"checkAll\">\n                                    <o-checkbox\n                                        :model-value=\"isAllChecked\"\n                                        autocomplete=\"off\"\n                                        :variant=\"checkboxVariant\"\n                                        :disabled=\"isAllUncheckable\"\n                                        @update:model-value=\"checkAll\" />\n                                </slot>\n                            </template>\n                        </th>\n                    </tr>\n                    <tr v-if=\"hasSearchablenewColumns\">\n                        <th\n                            v-if=\"showDetailRowIcon\"\n                            :class=\"[...thBaseClasses, ...thDetailedClasses]\" />\n                        <th v-if=\"checkable && checkboxPosition === 'left'\" />\n                        <th\n                            v-for=\"(column, index) in visibleColumns\"\n                            :key=\"\n                                column.identifier + ':' + index + 'searchable'\n                            \"\n                            v-bind=\"column.thAttrsData\"\n                            :class=\"thClasses(column)\"\n                            :style=\"isMobileActive ? {} : column.style\">\n                            <template v-if=\"column.searchable\">\n                                <template v-if=\"column.$slots?.searchable\">\n                                    <o-slot-component\n                                        :component=\"column.$el\"\n                                        name=\"searchable\"\n                                        tag=\"span\"\n                                        :props=\"{ column, index, filters }\" />\n                                </template>\n                                <o-input\n                                    v-else\n                                    v-model=\"filters[column.field]\"\n                                    :type=\"column.numeric ? 'number' : 'text'\"\n                                    @[filtersEvent]=\"onFiltersEvent\" />\n                            </template>\n                        </th>\n                        <th v-if=\"checkable && checkboxPosition === 'right'\" />\n                    </tr>\n                    <tr v-if=\"hasCustomSubheadings\">\n                        <th\n                            v-if=\"showDetailRowIcon\"\n                            :class=\"[...thBaseClasses, ...thDetailedClasses]\" />\n                        <th v-if=\"checkable && checkboxPosition === 'left'\" />\n                        <th\n                            v-for=\"(column, index) in visibleColumns\"\n                            :key=\"\n                                column.identifier + ':' + index + 'subheading'\n                            \"\n                            :style=\"isMobileActive ? {} : column.style\"\n                            :class=\"[...thBaseClasses, ...thSubheadingClasses]\">\n                            <template v-if=\"column.$slots?.subheading\">\n                                <o-slot-component\n                                    :component=\"column.$el\"\n                                    name=\"subheading\"\n                                    tag=\"span\"\n                                    :props=\"{ column, index }\" />\n                            </template>\n                            <template v-else>\n                                {{ column.subheading }}\n                            </template>\n                        </th>\n                        <th v-if=\"checkable && checkboxPosition === 'right'\" />\n                    </tr>\n                </thead>\n                <tbody>\n                    <template\n                        v-for=\"(row, index) in visibleRows\"\n                        :key=\"getRowKey(row) + 'row'\">\n                        <tr\n                            :class=\"rowClasses(row, index)\"\n                            :draggable=\"canDragRow\"\n                            @click=\"selectRow(row, index, $event)\"\n                            @dblclick=\"$emit('dblclick', row, index, $event)\"\n                            @mouseenter=\"\n                                $emit('mouseenter', row, index, $event)\n                            \"\n                            @mouseleave=\"\n                                $emit('mouseleave', row, index, $event)\n                            \"\n                            @contextmenu=\"\n                                $emit('contextmenu', row, index, $event)\n                            \"\n                            @dragstart=\"handleDragStart(row, index, $event)\"\n                            @dragend=\"handleDragEnd(row, index, $event)\"\n                            @drop=\"handleDrop(row, index, $event)\"\n                            @dragover=\"handleDragOver(row, index, $event)\"\n                            @dragleave=\"handleDragLeave(row, index, $event)\">\n                            <!-- detailed toggle column -->\n                            <td\n                                v-if=\"showDetailRowIcon\"\n                                :class=\"[\n                                    ...tdBaseClasses,\n                                    ...tdDetailedChevronClasses,\n                                ]\">\n                                <o-icon\n                                    v-if=\"hasDetailedVisible(row)\"\n                                    :icon=\"detailIcon\"\n                                    :pack=\"iconPack\"\n                                    :rotation=\"isVisibleDetailRow(row) ? 90 : 0\"\n                                    role=\"button\"\n                                    clickable\n                                    both\n                                    @click.stop=\"toggleDetails(row)\" />\n                            </td>\n\n                            <!-- checkable column left -->\n                            <td\n                                v-if=\"checkable && checkboxPosition === 'left'\"\n                                :class=\"[\n                                    ...thBaseClasses,\n                                    ...tdCheckboxClasses,\n                                ]\">\n                                <o-checkbox\n                                    :model-value=\"isRowChecked(row)\"\n                                    autocomplete=\"off\"\n                                    :variant=\"checkboxVariant\"\n                                    :disabled=\"!isRowCheckable(row)\"\n                                    @update:model-value=\"\n                                        checkRow(row, index)\n                                    \" />\n                            </td>\n\n                            <!-- row data columns -->\n                            <o-slot-component\n                                v-for=\"(column, colindex) in visibleColumns\"\n                                :key=\"\n                                    column.identifier + index + ':' + colindex\n                                \"\n                                v-bind=\"column.tdAttrsData[index]\"\n                                :component=\"column.$el\"\n                                name=\"default\"\n                                tag=\"td\"\n                                :class=\"tdClasses(row, column)\"\n                                :style=\"isMobileActive ? {} : column.style\"\n                                :data-label=\"column.label\"\n                                :props=\"{\n                                    row,\n                                    column,\n                                    index,\n                                    colindex,\n                                    toggleDetails,\n                                }\"\n                                @click=\"\n                                    $emit(\n                                        'cell-click',\n                                        row,\n                                        column,\n                                        index,\n                                        colindex,\n                                        $event,\n                                    )\n                                \" />\n\n                            <!-- checkable column right -->\n                            <td\n                                v-if=\"checkable && checkboxPosition === 'right'\"\n                                :class=\"[\n                                    ...thBaseClasses,\n                                    ...tdCheckboxClasses,\n                                ]\">\n                                <o-checkbox\n                                    :model-value=\"isRowChecked(row)\"\n                                    autocomplete=\"off\"\n                                    :variant=\"checkboxVariant\"\n                                    :disabled=\"!isRowCheckable(row)\"\n                                    @update:model-value=\"\n                                        checkRow(row, index)\n                                    \" />\n                            </td>\n                        </tr>\n\n                        <transition :name=\"detailTransition\">\n                            <tr\n                                v-if=\"isActiveDetailRow(row)\"\n                                :key=\"getRowKey(row) + 'detail'\"\n                                :class=\"detailedClasses\">\n                                <td :colspan=\"columnCount\">\n                                    <!--\n                                        @slot Place row detail content here\n                                        @binding {unknown} row - row content\n                                        @binding {number} index - row index\n                                    -->\n                                    <slot\n                                        name=\"detail\"\n                                        :row=\"row as any\"\n                                        :index=\"index\" />\n                                </td>\n                            </tr>\n                        </transition>\n                        <!--\n                            @slot Place row detail content here\n                            @binding {unknown} row - row content\n                            @binding {number} index - row index\n                        -->\n                        <slot\n                            v-if=\"isActiveCustomDetailRow(row)\"\n                            name=\"detail\"\n                            :row=\"row as any\"\n                            :index=\"index\" />\n                    </template>\n\n                    <tr v-if=\"!visibleRows.length\">\n                        <td :colspan=\"columnCount\">\n                            <!--\n                                @slot Define content if table is empty\n                            -->\n                            <slot name=\"empty\" />\n                        </td>\n                    </tr>\n                </tbody>\n\n                <tfoot v-if=\"$slots.footer\">\n                    <tr :class=\"footerClasses\">\n                        <!--\n                            @slot Define a custom footer\n                            @binding {number} column-count - counts of visible columns\n                            @binding {number} row-count - counts of visible rows\n                        -->\n                        <slot\n                            v-if=\"hasCustomFooterSlot()\"\n                            name=\"footer\"\n                            :column-count=\"columnCount\"\n                            :row-count=\"visibleRows?.length\" />\n                        <th v-else :colspan=\"columnCount\">\n                            <!--\n                                @slot Define a custom footer\n                                @binding {number} column-count - counts of visible columns\n                                @binding {number} row-count - counts of visible rows\n                            -->\n                            <slot\n                                name=\"footer\"\n                                :column-count=\"columnCount\"\n                                :row-count=\"visibleRows?.length\" />\n                        </th>\n                    </tr>\n                </tfoot>\n            </table>\n            <!--\n                @slot Override loading component\n                @binding {boolean} loading - is loading enabled\n            -->\n            <slot name=\"loading\" :loading=\"loading\">\n                <o-loading :full-page=\"false\" :active=\"loading\" />\n            </slot>\n        </div>\n\n        <template\n            v-if=\"\n                (checkable && $slots['bottom-left']) ||\n                (paginated &&\n                    (paginationPosition === 'bottom' ||\n                        paginationPosition === 'both'))\n            \">\n            <!--\n                @slot Override pagination label\n                @binding {number} current - current page\n                @binding {number} per-page - rows per page\n                @binding {number} total - total rows count\n                @binding {(page: number): void } change - on page change event\n            -->\n            <slot\n                name=\"pagination\"\n                :current=\"tableCurrentPage\"\n                :per-page=\"perPage\"\n                :total=\"dataTotal\"\n                :change=\"(page) => (tableCurrentPage = page)\">\n                <o-table-pagination\n                    v-bind=\"$attrs\"\n                    v-model:current=\"tableCurrentPage\"\n                    :paginated=\"paginated\"\n                    :per-page=\"perPage\"\n                    :total=\"dataTotal\"\n                    :rounded=\"paginationRounded\"\n                    :size=\"paginationSize\"\n                    :order=\"paginationOrder\"\n                    :simple=\"paginationSimple\"\n                    :icon-pack=\"iconPack\"\n                    :aria-next-label=\"ariaNextLabel\"\n                    :aria-previous-label=\"ariaPreviousLabel\"\n                    :aria-page-label=\"ariaPageLabel\"\n                    :aria-current-label=\"ariaCurrentLabel\"\n                    :root-class=\"paginationWrapperRootClasses\"\n                    @change=\"(page) => $emit('page-change', page)\">\n                    <!--\n                        @slot Additional slot if table is paginated\n                    -->\n                    <slot name=\"bottom-left\" />\n                </o-table-pagination>\n            </slot>\n        </template>\n    </div>\n</template>\n","import type { App, Plugin } from \"vue\";\n\nimport Table from \"./Table.vue\";\nimport TableColumn from \"./TableColumn.vue\";\n\nimport { registerComponent } from \"@/utils/plugins\";\n\n/** export table specific types */\nexport type { Column } from \"./types\";\n\n/** export table plugin */\nexport default {\n    install(app: App) {\n        registerComponent(app, Table);\n        registerComponent(app, TableColumn);\n    },\n} as Plugin;\n\n/** export table components */\nexport { Table as OTable, TableColumn as OTableColumn };\n"],"names":["index","isAsc","isAllChecked","Table","TableColumn"],"mappings":"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"}