{"version":3,"file":"notification.mjs","sources":["../../src/components/notification/Notification.vue","../../src/components/notification/NotificationNotice.vue","../../src/components/notification/NotificationProgrammatic.ts","../../src/components/notification/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, type PropType } from \"vue\";\n\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { defineClasses, usePropBinding } from \"@/composables\";\n\nimport type { ComponentClass } from \"@/types\";\n\n/**\n * Bold notification blocks to alert your users of something\n * @displayName Notification\n * @requires ./NotificationNotice.vue\n * @style _notification.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"ONotification\",\n    configField: \"notification\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Whether modal is active or not, use v-model:active to make it two-way binding */\n    active: { type: Boolean, default: true },\n    /**\n     * Type (color) of the notification\n     * @values info, success, warning, danger\n     */\n    type: {\n        type: String,\n        default: undefined,\n        validator: (value: string) =>\n            [\"info\", \"success\", \"warning\", \"danger\", undefined].indexOf(value) >\n            -1,\n    },\n    /**\n     * Color of the control\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    variant: {\n        type: String,\n        default: () => getOption(\"notification.variant\"),\n    },\n    /**\n     * Which position the notification will appear when programmatically\n     * @values top-right, top, top-left, bottom-right, bottom, bottom-left\n     */\n    position: {\n        type: String,\n        default: () => getOption(\"notification.position\", \"top\"),\n        validator: (value: string) =>\n            [\n                \"top-right\",\n                \"top\",\n                \"top-left\",\n                \"bottom-right\",\n                \"bottom\",\n                \"bottom-left\",\n            ].indexOf(value) > -1,\n    },\n    /** Message text (can contain HTML), unnecessary when default slot is used */\n    message: {\n        type: [String, Array] as PropType<string | string[]>,\n        default: undefined,\n    },\n    /** Custom animation (transition name) */\n    animation: {\n        type: String,\n        default: () => getOption(\"notification.animation\", \"fade\"),\n    },\n    /** Accessibility label for the close button */\n    ariaCloseLabel: {\n        type: String,\n        default: () => getOption(\"notification.ariaCloseLabel\", \"Close\"),\n    },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"notification.iconPack\"),\n    },\n    /** Icon name to use */\n    icon: { type: String, default: undefined },\n    /**\n     * Icon size\n     * @values small, medium, large\n     */\n    iconSize: {\n        type: String,\n        default: () => getOption(\"notification.iconSize\", \"large\"),\n    },\n    /** Add close button to the item that closes the notification */\n    closable: { type: Boolean, default: false },\n    /** Close icon name */\n    closeIcon: {\n        type: String,\n        default: () => getOption(\"notification.closeIcon\", \"close\"),\n    },\n    /**\n     * Size of close icon\n     * @values small, medium, large\n     */\n    closeIconSize: {\n        type: String,\n        default: () => getOption(\"notification.closeIconSize\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the close button container */\n    closeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the content element */\n    contentClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the icon on the left */\n    iconClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the element when positioned */\n    positionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the notification variant */\n    variantClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the wrapper element */\n    wrapperClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * active prop two-way binding\n     * @param value {boolean} - updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * on component close event\n     * @param value {any} - close event data\n     */\n    (e: \"close\", ...args: any[]): void;\n}>();\n\nconst isActive = usePropBinding<boolean>(\"active\", props, emits, {\n    passive: true,\n});\n\n/** Icon name (MDI) based on type. */\nconst computedIcon = computed(() => {\n    if (props.icon) return props.icon;\n\n    switch (props.type) {\n        case \"info\":\n            return \"information\";\n        case \"success\":\n            return \"check-circle\";\n        case \"warning\":\n            return \"alert\";\n        case \"danger\":\n            return \"alert-circle\";\n        default:\n            return null;\n    }\n});\n\n/** Close the Message and emit events. */\nfunction close(...args: any[]): void {\n    isActive.value = false;\n    emits(\"close\", ...args);\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-notification\"],\n    [\n        \"variantClass\",\n        \"o-notification--\",\n        computed(() => props.variant),\n        computed(() => !!props.variant),\n    ],\n    [\n        \"positionClass\",\n        \"o-notification--\",\n        computed(() => props.position),\n        computed(() => !!props.position),\n    ],\n);\n\nconst wrapperClasses = defineClasses([\n    \"wrapperClass\",\n    \"o-notification__wrapper\",\n]);\n\nconst iconClasses = defineClasses([\"iconClass\", \"o-notification__icon\"]);\n\nconst contentClasses = defineClasses([\n    \"contentClass\",\n    \"o-notification__content\",\n]);\n\nconst closeClasses = defineClasses([\"closeClass\", \"o-notification__close\"]);\n</script>\n\n<template>\n    <transition :name=\"animation\">\n        <article\n            v-show=\"isActive\"\n            v-bind=\"$attrs\"\n            :class=\"rootClasses\"\n            data-oruga=\"notification\">\n            <button\n                v-if=\"closable\"\n                :class=\"closeClasses\"\n                type=\"button\"\n                :aria-label=\"ariaCloseLabel\"\n                @click=\"close({ action: 'close', method: 'x' })\">\n                <o-icon\n                    clickable\n                    :pack=\"iconPack\"\n                    both\n                    :icon=\"closeIcon\"\n                    :size=\"closeIconSize\" />\n            </button>\n\n            <!--\n                @slot Notification inner content, outside of the message container\n                @binding {(...args): void} close - function to close the notification\n            -->\n            <slot name=\"inner\" :close=\"close\" />\n\n            <div v-if=\"$slots.default || message\" :class=\"wrapperClasses\">\n                <o-icon\n                    v-if=\"computedIcon\"\n                    :icon=\"computedIcon\"\n                    :pack=\"iconPack\"\n                    :class=\"iconClasses\"\n                    both\n                    :size=\"iconSize\"\n                    aria-hidden />\n                <div :class=\"contentClasses\">\n                    <!--\n                        @slot Notification default content, default is message prop\n                        @binding {(...args): void} close - function to close the notification\n                    -->\n                    <slot :close=\"close\">\n                        <span v-if=\"message\" v-html=\"message\" />\n                    </slot>\n                </div>\n            </div>\n        </article>\n    </transition>\n</template>\n","<script setup lang=\"ts\">\nimport {\n    computed,\n    ref,\n    onMounted,\n    onBeforeMount,\n    watch,\n    type PropType,\n    type Component,\n} from \"vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport {\n    defineClasses,\n    getActiveClasses,\n    useProgrammaticComponent,\n} from \"@/composables\";\n\nimport type { NotifcationProps } from \"./types\";\nimport type { ProgrammaticInstance, ComponentClass } from \"@/types\";\n\n/**\n * Notification Notice is an extension of the Notification component and is used for the programmatic usage\n * @displayName Notification Notice\n */\ndefineOptions({\n    isOruga: true,\n    name: \"ONotificationNotice\",\n    configField: \"notification\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Whether notification is active or not, use v-model:active to make it two-way binding. */\n    active: { type: Boolean, default: true },\n    /**\n     * Which position the notification will appear when programmatically.\n     * @values top-right, top, top-left, bottom-right, bottom, bottom-left\n     */\n    position: {\n        type: String,\n        default: () => getOption(\"notification.position\", \"top\"),\n        validator: (value: string) =>\n            [\n                \"top-right\",\n                \"top\",\n                \"top-left\",\n                \"bottom-right\",\n                \"bottom\",\n                \"bottom-left\",\n            ].indexOf(value) > -1,\n    },\n    /** Hide notification after duration (in miliseconds) */\n    duration: {\n        type: Number,\n        default: () => getOption(\"notification.duration\", 2000),\n    },\n    /** Show the Notification infinitely until it is dismissed. */\n    infinite: { type: Boolean, default: false },\n    /** If notice should queue with others notices (snackbar/toast/notification). */\n    queue: {\n        type: Boolean,\n        default: () => getOption(\"notification.queue\"),\n    },\n    /** Callback function to call after user canceled (pressed escape / clicked outside). */\n    onCancel: { type: Function as PropType<() => void>, default: () => {} },\n    /** Callback function to call after close (programmatically close or user canceled). */\n    onClose: { type: Function as PropType<() => void>, default: () => {} },\n    /**\n     * Component to be injected.\n     * Close notification within the component by emitting a 'close' event — $emit('close').\n     */\n    component: {\n        type: [Object, Function] as PropType<Component>,\n        default: undefined,\n    },\n    /** Props to be binded to the injected component. */\n    props: { type: Object, default: undefined },\n    /** Events to be binded to the injected component. */\n    events: { type: Object, default: () => ({}) },\n    /**\n     * DOM element the toast will be created on (for programmatic usage).\n     * Note that this also changes the position of the toast from fixed to absolute.\n     * Meaning that the container should be fixed.\n     */\n    container: {\n        type: [Object, String] as PropType<string | HTMLElement>,\n        default: () => getOption(\"notification.container\", \"body\"),\n    },\n    /**\n     * Props passed to the internal notification component.\n     * @ignore\n     */\n    notification: {\n        type: Object as PropType<NotifcationProps>,\n        default: () => ({}),\n    },\n    /**\n     * This is used internally for programmatic usage.\n     * @ignore\n     */\n    programmatic: {\n        type: Object as PropType<ProgrammaticInstance>,\n        default: undefined,\n    },\n    /**\n     * This is used internally for programmatic usage.\n     * @ignore\n     */\n    promise: { type: Promise, default: undefined },\n    // class props (will not be displayed in the docs)\n    /** Root class of the notice */\n    noticeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the notice when positioned */\n    noticePositionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the custom container element */\n    noticeCustomContainerClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * active prop two-way binding\n     * @param value {boolean} - updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * on component close event\n     * @param value {any} - close event data\n     */\n    (e: \"close\", ...args: any[]): void;\n}>();\n\nconst notificationRef = ref();\n\n/** add programmatic usage to this component */\nconst { isActive, close, container } = useProgrammaticComponent(\n    () => notificationRef.value.$el,\n    props,\n    emits,\n    {\n        cancelOptions: [\"escape\", \"x\"],\n    },\n);\n\nconst parentTop = ref(null);\nconst parentBottom = ref(null);\n\nconst timer = ref();\n\nwatch(\n    () => isActive,\n    (value) => {\n        if (value) setAutoClose();\n        else if (timer.value) clearTimeout(timer.value);\n    },\n);\n\n/** Create or inject notice dom container elements. */\nonBeforeMount(() => {\n    if (\n        noticeClasses.value &&\n        positionBottomClasses.value &&\n        positionTopClasses.value\n    ) {\n        const rootClasses = getActiveClasses(noticeClasses.value);\n        const topClasses = getActiveClasses(positionTopClasses.value);\n        const bottomClasses = getActiveClasses(positionBottomClasses.value);\n\n        parentTop.value = container.value.querySelector(\n            `.${rootClasses.join(\".\")}.${topClasses.join(\".\")}`,\n        );\n        parentBottom.value = container.value.querySelector(\n            `.${rootClasses.join(\".\")}.${bottomClasses.join(\".\")}`,\n        );\n\n        if (parentTop.value && parentBottom.value) return;\n\n        if (!parentTop.value) {\n            parentTop.value = document.createElement(\"div\");\n            parentTop.value.className = `${rootClasses.join(\n                \" \",\n            )} ${topClasses.join(\" \")}`;\n        }\n\n        if (!parentBottom.value) {\n            parentBottom.value = document.createElement(\"div\");\n            parentBottom.value.className = `${rootClasses.join(\n                \" \",\n            )} ${bottomClasses.join(\" \")}`;\n        }\n\n        container.value.appendChild(parentTop.value);\n        container.value.appendChild(parentBottom.value);\n\n        if (container.value.tagName !== \"BODY\") {\n            const classes = getActiveClasses(\n                noticeCustomContainerClasses.value,\n            );\n            if (classes?.length)\n                classes\n                    .filter((c) => !!c)\n                    .forEach((c: string) => {\n                        parentTop.value.classList.add(c);\n                        parentBottom.value.classList.add(c);\n                    });\n        }\n    }\n});\n\nonMounted(() => {\n    showNotice();\n    setAutoClose();\n});\n\nconst correctParent = computed(() => {\n    switch (props.position) {\n        case \"top-right\":\n        case \"top\":\n        case \"top-left\":\n            return parentTop.value;\n\n        case \"bottom-right\":\n        case \"bottom\":\n        case \"bottom-left\":\n            return parentBottom.value;\n        default:\n            return null;\n    }\n});\n\nconst shouldQueue = computed(() =>\n    props.queue\n        ? parentTop.value.childElementCount > 0 ||\n          parentBottom.value.childElementCount > 0\n        : false,\n);\n\nfunction showNotice(): void {\n    if (shouldQueue.value) correctParent.value.innerHTML = \"\";\n    correctParent.value.insertAdjacentElement(\n        \"afterbegin\",\n        notificationRef.value.$el,\n    );\n    isActive.value = true;\n}\n\n/** Set timer to auto close message */\nfunction setAutoClose(): void {\n    if (!props.infinite) {\n        // clear old timer\n        if (timer.value) clearTimeout(timer.value);\n        // set new timer\n        timer.value = setTimeout(() => {\n            if (isActive.value)\n                handleClose({ action: \"close\", method: \"timeout\" });\n        }, props.duration);\n    }\n}\n\nfunction handleClose(...args: any[]): void {\n    clearTimeout(timer.value);\n    close(...args);\n}\n\n// --- Computed Component Classes ---\n\nconst noticeClasses = defineClasses([\"noticeClass\", \"o-notices\"]);\n\nconst positionTopClasses = defineClasses([\n    \"noticePositionClass\",\n    \"o-notices--\",\n    \"top\",\n]);\nconst positionBottomClasses = defineClasses([\n    \"noticePositionClass\",\n    \"o-notices--\",\n    \"bottom\",\n]);\n\nconst noticeCustomContainerClasses = defineClasses([\n    \"noticeCustomContainerClass\",\n    \"o-notices__custom-container\",\n]);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ close: handleClose, promise: props.promise });\n</script>\n\n<template>\n    <o-notification\n        v-bind=\"notification\"\n        ref=\"notificationRef\"\n        v-model:active=\"isActive\"\n        :position=\"position\"\n        @close=\"handleClose\">\n        <template #inner=\"{ close }\">\n            <!-- injected component for programmatic usage -->\n            <component\n                v-bind=\"$props.props\"\n                :is=\"component\"\n                v-if=\"component\"\n                v-on=\"$props.events\"\n                @close=\"close\" />\n        </template>\n        <slot />\n    </o-notification>\n</template>\n","import { createVNode, render } from \"vue\";\n\nimport NotificationNotice from \"./NotificationNotice.vue\";\nimport type { NotifcationNoticeProps, NotifcationProps } from \"./types\";\n\nimport InstanceRegistry from \"@/utils/InstanceRegistry\";\nimport { VueInstance } from \"@/utils/plugins\";\nimport { merge } from \"@/utils/helpers\";\nimport { getOption } from \"@/utils/config\";\nimport type { OrugaOptions, ProgrammaticExpose } from \"@/types\";\n\ndeclare module \"../../index\" {\n    interface OrugaProgrammatic {\n        notification: typeof NotificationProgrammatic;\n    }\n}\n\nconst instances = new InstanceRegistry<typeof NotificationNotice>();\n\ntype NotifcationProgrammaticProps = Readonly<\n    | string\n    | (NotifcationNoticeProps &\n          NotifcationProps &\n          OrugaOptions[\"notification\"] &\n          Record<string, unknown>)\n>;\n\nconst NotificationProgrammatic = {\n    open(params: NotifcationProgrammaticProps): ProgrammaticExpose {\n        const componentParams =\n            typeof params === \"string\"\n                ? {\n                      message: params,\n                  }\n                : { ...params };\n\n        let slot;\n        if (Array.isArray(componentParams.message)) {\n            slot = componentParams.message;\n            delete componentParams.message;\n        }\n\n        const defaultParams = {\n            programmatic: { instances },\n            active: true, // set the active state to true\n            position: getOption(\"notification.position\", \"top-right\"),\n        };\n\n        const notificationParams = componentParams.notification\n            ? componentParams.notification\n            : componentParams;\n\n        const propsData = merge(defaultParams, componentParams);\n        propsData.notification = merge({}, notificationParams);\n        propsData.promise = new Promise((p1, p2) => {\n            propsData.programmatic.resolve = p1;\n            propsData.programmatic.reject = p2;\n        });\n\n        const defaultSlot = () => slot;\n\n        const app = VueInstance;\n        const vnode = createVNode(NotificationNotice, propsData, defaultSlot);\n        vnode.appContext = app._context;\n        render(vnode, document.createElement(\"div\"));\n\n        // return exposed functionalities\n        return vnode.component.exposed as ProgrammaticExpose;\n    },\n    closeAll(...args: any[]): void {\n        instances.walk((entry) => entry.exposed.close(...args));\n    },\n};\n\nexport default NotificationProgrammatic;\n","import type { App, Plugin } from \"vue\";\n\nimport Notification from \"./Notification.vue\";\nimport NotificationProgrammatic from \"./NotificationProgrammatic\";\n\nimport {\n    registerComponent,\n    registerComponentProgrammatic,\n} from \"@/utils/plugins\";\n\n/** export notification specific types */\nexport type { NotifcationNoticeProps, NotifcationProps } from \"./types\";\n\n/** export notification plugin */\nexport default {\n    install(app: App) {\n        registerComponent(app, Notification);\n        registerComponentProgrammatic(\n            app,\n            \"notification\",\n            NotificationProgrammatic,\n        );\n    },\n} as Plugin;\n\n/** export notification components */\nexport { Notification as ONotification, NotificationProgrammatic };\n"],"names":["NotificationNotice","Notification","NotificationProgrammatic"],"mappings":"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"}