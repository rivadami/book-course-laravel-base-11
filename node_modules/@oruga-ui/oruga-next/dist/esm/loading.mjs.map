{"version":3,"file":"loading.mjs","sources":["../../src/components/loading/LoadingProgrammatic.ts","../../src/components/loading/index.ts"],"sourcesContent":["import { createVNode, render } from \"vue\";\n\nimport Loading from \"./Loading.vue\";\nimport type { LoadingProps } from \"./types\";\n\nimport InstanceRegistry from \"@/utils/InstanceRegistry\";\nimport { VueInstance } from \"@/utils/plugins\";\nimport { merge } from \"@/utils/helpers\";\nimport type { OrugaOptions, ProgrammaticExpose } from \"@/types\";\n\ndeclare module \"../../index\" {\n    interface OrugaProgrammatic {\n        loading: typeof LoadingProgrammatic;\n    }\n}\n\nconst instances = new InstanceRegistry<typeof Loading>();\n\ntype LoadingProgrammaticProps = Readonly<\n    string | (LoadingProps & OrugaOptions[\"loading\"])\n>;\n\nconst LoadingProgrammatic = {\n    open(params: LoadingProgrammaticProps): ProgrammaticExpose {\n        const componentParams =\n            typeof params === \"string\"\n                ? {\n                      label: params,\n                  }\n                : { ...params };\n\n        let slot;\n        if (Array.isArray(componentParams.label)) {\n            slot = componentParams.label;\n            delete componentParams.label;\n        }\n\n        const defaultParams = {\n            programmatic: { instances },\n            active: true, // set the active state to true\n        };\n\n        const propsData = merge(defaultParams, componentParams);\n        propsData.promise = new Promise((p1, p2) => {\n            propsData.programmatic.resolve = p1;\n            propsData.programmatic.reject = p2;\n        });\n\n        const defaultSlot = () => slot;\n\n        const app = VueInstance;\n        const vnode = createVNode(Loading, propsData, defaultSlot);\n        vnode.appContext = app._context;\n        render(vnode, document.createElement(\"div\"));\n\n        // return exposed functionalities\n        return vnode.component.exposed as ProgrammaticExpose;\n    },\n    closeAll(...args: any[]): void {\n        instances.walk((entry) => entry.exposed.close(...args));\n    },\n};\n\nexport default LoadingProgrammatic;\n","import type { App, Plugin } from \"vue\";\n\nimport Loading from \"./Loading.vue\";\nimport LoadingProgrammatic from \"./LoadingProgrammatic\";\n\nimport {\n    registerComponent,\n    registerComponentProgrammatic,\n} from \"@/utils/plugins\";\n\n/** export loading specific types */\nexport type { LoadingProps } from \"./types\";\n\n/** export loading plugin */\nexport default {\n    install(app: App) {\n        registerComponent(app, Loading);\n        registerComponentProgrammatic(app, \"loading\", LoadingProgrammatic);\n    },\n} as Plugin;\n\n/** export loading components */\nexport { LoadingProgrammatic, Loading as OLoading };\n"],"names":["Loading","LoadingProgrammatic"],"mappings":";;;;;;AAgBA,MAAM,YAAY,IAAI;AAMtB,MAAM,sBAAsB;AAAA,EACxB,KAAK,QAAsD;AACjD,UAAA,kBACF,OAAO,WAAW,WACZ;AAAA,MACI,OAAO;AAAA,IAAA,IAEX,EAAE,GAAG;AAEX,QAAA;AACJ,QAAI,MAAM,QAAQ,gBAAgB,KAAK,GAAG;AACtC,aAAO,gBAAgB;AACvB,aAAO,gBAAgB;AAAA,IAC3B;AAEA,UAAM,gBAAgB;AAAA,MAClB,cAAc,EAAE,UAAU;AAAA,MAC1B,QAAQ;AAAA;AAAA,IAAA;AAGN,UAAA,YAAY,MAAM,eAAe,eAAe;AACtD,cAAU,UAAU,IAAI,QAAQ,CAAC,IAAI,OAAO;AACxC,gBAAU,aAAa,UAAU;AACjC,gBAAU,aAAa,SAAS;AAAA,IAAA,CACnC;AAED,UAAM,cAAc,MAAM;AAE1B,UAAM,MAAM;AACZ,UAAM,QAAQ,YAAYA,WAAS,WAAW,WAAW;AACzD,UAAM,aAAa,IAAI;AACvB,WAAO,OAAO,SAAS,cAAc,KAAK,CAAC;AAG3C,WAAO,MAAM,UAAU;AAAA,EAC3B;AAAA,EACA,YAAY,MAAmB;AACjB,cAAA,KAAK,CAAC,UAAU,MAAM,QAAQ,MAAM,GAAG,IAAI,CAAC;AAAA,EAC1D;AACJ;AAEA,MAAA,wBAAe;ACjDf,MAAe,QAAA;AAAA,EACX,QAAQ,KAAU;AACd,sBAAkB,KAAKA,SAAO;AACA,kCAAA,KAAK,WAAWC,qBAAmB;AAAA,EACrE;AACJ;"}