/*! Oruga v0.8.12 | MIT License | github.com/oruga-ui/oruga */
import { provide, inject, computed } from "vue";
import { g as getOption } from "./config-C1k5NuG7.mjs";
const $FieldKey = Symbol("FielData");
function provideField(data) {
  provide($FieldKey, data);
}
function injectField() {
  const parentField = inject($FieldKey, void 0);
  const statusVariant = computed(() => {
    var _a;
    if (!((_a = parentField == null ? void 0 : parentField.value) == null ? void 0 : _a.fieldVariant))
      return void 0;
    if (typeof parentField.value.fieldVariant === "string")
      return parentField.value.fieldVariant;
    if (Array.isArray(parentField.value.fieldVariant)) {
      for (const key in parentField.value.fieldVariant) {
        if (parentField.value.fieldVariant[key])
          return key;
      }
    }
    return void 0;
  });
  const statusMessage = computed(
    () => {
      var _a;
      return ((_a = parentField.value) == null ? void 0 : _a.hasMessage) ? parentField.value.fieldMessage : "";
    }
  );
  const statusVariantIcon = computed(() => {
    const statusVariantIcon2 = getOption("statusVariantIcon", {
      success: "check",
      danger: "alert-circle",
      info: "information",
      warning: "alert"
    });
    return statusVariantIcon2[statusVariant.value] || "";
  });
  return {
    parentField,
    statusVariant,
    statusVariantIcon,
    statusMessage
  };
}
export {
  injectField as i,
  provideField as p
};
//# sourceMappingURL=fieldInjection-B9PE5wx6.mjs.map
