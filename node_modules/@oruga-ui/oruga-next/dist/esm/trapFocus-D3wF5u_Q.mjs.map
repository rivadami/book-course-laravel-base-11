{"version":3,"file":"trapFocus-D3wF5u_Q.mjs","sources":["../../src/directives/trapFocus.ts"],"sourcesContent":["const findFocusable = (element: any, programmatic = false) => {\n    if (!element) return null;\n    if (programmatic) return element.querySelectorAll(`*[tabindex=\"-1\"]`);\n\n    return element.querySelectorAll(`a[href]:not([tabindex=\"-1\"]),\n                                     area[href],\n                                     input:not([disabled]),\n                                     select:not([disabled]),\n                                     textarea:not([disabled]),\n                                     button:not([disabled]),\n                                     iframe,\n                                     object,\n                                     embed,\n                                     *[tabindex]:not([tabindex=\"-1\"]),\n                                     *[contenteditable]`);\n};\n\nlet onKeyDown: any;\n\nconst bind = (el: any, { value = true }) => {\n    if (value) {\n        let focusable = findFocusable(el);\n        let focusableProg = findFocusable(el, true);\n\n        if (focusable && focusable.length > 0) {\n            onKeyDown = (event: any) => {\n                // Need to get focusable each time since it can change between key events\n                // ex. changing month in a datepicker\n                focusable = findFocusable(el);\n                focusableProg = findFocusable(el, true);\n                const firstFocusable = focusable[0];\n                const lastFocusable = focusable[focusable.length - 1];\n\n                if (\n                    event.target === firstFocusable &&\n                    event.shiftKey &&\n                    event.key === \"Tab\"\n                ) {\n                    event.preventDefault();\n                    lastFocusable.focus();\n                } else if (\n                    (event.target === lastFocusable ||\n                        Array.from(focusableProg).indexOf(event.target) >= 0) &&\n                    !event.shiftKey &&\n                    event.key === \"Tab\"\n                ) {\n                    event.preventDefault();\n                    firstFocusable.focus();\n                }\n            };\n            el.addEventListener(\"keydown\", onKeyDown);\n        }\n    }\n};\n\nconst unbind = (el: any) => {\n    el.removeEventListener(\"keydown\", onKeyDown);\n};\n\nconst directive = {\n    beforeMount: bind,\n    beforeUnmount: unbind,\n};\n\nexport default directive;\n\nexport const vTrapFocus = directive; // export composition api directive\n"],"names":[],"mappings":";AAAA,MAAM,gBAAgB,CAAC,SAAc,eAAe,UAAU;AAC1D,MAAI,CAAC;AAAgB,WAAA;AACjB,MAAA;AAAqB,WAAA,QAAQ,iBAAiB,kBAAkB;AAEpE,SAAO,QAAQ,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAUoB;AACxD;AAEA,IAAI;AAEJ,MAAM,OAAO,CAAC,IAAS,EAAE,QAAQ,WAAW;AACxC,MAAI,OAAO;AACH,QAAA,YAAY,cAAc,EAAE;AAC5B,QAAA,gBAAgB,cAAc,IAAI,IAAI;AAEtC,QAAA,aAAa,UAAU,SAAS,GAAG;AACnC,kBAAY,CAAC,UAAe;AAGxB,oBAAY,cAAc,EAAE;AACZ,wBAAA,cAAc,IAAI,IAAI;AAChC,cAAA,iBAAiB,UAAU,CAAC;AAClC,cAAM,gBAAgB,UAAU,UAAU,SAAS,CAAC;AAEpD,YACI,MAAM,WAAW,kBACjB,MAAM,YACN,MAAM,QAAQ,OAChB;AACE,gBAAM,eAAe;AACrB,wBAAc,MAAM;AAAA,QAAA,YAEnB,MAAM,WAAW,iBACd,MAAM,KAAK,aAAa,EAAE,QAAQ,MAAM,MAAM,KAAK,MACvD,CAAC,MAAM,YACP,MAAM,QAAQ,OAChB;AACE,gBAAM,eAAe;AACrB,yBAAe,MAAM;AAAA,QACzB;AAAA,MAAA;AAED,SAAA,iBAAiB,WAAW,SAAS;AAAA,IAC5C;AAAA,EACJ;AACJ;AAEA,MAAM,SAAS,CAAC,OAAY;AACrB,KAAA,oBAAoB,WAAW,SAAS;AAC/C;AAEA,MAAM,YAAY;AAAA,EACd,aAAa;AAAA,EACb,eAAe;AACnB;AAIO,MAAM,aAAa;"}