{"version":3,"file":"Timepicker.vue_vue_type_script_setup_true_lang-DAzUq2Hg.cjs","sources":["../../src/components/timepicker/useTimepickerMixins.ts","../../src/components/timepicker/Timepicker.vue"],"sourcesContent":["import { computed } from \"vue\";\nimport { matchWithGroups } from \"../datepicker/utils\";\nimport type { TimepickerProps } from \"./types\";\n\nconst AM = \"AM\" as const;\nconst PM = \"PM\" as const;\nconst HOUR_FORMAT_24 = \"24\" as const;\nconst HOUR_FORMAT_12 = \"12\" as const;\n\nexport function useTimepickerMixins(props: TimepickerProps) {\n    const localeOptions = computed(\n        () =>\n            new Intl.DateTimeFormat(props.locale, {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: props.enableSeconds ? \"numeric\" : undefined,\n            }).resolvedOptions() as Intl.DateTimeFormatOptions,\n    );\n\n    const isHourFormat24 = computed(\n        () =>\n            (props.hourFormat && props.hourFormat === HOUR_FORMAT_24) ||\n            (!props.hourFormat && !localeOptions.value.hour12),\n    );\n\n    const dtf = computed(\n        () =>\n            new Intl.DateTimeFormat(props.locale, {\n                hour: localeOptions.value.hour || \"numeric\",\n                minute: localeOptions.value.minute || \"numeric\",\n                second: props.enableSeconds\n                    ? localeOptions.value.second || \"numeric\"\n                    : undefined,\n                hourCycle: !isHourFormat24.value ? \"h12\" : \"h23\",\n            }),\n    );\n\n    const sampleTime = computed(() => {\n        const d = props.timeCreator();\n        d.setHours(10);\n        d.setSeconds(0);\n        d.setMinutes(0);\n        d.setMilliseconds(0);\n        return d;\n    });\n\n    const amString = computed(() => {\n        if (\n            dtf.value.formatToParts &&\n            typeof dtf.value.formatToParts === \"function\"\n        ) {\n            const d = sampleTime.value;\n            d.setHours(10);\n            const dayPeriod = dtf.value\n                .formatToParts(d)\n                .find((part) => part.type === \"dayPeriod\");\n            if (dayPeriod) return dayPeriod.value;\n        }\n        return AM;\n    });\n\n    const pmString = computed(() => {\n        if (\n            dtf.value.formatToParts &&\n            typeof dtf.value.formatToParts === \"function\"\n        ) {\n            const d = sampleTime.value;\n            d.setHours(20);\n            const dayPeriod = dtf.value\n                .formatToParts(d)\n                .find((part) => part.type === \"dayPeriod\");\n            if (dayPeriod) {\n                return dayPeriod.value;\n            }\n        }\n        return PM;\n    });\n\n    const meridiens = computed(() => [amString.value, pmString.value]);\n\n    const hourLiteral = computed(() => {\n        if (\n            dtf.value.formatToParts &&\n            typeof dtf.value.formatToParts === \"function\"\n        ) {\n            const d = sampleTime.value;\n            const parts = dtf.value.formatToParts(d);\n            const literal = parts.find(\n                (part, idx) => idx > 0 && parts[idx - 1].type === \"hour\",\n            );\n            if (literal) return literal.value;\n        }\n        return \":\";\n    });\n\n    const minuteLiteral = computed(() => {\n        if (\n            dtf.value.formatToParts &&\n            typeof dtf.value.formatToParts === \"function\"\n        ) {\n            const d = sampleTime.value;\n            const parts = dtf.value.formatToParts(d);\n            const literal = parts.find(\n                (part, idx) => idx > 0 && parts[idx - 1].type === \"minute\",\n            );\n            if (literal) return literal.value;\n        }\n        return \":\";\n    });\n\n    const secondLiteral = computed(() => {\n        if (\n            dtf.value.formatToParts &&\n            typeof dtf.value.formatToParts === \"function\"\n        ) {\n            const d = sampleTime.value;\n            const parts = dtf.value.formatToParts(d);\n            const literal = parts.find(\n                (part, idx) => idx > 0 && parts[idx - 1].type === \"second\",\n            );\n            if (literal) return literal.value;\n        }\n        return undefined;\n    });\n\n    function defaultTimeFormatter(time: Date): string {\n        return dtf.value.format(time);\n    }\n\n    function defaultTimeParser(time: string): Date {\n        if (!time) return null;\n\n        if (\n            dtf.value.formatToParts &&\n            typeof dtf.value.formatToParts === \"function\"\n        ) {\n            const formatRegex = dtf.value\n                .formatToParts(sampleTime.value)\n                .map((part) => {\n                    if (part.type === \"literal\") {\n                        return part.value.replace(/ /g, \"\\\\s?\");\n                    } else if (part.type === \"dayPeriod\") {\n                        return `((?!=<${part.type}>)(${amString.value}|${\n                            pmString.value\n                        }|${AM}|${PM}|${AM.toLowerCase()}|${PM.toLowerCase()})?)`;\n                    }\n                    return `((?!=<${part.type}>)\\\\d+)`;\n                })\n                .join(\"\");\n            const timeGroups = matchWithGroups(formatRegex, time);\n\n            // We do a simple validation for the group.\n            // If it is not valid, it will fallback to Date.parse below\n            timeGroups.hour = timeGroups.hour\n                ? parseInt(timeGroups.hour, 10)\n                : null;\n            timeGroups.minute = timeGroups.minute\n                ? parseInt(timeGroups.minute, 10)\n                : null;\n            timeGroups.second = timeGroups.second\n                ? parseInt(timeGroups.second, 10)\n                : null;\n            if (\n                timeGroups.hour &&\n                timeGroups.hour >= 0 &&\n                timeGroups.hour < 24 &&\n                timeGroups.minute &&\n                timeGroups.minute >= 0 &&\n                timeGroups.minute < 59\n            ) {\n                if (\n                    timeGroups.dayPeriod &&\n                    (timeGroups.dayPeriod.toLowerCase() ===\n                        pmString.value.toLowerCase() ||\n                        timeGroups.dayPeriod.toLowerCase() ===\n                            PM.toLowerCase()) &&\n                    timeGroups.hour < 12\n                ) {\n                    timeGroups.hour += 12;\n                }\n                const date = sampleTime.value;\n                date.setHours(timeGroups.hour);\n                date.setMinutes(timeGroups.minute);\n                date.setSeconds(timeGroups.second || 0);\n                return date;\n            }\n        }\n\n        // Fallback if formatToParts is not supported or if we were not able to parse a valid date\n        let am = false;\n        if (props.hourFormat === HOUR_FORMAT_12) {\n            const dateString12 = time.split(\" \");\n            time = dateString12[0];\n            am = dateString12[1] === amString.value || dateString12[1] === AM;\n        }\n        const timeSplit = time.split(\":\");\n        let hours = parseInt(timeSplit[0], 10);\n        const minutes = parseInt(timeSplit[1], 10);\n        const seconds = props.enableSeconds ? parseInt(timeSplit[2], 10) : 0;\n        if (\n            isNaN(hours) ||\n            hours < 0 ||\n            hours > 23 ||\n            (props.hourFormat === HOUR_FORMAT_12 &&\n                (hours < 1 || hours > 12)) ||\n            isNaN(minutes) ||\n            minutes < 0 ||\n            minutes > 59\n        ) {\n            return null;\n        }\n        const date = sampleTime.value;\n        date.setSeconds(seconds);\n        date.setMinutes(minutes);\n        if (props.hourFormat === HOUR_FORMAT_12) {\n            if (am && hours === 12) {\n                hours = 0;\n            } else if (!am && hours !== 12) {\n                hours += 12;\n            }\n        }\n        date.setHours(hours);\n        return new Date(date.getTime());\n    }\n\n    return {\n        defaultTimeFormatter,\n        defaultTimeParser,\n        pmString,\n        amString,\n        meridiens,\n        isHourFormat24,\n        hourLiteral,\n        minuteLiteral,\n        secondLiteral,\n    };\n}\n","<script setup lang=\"ts\">\nimport { computed, ref, watch, type PropType } from \"vue\";\n\nimport OSelect from \"../select/Select.vue\";\nimport OPickerWrapper from \"../utils/PickerWrapper.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { defineClasses, useMatchMedia, getActiveClasses } from \"@/composables\";\n\nimport { useTimepickerMixins } from \"./useTimepickerMixins\";\n\nimport type { ComponentClass } from \"@/types\";\n\n/**\n * An input with a simple dropdown/modal for selecting a time, uses native timepicker for mobile\n * @displayName Timepicker\n * @style _timepicker.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OTimepicker\",\n    configField: \"timepicker\",\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** @model */\n    modelValue: { type: Date as PropType<Date>, default: undefined },\n    /** The active state of the dropdown */\n    active: { type: Boolean, default: false },\n    /** Min time to select */\n    minTime: { type: Date as PropType<Date>, default: undefined },\n    /** Max time to select */\n    maxTime: { type: Date as PropType<Date>, default: undefined },\n    /** Display datepicker inline */\n    inline: { type: Boolean, default: false },\n    /** Input placeholder */\n    placeholder: { type: String, default: undefined },\n    /** Makes input full width when inside a grouped or addon field */\n    expanded: { type: Boolean, default: false },\n    /** Makes the input rounded */\n    rounded: { type: Boolean, default: false },\n    /** Same as native input readonly */\n    readonly: { type: Boolean, default: false },\n    /** Same as native disabled */\n    disabled: { type: Boolean, default: false },\n    /**\n     * Size of the button\n     * @values small, medium, large\n     */\n    size: {\n        type: String,\n        default: () => getOption(\"timepicker.size\"),\n    },\n    hourFormat: {\n        type: [String, Number] as PropType<\"12\" | \"24\" | 12 | 24>,\n        validator: (value: string | number) =>\n            [\"12\", \"24\", 12, 24, undefined].includes(value),\n        default: undefined,\n    },\n    incrementHours: { type: Number, default: 1 },\n    incrementMinutes: { type: Number, default: 1 },\n    incrementSeconds: { type: Number, default: 1 },\n    /** Open dropdown on focus */\n    openOnFocus: {\n        type: Boolean,\n        default: () => getOption(\"timepicker.openOnFocus\", true),\n    },\n    /** Close dropdown on click */\n    closeOnClick: {\n        type: Boolean,\n        default: () => getOption(\"timepicker.closeOnClick\", true),\n    },\n    enableSeconds: { type: Boolean, default: false },\n    defaultMinutes: { type: Number, default: undefined },\n    defaultSeconds: { type: Number, default: undefined },\n    /** Date format locale */\n    locale: {\n        type: String,\n        default: () => getOption(\"locale\"),\n    },\n    /** Custom function to format a date into a string */\n    timeFormatter: {\n        type: Function as PropType<(date: Date) => string>,\n        default: (\n            date: Date | Date[],\n            defaultFunction: (date: Date | Date[]) => string,\n        ) => getOption(\"timepicker.timeFormatter\", defaultFunction)(date),\n    },\n    /** Custom function to parse a string into a date */\n    timeParser: {\n        type: Function as PropType<(date: string) => Date>,\n        default: (date: string, defaultFunction: (date: string) => Date) =>\n            getOption(\"timepicker.timeParser\", defaultFunction)(date),\n    },\n    /** time creator function, default is `new Date()` */\n    timeCreator: {\n        type: Function as PropType<() => Date>,\n        default: () => getOption(\"timepicker.timeCreator\", () => new Date())(),\n    },\n    /** Define a list of times which can not be selected */\n    unselectableTimes: {\n        type: [Array, Function] as PropType<Date[] | ((date: Date) => boolean)>,\n        default: () => [],\n    },\n    /** Reset the time inputs when meridian changes */\n    resetOnMeridianChange: {\n        type: Boolean,\n        default: false,\n    },\n    /** Dropdown trapFocus */\n    trapFocus: {\n        type: Boolean,\n        default: () => getOption(\"timepicker.trapFocus\", true),\n    },\n    /** Dropdown position */\n    position: { type: String, default: undefined },\n    /** Enable dropdown mobile modal */\n    mobileModal: {\n        type: Boolean,\n        default: () => getOption(\"timepicker.mobileModal\", true),\n    },\n    /** Enable mobile native input if mobile agent */\n    mobileNative: {\n        type: Boolean,\n        default: () => getOption(\"timepicker.mobileNative\", true),\n    },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"timepicker.iconPack\", undefined),\n    },\n    /** Icon to be shown */\n    icon: {\n        type: String,\n        default: () => getOption(\"timepicker.icon\", undefined),\n    },\n    /** Icon to be added on the right side */\n    iconRight: {\n        type: String,\n        default: () => getOption(\"timepicker.iconRight\", undefined),\n    },\n    /** Make the icon right clickable */\n    iconRightClickable: { type: Boolean, default: false },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"timepicker.mobileBreakpoint\"),\n    },\n    /**\n     * Append the component to another part of the DOM.\n     * Set `true` to append the component to the body.\n     * In addition, any CSS selector string or an actual DOM node can be used.\n     */\n    teleport: {\n        type: [Boolean, String, Object],\n        default: () => getOption(\"timepicker.teleport\", false),\n    },\n    /** Enable html 5 native validation */\n    useHtml5Validation: {\n        type: Boolean,\n        default: () => getOption(\"useHtml5Validation\", true),\n    },\n    /** The message which is shown when a validation error occurs */\n    validationMessage: { type: String, default: undefined },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Timepicker component size */\n    sizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Timepicker component box where you choose the date */\n    boxClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Timepicker separator */\n    separatorClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Timepicker footer */\n    footerClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /**\n     * Class configuration for the internal input component\n     * @ignore\n     */\n    inputClasses: {\n        type: Object,\n        default: () => getOption(\"timepicker.inputClasses\", {}),\n    },\n    /**\n     * Class configuration for the internal dropdown component\n     * @ignore\n     */\n    dropdownClasses: {\n        type: Object,\n        default: () => getOption(\"timepicker.dropdownClasses\", {}),\n    },\n    /**\n     * Class configuration for the internal select component\n     * @ignore\n     */\n    selectClasses: {\n        type: Object,\n        default: () => getOption(\"timepicker.selectClasses\", {}),\n    },\n});\n\ndefineEmits<{\n    /**\n     * modelValue prop two-way binding\n     * @param value {Date} updated modelValue prop\n     */\n    (e: \"update:modelValue\", value: Date): void;\n    /**\n     * active prop two-way binding\n     * @param value {boolean} updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * on input focus event\n     * @param event {Event} native event\n     */\n    (e: \"focus\", event: Event): void;\n    /**\n     * on input blur event\n     * @param event {Event} native event\n     */\n    (e: \"blur\", event: Event): void;\n    /**\n     * on input invalid event\n     * @param event {Event} native event\n     */\n    (e: \"invalid\", event: Event): void;\n    /**\n     * on icon click event\n     * @param event {Event} native event\n     */\n    (e: \"icon-click\", event: Event): void;\n    /**\n     * on icon right click event\n     * @param event {Event} native event\n     */\n    (e: \"icon-right-click\", event: Event): void;\n}>();\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\nconst {\n    defaultTimeFormatter,\n    defaultTimeParser,\n    pmString,\n    amString,\n    meridiens,\n    isHourFormat24,\n    hourLiteral,\n    minuteLiteral,\n    secondLiteral,\n} = useTimepickerMixins(props);\n\nconst pickerRef = ref<InstanceType<typeof OPickerWrapper>>();\n\nconst vmodel = defineModel<Date>({ default: undefined });\n\n/** Dropdown active state */\nconst isActive = defineModel<boolean>(\"active\", { default: false });\n\nconst hoursSelected = ref();\nconst minutesSelected = ref();\nconst secondsSelected = ref();\nconst meridienSelected = ref();\n\n/**\n * When v-model is changed:\n *   1. Update internal value.\n *   2. If it's invalid, validate again.\n */\nwatch(\n    () => props.modelValue,\n    (value) => {\n        if (value) {\n            hoursSelected.value = value.getHours();\n            minutesSelected.value = value.getMinutes();\n            secondsSelected.value = value.getSeconds();\n            meridienSelected.value =\n                value.getHours() >= 12 ? pmString.value : amString.value;\n        } else {\n            hoursSelected.value = null;\n            minutesSelected.value = null;\n            secondsSelected.value = null;\n            meridienSelected.value = amString.value;\n        }\n    },\n    { immediate: true },\n);\n\n/** Format date into string */\nconst formattedValue = computed(() =>\n    (props.timeFormatter as any)(props.modelValue, defaultTimeFormatter),\n);\n\nconst nativeStep = computed(() => (props.enableSeconds ? \"1\" : null));\n\nwatch(\n    () => props.hourFormat,\n    () => {\n        if (hoursSelected.value !== null) {\n            meridienSelected.value =\n                hoursSelected.value >= 12 ? pmString.value : amString.value;\n        }\n    },\n);\n\nwatch(\n    () => props.locale,\n    (value) => {\n        // see updateInternalState default\n        if (!value) meridienSelected.value = amString.value;\n    },\n);\n\nfunction formatNumber(value: number, prependZero: boolean): string {\n    return isHourFormat24.value || prependZero ? pad(value) : String(value);\n}\n\nfunction pad(value: number): string {\n    return (value < 10 ? \"0\" : \"\") + value;\n}\n\nconst hours = computed(() => {\n    if (!props.incrementHours || props.incrementHours < 1)\n        throw new Error(\"Hour increment cannot be null or less than 1.\");\n    const hours = [];\n    const numberOfHours = isHourFormat24.value ? 24 : 12;\n    for (let i = 0; i < numberOfHours; i += props.incrementHours) {\n        let value = i;\n        let label = value;\n        if (!isHourFormat24.value) {\n            value = i + 1;\n            label = value;\n            if (meridienSelected.value === amString.value) {\n                if (value === 12) {\n                    value = 0;\n                }\n            } else if (meridienSelected.value === pmString.value) {\n                if (value !== 12) {\n                    value += 12;\n                }\n            }\n        }\n        hours.push({\n            label: formatNumber(label, false),\n            value: value,\n        });\n    }\n    return hours;\n});\n\nconst minutes = computed(() => {\n    if (!props.incrementMinutes || props.incrementMinutes < 1)\n        throw new Error(\"Minute increment cannot be null or less than 1.\");\n    const minutes = [];\n    for (let i = 0; i < 60; i += props.incrementMinutes) {\n        minutes.push({\n            label: formatNumber(i, true),\n            value: i,\n        });\n    }\n    return minutes;\n});\n\nconst seconds = computed(() => {\n    if (!props.incrementSeconds || props.incrementSeconds < 1)\n        throw new Error(\"Second increment cannot be null or less than 1.\");\n    const seconds = [];\n    for (let i = 0; i < 60; i += props.incrementSeconds) {\n        seconds.push({\n            label: formatNumber(i, true),\n            value: i,\n        });\n    }\n    return seconds;\n});\n\nfunction isHourDisabled(hour: number): boolean {\n    let disabled = false;\n    if (props.minTime) {\n        const minHours = props.minTime.getHours();\n        const noMinutesAvailable = minutes.value.every((minute) => {\n            return isMinuteDisabledForHour(hour, minute.value);\n        });\n        disabled = hour < minHours || noMinutesAvailable;\n    }\n    if (props.maxTime) {\n        if (!disabled) {\n            const maxHours = props.maxTime.getHours();\n            disabled = hour > maxHours;\n        }\n    }\n\n    if (props.unselectableTimes && !disabled) {\n        if (typeof props.unselectableTimes === \"function\") {\n            const date = new Date();\n            date.setHours(hour);\n            date.setMinutes(minutesSelected.value);\n            date.setSeconds(secondsSelected.value);\n            return props.unselectableTimes(date);\n        } else {\n            const unselectable = props.unselectableTimes.filter((time) => {\n                if (props.enableSeconds && secondsSelected.value !== null) {\n                    return (\n                        time.getHours() === hour &&\n                        time.getMinutes() === minutesSelected.value &&\n                        time.getSeconds() === secondsSelected.value\n                    );\n                } else if (minutesSelected.value !== null) {\n                    return (\n                        time.getHours() === hour &&\n                        time.getMinutes() === minutesSelected.value\n                    );\n                }\n                return false;\n            });\n            if (unselectable.length > 0) {\n                disabled = true;\n            } else {\n                disabled = minutes.value.every((minute) => {\n                    return (\n                        (props.unselectableTimes as Date[]).filter((time) => {\n                            return (\n                                time.getHours() === hour &&\n                                time.getMinutes() === minute.value\n                            );\n                        }).length > 0\n                    );\n                });\n            }\n        }\n    }\n    return disabled;\n}\n\nfunction isMinuteDisabledForHour(hour: number, minute: number): boolean {\n    let disabled = false;\n    if (props.minTime) {\n        const minHours = props.minTime.getHours();\n        const minMinutes = props.minTime.getMinutes();\n        disabled = hour === minHours && minute < minMinutes;\n    }\n    if (props.maxTime) {\n        if (!disabled) {\n            const maxHours = props.maxTime.getHours();\n            const maxMinutes = props.maxTime.getMinutes();\n            disabled = hour === maxHours && minute > maxMinutes;\n        }\n    }\n    return disabled;\n}\n\nfunction isMinuteDisabled(minute: number): boolean {\n    if (hoursSelected.value === null) return false;\n\n    let disabled = isHourDisabled(hoursSelected.value)\n        ? true\n        : isMinuteDisabledForHour(hoursSelected.value, minute);\n\n    if (props.unselectableTimes && !disabled) {\n        if (typeof props.unselectableTimes === \"function\") {\n            const date = new Date();\n            date.setHours(hoursSelected.value);\n            date.setMinutes(minute);\n            date.setSeconds(secondsSelected.value);\n            return props.unselectableTimes(date);\n        } else {\n            const unselectable = props.unselectableTimes.filter((time) => {\n                if (props.enableSeconds && secondsSelected.value !== null) {\n                    return (\n                        time.getHours() === hoursSelected.value &&\n                        time.getMinutes() === minute &&\n                        time.getSeconds() === secondsSelected.value\n                    );\n                } else {\n                    return (\n                        time.getHours() === hoursSelected.value &&\n                        time.getMinutes() === minute\n                    );\n                }\n            });\n            disabled = unselectable.length > 0;\n        }\n    }\n}\n\nfunction isSecondDisabled(second: number): boolean {\n    if (minutesSelected.value == null) return false;\n    let disabled = false;\n\n    if (isMinuteDisabled(minutesSelected.value)) {\n        disabled = true;\n    } else {\n        if (props.minTime) {\n            const minHours = props.minTime.getHours();\n            const minMinutes = props.minTime.getMinutes();\n            const minSeconds = props.minTime.getSeconds();\n            disabled =\n                hoursSelected.value === minHours &&\n                minutesSelected.value === minMinutes &&\n                second < minSeconds;\n        }\n        if (props.maxTime) {\n            if (!disabled) {\n                const maxHours = props.maxTime.getHours();\n                const maxMinutes = props.maxTime.getMinutes();\n                const maxSeconds = props.maxTime.getSeconds();\n                disabled =\n                    hoursSelected.value === maxHours &&\n                    minutesSelected.value === maxMinutes &&\n                    second > maxSeconds;\n            }\n        }\n    }\n    if (props.unselectableTimes && !disabled) {\n        if (typeof props.unselectableTimes === \"function\") {\n            const date = new Date();\n            date.setHours(hoursSelected.value);\n            date.setMinutes(minutesSelected.value);\n            date.setSeconds(second);\n            return props.unselectableTimes(date);\n        } else {\n            const unselectable = props.unselectableTimes.filter((time) => {\n                return (\n                    time.getHours() === hoursSelected.value &&\n                    time.getMinutes() === minutesSelected.value &&\n                    time.getSeconds() === second\n                );\n            });\n            disabled = unselectable.length > 0;\n        }\n    }\n}\n\nfunction isMeridienDisabled(meridienString: string): boolean {\n    const offset = meridienString == \"AM\" ? 0 : 12;\n    for (let i = 0; i < 12; i++) {\n        if (!isHourDisabled(i + offset)) return false;\n    }\n    return true;\n}\n\nfunction updateDateSelected(\n    hours: number,\n    minutes: number,\n    seconds: number,\n    meridiens,\n): void {\n    if (\n        hours != null &&\n        minutes != null &&\n        ((!isHourFormat24.value && meridiens !== null) || isHourFormat24.value)\n    ) {\n        let time: Date = null;\n        if (vmodel.value) {\n            time = new Date(vmodel.value);\n        } else {\n            time = props.timeCreator();\n            time.setMilliseconds(0);\n        }\n        time.setHours(hours);\n        time.setMinutes(minutes);\n        time.setSeconds(seconds);\n        if (!isNaN(time.getTime())) {\n            vmodel.value = new Date(time.getTime());\n        }\n    }\n}\n\n/** Format date into string 'HH-MM-SS'*/\nfunction formatNative(value: Date): string {\n    const date = new Date(value);\n    // return null if no value is given or value can't parse to proper date\n    if (!value || !date || isNaN(date.getTime())) return null;\n\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    return (\n        formatNumber(hours, true) +\n        \":\" +\n        formatNumber(minutes, true) +\n        \":\" +\n        formatNumber(seconds, true)\n    );\n}\n\n// --- Event Handler ---\n\nfunction onMeridienChange(value: string): void {\n    if (hoursSelected.value !== null && props.resetOnMeridianChange) {\n        hoursSelected.value = null;\n        minutesSelected.value = null;\n        secondsSelected.value = null;\n        vmodel.value = null;\n    } else if (hoursSelected.value !== null) {\n        if (value === pmString.value) hoursSelected.value += 12;\n        else if (value === amString.value) hoursSelected.value -= 12;\n    }\n    updateDateSelected(\n        hoursSelected.value,\n        minutesSelected.value,\n        props.enableSeconds ? secondsSelected.value : 0,\n        value,\n    );\n}\n\nfunction onHoursChange(value: string): void {\n    if (!minutesSelected.value && typeof props.defaultMinutes !== \"undefined\")\n        minutesSelected.value = props.defaultMinutes;\n    if (!secondsSelected.value && typeof props.defaultSeconds !== \"undefined\")\n        secondsSelected.value = props.defaultSeconds;\n\n    updateDateSelected(\n        parseInt(value, 10),\n        minutesSelected.value,\n        props.enableSeconds ? secondsSelected.value : 0,\n        meridienSelected.value,\n    );\n}\n\nfunction onMinutesChange(value: string): void {\n    if (!secondsSelected.value && props.defaultSeconds)\n        secondsSelected.value = props.defaultSeconds;\n\n    updateDateSelected(\n        hoursSelected.value,\n        parseInt(value, 10),\n        props.enableSeconds ? secondsSelected.value : 0,\n        meridienSelected.value,\n    );\n}\n\nfunction onSecondsChange(value: string): void {\n    updateDateSelected(\n        hoursSelected.value,\n        minutesSelected.value,\n        parseInt(value, 10),\n        meridienSelected.value,\n    );\n}\n\n/** Parse string into date */\nfunction onChange(value: string): void {\n    const date = (props.timeParser as any)(value, defaultTimeParser);\n    vmodel.value = date ? date : null;\n}\n\n/** Parse time from string */\nfunction onChangeNativePicker(date: string): void {\n    if (date) {\n        let time = null;\n        if (vmodel.value) {\n            time = new Date(vmodel.value);\n        } else {\n            time = props.timeCreator();\n            time.setMilliseconds(0);\n        }\n        const t = date.split(\":\");\n        time.setHours(parseInt(t[0], 10));\n        time.setMinutes(parseInt(t[1], 10));\n        time.setSeconds(t[2] ? parseInt(t[2], 10) : 0);\n        vmodel.value = new Date(time.getTime());\n    } else {\n        vmodel.value = null;\n    }\n}\n\n// --- Computed Component Classes ---\n\nconst selectSelectClasses = defineClasses([\n    \"selectClasses.selectClass\",\n    \"o-tpck__select\",\n]);\n\nconst selectPlaceholderClasses = defineClasses([\n    \"selectClasses.placeholderClass\",\n    \"o-tpck__select-placeholder\",\n]);\n\nconst selectBind = computed(() => ({\n    \"select-class\": getActiveClasses(selectSelectClasses.value),\n    \"placeholder-class\": getActiveClasses(selectPlaceholderClasses.value),\n    ...props.selectClasses,\n}));\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-tpck\"],\n    [\n        \"sizeClass\",\n        \"o-tpck--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n    [\"mobileClass\", \"o-tpck--mobile\", null, isMobile],\n);\n\nconst separatorClasses = defineClasses([\"separatorClass\", \"o-tpck__separtor\"]);\n\nconst footerClasses = defineClasses([\"footerClass\", \"o-tpck__footer\"]);\n\nconst dropdownClass = defineClasses([\n    \"dropdownClasses.rootClass\",\n    \"o-tpck__dropdown\",\n]);\n\nconst boxClasses = defineClasses([\"boxClass\", \"o-tpck__box\"]);\nconst boxClassBind = computed(() => getActiveClasses(boxClasses.value));\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ focus: () => pickerRef.value?.focus() });\n</script>\n\n<template>\n    <OPickerWrapper\n        ref=\"pickerRef\"\n        v-model:active=\"isActive\"\n        data-oruga=\"timepicker\"\n        :value=\"vmodel\"\n        :picker=\"props\"\n        :formatted-value=\"formattedValue\"\n        native-type=\"time\"\n        :native-value=\"formatNative(vmodel)\"\n        :native-max=\"formatNative(maxTime)\"\n        :native-min=\"formatNative(minTime)\"\n        :native-step=\"nativeStep\"\n        :dropdown-classes=\"dropdownClass\"\n        :root-classes=\"rootClasses\"\n        :box-class=\"boxClassBind\"\n        @change=\"onChange\"\n        @native-change=\"onChangeNativePicker\"\n        @focus=\"$emit('focus', $event)\"\n        @blur=\"$emit('blur', $event)\"\n        @invalid=\"$emit('invalid', $event)\"\n        @icon-click=\"$emit('icon-click', $event)\"\n        @icon-right-click=\"$emit('icon-right-click', $event)\">\n        <template v-if=\"$slots.trigger\" #trigger>\n            <!--\n                @slot Override the trigger\n            -->\n            <slot name=\"trigger\" />\n        </template>\n        <o-select\n            v-bind=\"selectBind\"\n            v-model=\"hoursSelected\"\n            override\n            :disabled=\"disabled\"\n            placeholder=\"00\"\n            @change=\"onHoursChange($event.target.value)\">\n            <option\n                v-for=\"hour in hours\"\n                :key=\"hour.value\"\n                :value=\"hour.value\"\n                :disabled=\"isHourDisabled(hour.value)\">\n                {{ hour.label }}\n            </option>\n        </o-select>\n        <span :class=\"separatorClasses\">{{ hourLiteral }}</span>\n        <o-select\n            v-bind=\"selectBind\"\n            v-model=\"minutesSelected\"\n            override\n            :disabled=\"disabled\"\n            placeholder=\"00\"\n            @change=\"onMinutesChange($event.target.value)\">\n            <option\n                v-for=\"minute in minutes\"\n                :key=\"minute.value\"\n                :value=\"minute.value\"\n                :disabled=\"isMinuteDisabled(minute.value)\">\n                {{ minute.label }}\n            </option>\n        </o-select>\n        <template v-if=\"enableSeconds\">\n            <span :class=\"separatorClasses\">{{ minuteLiteral }}</span>\n            <o-select\n                v-bind=\"selectBind\"\n                v-model=\"secondsSelected\"\n                override\n                :disabled=\"disabled\"\n                placeholder=\"00\"\n                @change=\"onSecondsChange($event.target.value)\">\n                <option\n                    v-for=\"second in seconds\"\n                    :key=\"second.value\"\n                    :value=\"second.value\"\n                    :disabled=\"isSecondDisabled(second.value)\">\n                    {{ second.label }}\n                </option>\n            </o-select>\n            <span :class=\"separatorClasses\">{{ secondLiteral }}</span>\n        </template>\n        <o-select\n            v-if=\"!isHourFormat24\"\n            v-bind=\"selectBind\"\n            v-model=\"meridienSelected\"\n            override\n            :disabled=\"disabled\"\n            @change=\"onMeridienChange($event.target.value)\">\n            <option\n                v-for=\"meridien in meridiens\"\n                :key=\"meridien\"\n                :value=\"meridien\"\n                :disabled=\"isMeridienDisabled(meridien)\">\n                {{ meridien }}\n            </option>\n        </o-select>\n\n        <footer v-if=\"$slots.default\" :class=\"footerClasses\">\n            <!--\n                @slot Define an additional content on footer\n            -->\n            <slot />\n        </footer>\n    </OPickerWrapper>\n</template>\n"],"names":["computed","matchWithGroups","date","useMatchMedia","ref","_useModel","watch","hours","minutes","seconds","meridiens","defineClasses","getActiveClasses"],"mappings":"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"}