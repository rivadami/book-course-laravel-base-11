{"version":3,"file":"Input.vue_vue_type_script_setup_true_lang-CRcBgGKf.cjs","sources":["../../src/components/input/Input.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport {\n    ref,\n    computed,\n    nextTick,\n    watch,\n    onMounted,\n    type StyleValue,\n    type PropType,\n} from \"vue\";\n\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { uuid } from \"@/utils/helpers\";\nimport { defineClasses, useInputHandler } from \"@/composables\";\n\nimport { injectField } from \"../field/fieldInjection\";\n\nimport type { ComponentClass } from \"@/types\";\n\n/**\n * Get user Input. Use with Field to access all functionalities\n * @displayName Input\n * @style _input.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OInput\",\n    configField: \"input\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** @model */\n    modelValue: { type: [String, Number], default: \"\" },\n    /**\n     * Input type, like native\n     * @values Any native input type, and textarea\n     */\n    type: { type: String, default: \"text\" },\n    /**\n     * Size of the control\n     * @values small, medium, large\n     */\n    size: {\n        type: String,\n        default: () => getOption(\"input.size\"),\n    },\n    /**\n     * Color of the control\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    variant: {\n        type: String,\n        default: () => getOption(\"input.variant\"),\n    },\n    /** Input placeholder */\n    placeholder: { type: String, default: undefined },\n    /** Makes input full width when inside a grouped or addon field */\n    expanded: { type: Boolean, default: false },\n    /** Makes the element rounded */\n    rounded: { type: Boolean, default: false },\n    /** Same as native disabled */\n    disabled: { type: Boolean, default: false },\n    /** Adds the reveal password functionality */\n    passwordReveal: { type: Boolean, default: false },\n    /** Same as native maxlength, plus character counter */\n    maxlength: { type: [Number, String], default: undefined },\n    /** Show character counter when maxlength prop is passed */\n    counter: {\n        type: Boolean,\n        default: () => getOption(\"input.counter\", false),\n    },\n    /** Automatically adjust height in textarea */\n    autosize: { type: Boolean, default: false },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"input.iconPack\", undefined),\n    },\n    /** Icon to be shown */\n    icon: {\n        type: String,\n        default: () => getOption(\"input.icon\", undefined),\n    },\n    /** Makes the icon clickable */\n    iconClickable: { type: Boolean, default: false },\n    /** Icon to be added on the right side */\n    iconRight: {\n        type: String,\n        default: () => getOption(\"input.iconRight\", undefined),\n    },\n    /** Make the icon right clickable */\n    iconRightClickable: { type: Boolean, default: false },\n    /** Variant of right icon */\n    iconRightVariant: { type: String, default: undefined },\n    /** Add a button/icon to clear the inputed text */\n    clearable: {\n        type: Boolean,\n        default: () => getOption(\"input.clearable\", false),\n    },\n    /** Icon name to be added on the clear button */\n    clearIcon: {\n        type: String,\n        default: () => getOption(\"input.clearIcon\", \"close-circle\"),\n    },\n    /** Show status icon using field and variant prop */\n    statusIcon: {\n        type: Boolean,\n        default: () => getOption(\"statusIcon\", true),\n    },\n    /** Native options to use in HTML5 validation */\n    autocomplete: {\n        type: String,\n        default: () => getOption(\"input.autocomplete\", \"off\"),\n    },\n    /** Same as native id. Also set the for label for o-field wrapper. */\n    id: { type: String, default: () => uuid() },\n    /** Enable html 5 native validation */\n    useHtml5Validation: {\n        type: Boolean,\n        default: () => getOption(\"useHtml5Validation\", true),\n    },\n    /** The message which is shown when a validation error occurs */\n    validationMessage: { type: String, default: undefined },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of input when expanded */\n    expandedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of input when type textarea */\n    textareaClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the left icon space inside the input */\n    iconLeftSpaceClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the right icon space inside the input */\n    iconRightSpaceClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the native input element */\n    inputClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of input when rounded */\n    roundedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of input when disabled */\n    disabledClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the left icon */\n    iconLeftClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the right icon */\n    iconRightClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class to display when a right icon is used */\n    hasIconRightClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the counter element */\n    counterClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the input size */\n    sizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the input variant */\n    variantClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * modelValue prop two-way binding\n     * @param value {string | number} updated modelValue prop\n     */\n    (e: \"update:modelValue\", value: string | number): void;\n    /**\n     * on input change event\n     * @param value {string | number} input value\n     * @param event {Event} native event\n     */\n    (e: \"input\", value: string | number, event: Event): void;\n    /**\n     * on input focus event\n     * @param event {Event} native event\n     */\n    (e: \"focus\", event: Event): void;\n    /**\n     * on input blur event\n     * @param event {Event} native event\n     */\n    (e: \"blur\", event: Event): void;\n    /**\n     * on input invalid event\n     * @param event {Event} native event\n     */\n    (e: \"invalid\", event: Event): void;\n    /**\n     * on icon click event\n     * @param event {Event} native event\n     */\n    (e: \"icon-click\", event: Event): void;\n    /**\n     * on icon right click event\n     * @param event {Event} native event\n     */\n    (e: \"icon-right-click\", event: Event): void;\n}>();\n\n// --- Validation Feature ---\n\nconst inputRef = ref<HTMLInputElement>();\nconst textareaRef = ref<HTMLInputElement>();\n\nconst elementRef = computed<HTMLInputElement>(() =>\n    props.type === \"textarea\" ? textareaRef.value : inputRef.value,\n);\n\n// use form input functionalities\nconst {\n    checkHtml5Validity,\n    onBlur,\n    onFocus,\n    onInvalid,\n    setFocus,\n    isValid,\n    isFocused,\n} = useInputHandler(elementRef, emits, props);\n\n// inject parent field component if used inside one\nconst { parentField, statusVariant, statusVariantIcon } = injectField();\n\nconst vmodel = defineModel<string | number>({ default: \"\" });\n\n// if id is given set as `for` property on o-field wrapper\nif (props.id) parentField?.value?.setInputId(props.id);\n\n/** Get value length */\nconst valueLength = computed(() =>\n    typeof vmodel.value === \"string\"\n        ? vmodel.value.length\n        : typeof vmodel.value === \"number\"\n          ? vmodel.value.toString().length\n          : 0,\n);\n\nonMounted(() => {\n    /**\n     * When v-model is changed:\n     *  1. Set parent field filled state.\n     *  2. Resize textarea input\n     *  3. Check html5 valdiation\n     */\n    watch(\n        () => vmodel.value,\n        (value) => {\n            if (parentField?.value) parentField.value.setFilled(!!value);\n            if (props.autosize) resize();\n            if (!isValid.value) nextTick(() => checkHtml5Validity());\n        },\n        { immediate: true },\n    );\n});\n\nconst height = ref(\"auto\");\n\nfunction resize(): void {\n    height.value = \"auto\";\n    nextTick(() => {\n        if (!textareaRef.value) return;\n        const scrollHeight = textareaRef.value.scrollHeight;\n        height.value = scrollHeight + \"px\";\n    });\n}\n\n/** Computed inline styles for autoresize */\nconst computedStyles = computed(\n    (): StyleValue =>\n        props.autosize\n            ? {\n                  resize: \"none\",\n                  height: height.value,\n                  overflow: \"hidden\",\n              }\n            : {},\n);\n\nfunction onInput(event: Event): void {\n    emits(\"input\", (event.target as HTMLInputElement).value, event);\n}\n\n// --- Icon Feature ---\n\nconst hasIconRight = computed(() => {\n    return !!(\n        props.passwordReveal ||\n        (props.statusIcon && statusVariantIcon.value) ||\n        (props.clearable && vmodel.value && props.clearIcon) ||\n        props.iconRight\n    );\n});\n\nconst computedIconRight = computed(() => {\n    if (props.passwordReveal) {\n        return passwordVisibleIcon.value;\n    } else if (props.clearable && vmodel.value && props.clearIcon) {\n        return props.clearIcon;\n    } else if (props.iconRight) {\n        return props.iconRight;\n    }\n    return statusVariantIcon.value;\n});\n\nconst computedIconRightVariant = computed(() =>\n    props.passwordReveal || props.iconRight\n        ? props.iconRightVariant || props.variant || null\n        : statusVariant.value,\n);\n\nfunction iconClick(event: Event): void {\n    emits(\"icon-click\", event);\n    nextTick(() => setFocus());\n}\n\nfunction rightIconClick(event: Event): void {\n    if (props.passwordReveal) togglePasswordVisibility();\n    else if (props.clearable) vmodel.value = \"\";\n    if (props.iconRightClickable) {\n        emits(\"icon-right-click\", event);\n        nextTick(() => setFocus());\n    }\n}\n\n// --- Password Visability Feature ---\n\nconst isPasswordVisible = ref(false);\n\nconst inputType = computed(() => {\n    if (props.passwordReveal) {\n        return isPasswordVisible.value ? \"text\" : \"password\";\n    } else {\n        return props.type;\n    }\n});\n\n/** Current password-reveal icon name. */\nconst passwordVisibleIcon = computed(() =>\n    !isPasswordVisible.value ? \"eye\" : \"eye-off\",\n);\n\n/**\n * Toggle the visibility of a password-reveal input\n * by changing the type and focus the input right away.\n */\nfunction togglePasswordVisibility(): void {\n    isPasswordVisible.value = !isPasswordVisible.value;\n    nextTick(() => setFocus());\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-input__wrapper\"],\n    [\n        \"expandedClass\",\n        \"o-input__wrapper--expanded\",\n        null,\n        computed(() => props.expanded),\n    ],\n    [\n        \"hasIconRightClass\",\n        \"o-input__wrapper--has-icon-right\",\n        null,\n        hasIconRight,\n    ],\n);\n\nconst inputClasses = defineClasses(\n    [\"inputClass\", \"o-input\"],\n    [\"roundedClass\", \"o-input--rounded\", null, computed(() => props.rounded)],\n    [\n        \"sizeClass\",\n        \"o-input--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n    [\n        \"variantClass\",\n        \"o-input--\",\n        computed(() => statusVariant.value || props.variant),\n        computed(() => !!statusVariant.value || !!props.variant),\n    ],\n    [\n        \"disabledClass\",\n        \"o-input--disabled\",\n        null,\n        computed(() => props.disabled),\n    ],\n    [\n        \"textareaClass\",\n        \"o-input__textarea\",\n        null,\n        computed(() => props.type === \"textarea\"),\n    ],\n    [\n        \"iconLeftSpaceClass\",\n        \"o-input--iconspace-left\",\n        null,\n        computed(() => !!props.icon),\n    ],\n    [\"iconRightSpaceClass\", \"o-input--iconspace-right\", null, hasIconRight],\n);\n\nconst iconLeftClasses = defineClasses([\"iconLeftClass\", \"o-input__icon-left\"]);\n\nconst iconRightClasses = defineClasses([\n    \"iconRightClass\",\n    \"o-input__icon-right\",\n]);\n\nconst counterClasses = defineClasses([\"counterClass\", \"o-input__counter\"]);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ focus: setFocus });\n</script>\n\n<template>\n    <div data-oruga=\"input\" :class=\"rootClasses\">\n        <input\n            v-if=\"type !== 'textarea'\"\n            v-bind=\"$attrs\"\n            :id=\"id\"\n            ref=\"inputRef\"\n            v-model=\"vmodel\"\n            :data-oruga-input=\"inputType\"\n            :type=\"inputType\"\n            :class=\"inputClasses\"\n            :maxlength=\"maxlength\"\n            :autocomplete=\"autocomplete\"\n            :placeholder=\"placeholder\"\n            :disabled=\"disabled\"\n            @blur=\"onBlur\"\n            @focus=\"onFocus\"\n            @invalid=\"onInvalid\"\n            @input=\"onInput\" />\n\n        <textarea\n            v-else\n            v-bind=\"$attrs\"\n            :id=\"id\"\n            ref=\"textareaRef\"\n            v-model=\"vmodel\"\n            data-oruga-input=\"textarea\"\n            :class=\"inputClasses\"\n            :maxlength=\"maxlength\"\n            :style=\"computedStyles\"\n            :placeholder=\"placeholder\"\n            :disabled=\"disabled\"\n            @blur=\"onBlur\"\n            @focus=\"onFocus\"\n            @invalid=\"onInvalid\"\n            @input=\"onInput\" />\n\n        <o-icon\n            v-if=\"icon\"\n            :class=\"iconLeftClasses\"\n            :clickable=\"iconClickable\"\n            :icon=\"icon\"\n            :pack=\"iconPack\"\n            :size=\"size\"\n            @click=\"iconClick\" />\n\n        <o-icon\n            v-if=\"hasIconRight\"\n            :class=\"iconRightClasses\"\n            :clickable=\"passwordReveal || clearable || iconRightClickable\"\n            :icon=\"computedIconRight\"\n            :pack=\"iconPack\"\n            :size=\"size\"\n            :variant=\"computedIconRightVariant\"\n            both\n            @click=\"rightIconClick\" />\n\n        <small\n            v-if=\"maxlength && counter && isFocused && type !== 'number'\"\n            :class=\"counterClasses\">\n            {{ valueLength }} / {{ maxlength }}\n        </small>\n    </div>\n</template>\n"],"names":["ref","computed","useInputHandler","injectField","_useModel","onMounted","watch","nextTick","defineClasses"],"mappings":"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"}