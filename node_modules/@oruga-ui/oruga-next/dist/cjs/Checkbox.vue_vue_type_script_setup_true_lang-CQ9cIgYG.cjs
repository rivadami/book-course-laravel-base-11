"use strict";
/*! Oruga v0.8.12 | MIT License | github.com/oruga-ui/oruga */
const vue = require("vue");
const config = require("./config-BGSKriL-.cjs");
const defineClasses = require("./defineClasses-hfDvmFPC.cjs");
const usePropValue = require("./usePropValue-Bx9vNp-l.cjs");
const useInputHandler = require("./useInputHandler-C-UCnEhN.cjs");
const _hoisted_1 = ["aria-checked"];
const _hoisted_2 = ["disabled", "required", "name", "autocomplete", "value", ".indeterminate", "true-value", "false-value"];
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    isOruga: true,
    name: "OCheckbox",
    configField: "checkbox",
    inheritAttrs: false
  },
  __name: "Checkbox",
  props: {
    /** Override existing theme classes completely */
    override: { type: Boolean, default: void 0 },
    /** @model */
    modelValue: { type: [String, Number, Boolean, Array], default: void 0 },
    /**
     * Color of the control
     * @values primary, info, success, warning, danger, and any other custom color
     */
    variant: {
      type: String,
      default: () => config.getOption("checkbox.variant")
    },
    /**
     * Size of the control
     * @values small, medium, large
     */
    size: {
      type: String,
      default: () => config.getOption("checkbox.size")
    },
    /** Input label, unnecessary when default slot is used */
    label: { type: String, default: void 0 },
    /** Same as native indeterminate */
    indeterminate: { type: Boolean, default: false },
    /** Same as native value */
    nativeValue: { type: [String, Number, Boolean], default: void 0 },
    /** Same as native disabled */
    disabled: { type: Boolean, default: false },
    /** Same as native required */
    required: { type: Boolean, default: false },
    /** Same as native name */
    name: { type: String, default: void 0 },
    /** Overrides the returned value when it's checked */
    trueValue: { type: [String, Number, Boolean], default: true },
    /** Overrides the returned value when it's not checked */
    falseValue: { type: [String, Number, Boolean], default: false },
    /** Same as native autocomplete options to use in HTML5 validation */
    autocomplete: {
      type: String,
      default: () => config.getOption("checkbox.autocomplete", "off")
    },
    /** Enable html 5 native validation */
    useHtml5Validation: {
      type: Boolean,
      default: () => config.getOption("useHtml5Validation", true)
    },
    // class props (will not be displayed in the docs)
    /** Class of the root element */
    rootClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class when checkbox is disabled */
    disabledClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of the root element when checked */
    checkedClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of the checkbox input */
    inputClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of the checkbox input when checked */
    inputCheckedClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class when checkbox is indeterminate */
    indeterminateClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of the checkbox labe */
    labelClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of the checkbox size */
    sizeClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of the checkbox variant */
    variantClass: {
      type: [String, Array, Function],
      default: void 0
    }
  },
  emits: ["update:modelValue", "input", "update:indeterminate", "focus", "blur", "invalid"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const inputRef = vue.ref();
    const { onBlur, onFocus, onInvalid, setFocus } = useInputHandler.useInputHandler(
      inputRef,
      emits,
      props
    );
    const vmodel = usePropValue.useVModelBinding(props, emits, { passive: true });
    const isIndeterminate = usePropValue.usePropBinding("indeterminate", props, emits);
    const isChecked = vue.computed(
      () => vmodel.value === props.trueValue || Array.isArray(vmodel.value) && vmodel.value.includes(props.nativeValue)
    );
    function onInput(event) {
      emits("input", vmodel.value, event);
    }
    const rootClasses = defineClasses.defineClasses(
      ["rootClass", "o-chk"],
      ["checkedClass", "o-chk--checked", null, isChecked],
      [
        "sizeClass",
        "o-chk--",
        vue.computed(() => props.size),
        vue.computed(() => !!props.size)
      ],
      ["disabledClass", "o-chk--disabled", null, vue.computed(() => props.disabled)],
      [
        "variantClass",
        "o-chk--",
        vue.computed(() => props.variant),
        vue.computed(() => !!props.variant)
      ]
    );
    const inputClasses = defineClasses.defineClasses(
      ["inputClass", "o-chk__input"],
      ["inputCheckedClass", "o-chk__input--checked", null, isChecked],
      [
        "indeterminateClass",
        "o-chk__input--indeterminate",
        null,
        isIndeterminate
      ]
    );
    const labelClasses = defineClasses.defineClasses(["labelClass", "o-chk__label"]);
    __expose({ focus: setFocus });
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock("label", {
        ref: "label",
        class: vue.normalizeClass(vue.unref(rootClasses)),
        "data-oruga": "checkbox",
        role: "checkbox",
        "aria-checked": isChecked.value,
        onClick: _cache[5] || (_cache[5] = vue.withModifiers(
          //@ts-ignore
          (...args) => vue.unref(setFocus) && vue.unref(setFocus)(...args),
          ["stop"]
        )),
        onKeydown: _cache[6] || (_cache[6] = vue.withKeys(vue.withModifiers(
          //@ts-ignore
          (...args) => vue.unref(setFocus) && vue.unref(setFocus)(...args),
          ["prevent"]
        ), ["enter"]))
      }, [
        vue.withDirectives(vue.createElementVNode("input", vue.mergeProps(_ctx.$attrs, {
          ref_key: "inputRef",
          ref: inputRef,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vue.isRef(vmodel) ? vmodel.value = $event : null),
          type: "checkbox",
          "data-oruga-input": "checkbox",
          class: vue.unref(inputClasses),
          disabled: __props.disabled,
          required: __props.required,
          name: __props.name,
          autocomplete: __props.autocomplete,
          value: __props.nativeValue,
          ".indeterminate": __props.indeterminate,
          "true-value": __props.trueValue,
          "false-value": __props.falseValue,
          onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {
          }, ["stop"])),
          onBlur: _cache[2] || (_cache[2] = //@ts-ignore
          (...args) => vue.unref(onBlur) && vue.unref(onBlur)(...args)),
          onFocus: _cache[3] || (_cache[3] = //@ts-ignore
          (...args) => vue.unref(onFocus) && vue.unref(onFocus)(...args)),
          onInvalid: _cache[4] || (_cache[4] = //@ts-ignore
          (...args) => vue.unref(onInvalid) && vue.unref(onInvalid)(...args)),
          onInput
        }), null, 48, _hoisted_2), [
          [vue.vModelCheckbox, vue.unref(vmodel)]
        ]),
        __props.label || _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("span", {
          key: 0,
          class: vue.normalizeClass(vue.unref(labelClasses))
        }, [
          vue.renderSlot(_ctx.$slots, "default", {}, () => [
            vue.createTextVNode(vue.toDisplayString(__props.label), 1)
          ])
        ], 2)) : vue.createCommentVNode("", true)
      ], 42, _hoisted_1);
    };
  }
});
exports._sfc_main = _sfc_main;
//# sourceMappingURL=Checkbox.vue_vue_type_script_setup_true_lang-CQ9cIgYG.cjs.map
