{"version":3,"file":"Pagination.vue_vue_type_script_setup_true_lang-OxqZTgIt.cjs","sources":["../../src/components/pagination/PaginationButton.vue","../../src/components/pagination/Pagination.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, type PropType } from \"vue\";\n\nimport type { ClassBind, DynamicComponent } from \"@/types\";\n\ndefineOptions({\n    isOruga: true,\n    name: \"OPaginationButton\",\n    configField: \"pagination\",\n});\n\nconst props = defineProps({\n    number: { type: Number, default: undefined },\n    isCurrent: { type: Boolean, default: false },\n    click: {\n        type: Function as PropType<(event: Event) => void>,\n        required: true,\n    },\n    ariaLabel: { type: String, default: undefined },\n    disabled: { type: Boolean, default: false },\n    tag: {\n        type: [String, Object, Function] as PropType<DynamicComponent>,\n        default: \"button\" as DynamicComponent,\n    },\n    class: { type: String, default: undefined },\n    linkClass: {\n        type: Array as PropType<ClassBind[]>,\n        required: true,\n    },\n    linkCurrentClass: {\n        type: Array as PropType<ClassBind[]>,\n        required: true,\n    },\n});\n\n// --- Computed Component Classes ---\n\nconst linkClasses = computed(() => [\n    ...props.linkClass,\n    props.class,\n    ...(props.isCurrent ? props.linkCurrentClass : []),\n]);\n</script>\n\n<template>\n    <component\n        :is=\"tag\"\n        role=\"button\"\n        :tabindex=\"disabled ? null : 0\"\n        :disabled=\"disabled\"\n        :class=\"linkClasses\"\n        v-bind=\"$attrs\"\n        :aria-label=\"ariaLabel\"\n        :aria-current=\"isCurrent\"\n        @click.prevent=\"click\"\n        @keydown.enter.prevent=\"click\">\n        <slot>{{ number }}</slot>\n    </component>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, watch, nextTick, type PropType } from \"vue\";\n\nimport OPaginationButton from \"./PaginationButton.vue\";\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { defineClasses, useMatchMedia, usePropBinding } from \"@/composables\";\n\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\n\n/**\n * A responsive and flexible pagination\n * @displayName Pagination\n * @style _pagination.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OPagination\",\n    configField: \"pagination\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Total count of items */\n    total: { type: Number, default: undefined },\n    /** Items count for each page */\n    perPage: {\n        type: [Number, String],\n        default: () => getOption(\"pagination.perPage\", 20),\n    },\n    /** Current page number, use v-model:current to make it two-way binding. */\n    current: { type: Number, default: 1 },\n    /** Number of pagination items to show before current page. */\n    rangeBefore: { type: Number, default: 1 },\n    /** Number of pagination items to show after current page. */\n    rangeAfter: { type: Number, default: 1 },\n    /**\n     * Pagination size\n     * @values small, medium, large\n     */\n    size: {\n        type: String,\n        default: () => getOption(\"pagination.size\"),\n    },\n    /** Simple style */\n    simple: {\n        type: Boolean,\n        default: () => getOption(\"pagination.simple\", false),\n    },\n    /** Rounded button style */\n    rounded: {\n        type: Boolean,\n        default: () => getOption(\"pagination.rounded\", false),\n    },\n    /**\n     * Buttons order\n     * @values centered, right, left\n     */\n    order: {\n        type: String,\n        default: () => getOption(\"pagination.order\", \"right\"),\n        validator: (value: string) =>\n            [\"centered\", \"right\", \"left\"].indexOf(value) >= 0,\n    },\n    /** Pagination button tag name */\n    buttonTag: {\n        type: [String, Object, Function] as PropType<DynamicComponent>,\n        default: () =>\n            getOption<DynamicComponent>(\"pagination.buttonTag\", \"button\"),\n    },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"pagination.iconPack\"),\n    },\n    /** Icon to use for previous button */\n    iconPrev: {\n        type: String,\n        default: () => getOption(\"pagination.iconPrev\", \"chevron-left\"),\n    },\n    /** Icon to use for next button */\n    iconNext: {\n        type: String,\n        default: () => getOption(\"pagination.iconNext\", \"chevron-right\"),\n    },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"pagination.mobileBreakpoint\"),\n    },\n    /** Accessibility label for the next page button. */\n    ariaNextLabel: {\n        type: String,\n        default: () => getOption(\"pagination.ariaNextLabel\", \"Next page\"),\n    },\n    /** Accessibility label for the previous page button. */\n    ariaPreviousLabel: {\n        type: String,\n        default: () =>\n            getOption(\"pagination.ariaPreviousLabel\", \"Previous page\"),\n    },\n    /** Accessibility label for the page button. */\n    ariaPageLabel: {\n        type: String,\n        default: () => getOption(\"pagination.ariaPageLabel\", \"page\"),\n    },\n    /** Accessibility label for the current page button. */\n    ariaCurrentLabel: {\n        type: String,\n        default: () => getOption(\"pagination.ariaCurrentLabel\", \"Current page\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the prev button */\n    prevButtonClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the next button */\n    nextButtonClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the pagination list */\n    listClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the pagination list items */\n    listItemClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the link button */\n    linkClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the current link */\n    linkCurrentClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the pagination ellipsis */\n    ellipsisClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the info in `simple` mode */\n    infoClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the pagination order */\n    orderClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the pagination in `simple` mode */\n    simpleClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the pagination when rounded */\n    roundedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the disabled link */\n    linkDisabledClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the pagination size */\n    sizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of pagination component when on mobile */\n    mobileClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * current prop two-way binding\n     * @param value {number} updated current prop\n     */\n    (e: \"update:current\", value: number): void;\n    /**\n     * on current change event\n     * @param value {number} current value\n     */\n    (e: \"change\", event: number): void;\n}>();\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\nconst current = usePropBinding(\"current\", props, emits);\n\n/** Total page size (count). */\nconst pageCount = computed(() =>\n    Math.ceil(props.total / Number(props.perPage)),\n);\n\n/** If current page is trying to be greater than page count, set to last. */\nwatch(\n    () => pageCount.value,\n    (value) => {\n        if (props.current > value) last();\n    },\n);\n\n/** First item of the page (count). */\nconst firstItem = computed(() => {\n    const perPage = Number(props.perPage);\n    const firstItem = props.current * perPage - perPage + 1;\n    return firstItem >= 0 ? firstItem : 0;\n});\n\n/** Check if previous button is available. */\nconst hasPrev = computed(() => props.current > 1);\n\n/** Check if first page button should be visible. */\nconst hasFirst = computed(() => props.current >= 2 + props.rangeBefore);\n\n/** Check if first ellipsis should be visible. */\nconst hasFirstEllipsis = computed(() => props.current >= props.rangeBefore + 4);\n\n/** Check if last page button should be visible. */\nconst hasLast = computed(\n    () => props.current <= pageCount.value - (1 + props.rangeAfter),\n);\n\n/** Check if last ellipsis should be visible. */\nconst hasLastEllipsis = computed(\n    () => props.current < pageCount.value - (2 + props.rangeAfter),\n);\n\n/** Check if next button is available. */\nconst hasNext = computed(() => props.current < pageCount.value);\n\n/**\n * Get near pages, 1 before and 1 after the current.\n * Also add the click event to the array.\n */\nconst pagesInRange = computed<ReturnType<typeof getPage>[]>(() => {\n    if (props.simple) return;\n\n    let left = Math.max(1, props.current - props.rangeBefore);\n    if (left - 1 === 2) {\n        left--; // Do not show the ellipsis if there is only one to hide\n    }\n    let right = Math.min(props.current + props.rangeAfter, pageCount.value);\n    if (pageCount.value - right === 2) {\n        right++; // Do not show the ellipsis if there is only one to hide\n    }\n\n    const pages = [];\n    for (let i = left; i <= right; i++) {\n        pages.push(getPage(i));\n    }\n    return pages;\n});\n\n/** Get properties for a page */\nfunction getPage(\n    num: number,\n    ariaLabel?: string,\n): {\n    number: number;\n    isCurrent: boolean;\n    click: (event: Event) => void;\n    ariaLabel: string;\n    tag: DynamicComponent;\n} {\n    return {\n        number: num,\n        isCurrent: props.current === num,\n        click: (event: Event): void => changePage(num, event),\n        ariaLabel: ariaLabel || getAriaPageLabel(num, props.current === num),\n        tag: props.buttonTag,\n    };\n}\n\n/** Get text for aria-label according to page number. */\nfunction getAriaPageLabel(pageNumber: number, isCurrent: boolean): string {\n    if (props.ariaPageLabel && (!isCurrent || !props.ariaCurrentLabel))\n        return props.ariaPageLabel + \" \" + pageNumber + \".\";\n    else if (props.ariaPageLabel && isCurrent && props.ariaCurrentLabel)\n        return (\n            props.ariaCurrentLabel +\n            \", \" +\n            props.ariaPageLabel +\n            \" \" +\n            pageNumber +\n            \".\"\n        );\n    return null;\n}\n\n/** Previous button click listener. */\nfunction prev(event?: Event): void {\n    changePage(props.current - 1, event);\n}\n\n/** Next button click listener. */\nfunction next(event?: Event): void {\n    changePage(props.current + 1, event);\n}\n\n/** First button click listener. */\nfunction first(event?: Event): void {\n    changePage(1, event);\n}\n\n/** Last button click listener. */\nfunction last(event?: Event): void {\n    changePage(pageCount.value, event);\n}\n\nfunction changePage(page: number, event: Event): void {\n    if (props.current === page || page < 1 || page > pageCount.value) return;\n    emits(\"change\", page);\n    current.value = page;\n\n    // Set focus on element to keep tab order\n    if (event && event.target)\n        nextTick(() => (event.target as HTMLElement).focus());\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-pag\"],\n    [\n        \"orderClass\",\n        \"o-pag--\",\n        computed(() => props.order),\n        computed(() => !!props.order),\n    ],\n    [\n        \"sizeClass\",\n        \"o-pag--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n    [\"simpleClass\", \"o-pag--simple\", null, computed(() => props.simple)],\n    [\"mobileClass\", \"o-pag--mobile\", null, isMobile],\n);\n\nconst prevBtnClasses = defineClasses(\n    [\"prevButtonClass\", \"o-pag__previous\"],\n    [\n        \"linkDisabledClass\",\n        \"o-pag__link--disabled\",\n        null,\n        computed(() => !hasPrev.value),\n    ],\n);\n\nconst nextBtnClasses = defineClasses(\n    [\"nextButtonClass\", \"o-pag__next\"],\n    [\n        \"linkDisabledClass\",\n        \"o-pag__link--disabled\",\n        null,\n        computed(() => !hasNext.value),\n    ],\n);\n\nconst infoClasses = defineClasses([\"infoClass\", \"o-pag__info\"]);\n\nconst ellipsisClasses = defineClasses([\"ellipsisClass\", \"o-pag__ellipsis\"]);\n\nconst listClasses = defineClasses([\"listClass\", \"o-pag__list\"]);\n\nconst linkClasses = defineClasses(\n    [\"linkClass\", \"o-pag__link\"],\n    [\n        \"roundedClass\",\n        \"o-pag__link--rounded\",\n        null,\n        computed(() => props.rounded),\n    ],\n);\n\nconst linkCurrentClasses = defineClasses([\n    \"linkCurrentClass\",\n    \"o-pag__link--current\",\n]);\n\nconst listItemClasses = defineClasses([\"listItemClass\", \"o-pag__item\"]);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ last, first, prev, next });\n</script>\n\n<template>\n    <nav :class=\"rootClasses\" data-oruga=\"pagination\">\n        <!-- \n            @slot Previous button slot\n            @binding {number} number - page number \n            @binding {boolean} isCurrent - if page is current\n            @binding {(event:Event): void} click - onClick handler\n            @binding {string} ariaLabel - aria-label attribute\n        -->\n        <slot name=\"previous\" v-bind=\"getPage(current - 1, ariaPreviousLabel)\">\n            <o-pagination-button\n                v-bind=\"getPage(current - 1, ariaPreviousLabel)\"\n                :class=\"prevBtnClasses\"\n                :link-class=\"linkClasses\"\n                :link-current-class=\"linkCurrentClasses\">\n                <o-icon\n                    :icon=\"iconPrev\"\n                    :pack=\"iconPack\"\n                    both\n                    aria-hidden=\"true\" />\n            </o-pagination-button>\n        </slot>\n        <!-- \n            @slot Next button slot\n            @binding {number} number - page number \n            @binding {boolean} isCurrent - if page is current\n            @binding {(event:Event): void} click - onClick handler\n            @binding {string} ariaLabel - aria-label attribute\n        -->\n        <slot name=\"next\" v-bind=\"getPage(current + 1, ariaNextLabel)\">\n            <o-pagination-button\n                v-bind=\"getPage(current + 1, ariaNextLabel)\"\n                :class=\"nextBtnClasses\"\n                :link-class=\"linkClasses\"\n                :link-current-class=\"linkCurrentClasses\">\n                <o-icon\n                    :icon=\"iconNext\"\n                    :pack=\"iconPack\"\n                    both\n                    aria-hidden=\"true\" />\n            </o-pagination-button>\n        </slot>\n\n        <small v-if=\"simple\" :class=\"infoClasses\">\n            <template v-if=\"perPage == 1\">\n                {{ firstItem }} / {{ total }}\n            </template>\n            <template v-else>\n                {{ firstItem }}-{{ Math.min(current * Number(perPage), total) }}\n                /\n                {{ total }}\n            </template>\n        </small>\n\n        <ul v-else :class=\"listClasses\">\n            <!--First-->\n            <li v-if=\"hasFirst\" :class=\"listItemClasses\">\n                <slot v-bind=\"getPage(1)\">\n                    <o-pagination-button\n                        v-bind=\"getPage(1)\"\n                        :link-class=\"linkClasses\"\n                        :link-current-class=\"linkCurrentClasses\" />\n                </slot>\n            </li>\n            <li v-if=\"hasFirstEllipsis\" :class=\"listItemClasses\">\n                <span :class=\"ellipsisClasses\">&hellip;</span>\n            </li>\n\n            <!--Pages-->\n            <li\n                v-for=\"page in pagesInRange\"\n                :key=\"page.number\"\n                :class=\"listItemClasses\">\n                <slot v-bind=\"page\">\n                    <o-pagination-button\n                        v-bind=\"page\"\n                        :link-class=\"linkClasses\"\n                        :link-current-class=\"linkCurrentClasses\" />\n                </slot>\n            </li>\n\n            <!--Last-->\n            <li v-if=\"hasLastEllipsis\" :class=\"listItemClasses\">\n                <span :class=\"ellipsisClasses\">&hellip;</span>\n            </li>\n            <li v-if=\"hasLast\" :class=\"listItemClasses\">\n                <!-- \n                    @slot Pagination button slot\n                    @binding {number} number - page number \n                    @binding {boolean} isCurrent - if page is current\n                    @binding {(event:Event): void} click - onClick handler\n                    @binding {string} ariaLabel - aria-label attribute\n                -->\n                <slot v-bind=\"getPage(pageCount)\">\n                    <o-pagination-button\n                        v-bind=\"getPage(pageCount)\"\n                        :link-class=\"linkClasses\"\n                        :link-current-class=\"linkCurrentClasses\" />\n                </slot>\n            </li>\n        </ul>\n    </nav>\n</template>\n"],"names":["computed","useMatchMedia","usePropBinding","watch","firstItem","nextTick","defineClasses"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,UAAM,QAAQ;AA0BR,UAAA,cAAcA,IAAAA,SAAS,MAAM;AAAA,MAC/B,GAAG,MAAM;AAAA,MACT,MAAM;AAAA,MACN,GAAI,MAAM,YAAY,MAAM,mBAAmB,CAAC;AAAA,IAAA,CACnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBD,UAAM,QAAQ;AA4Kd,UAAM,QAAQ;AAad,UAAM,EAAE,SAAa,IAAAC,cAAA,cAAc,MAAM,gBAAgB;AAEzD,UAAM,UAAUC,aAAA,eAAe,WAAW,OAAO,KAAK;AAGtD,UAAM,YAAYF,IAAA;AAAA,MAAS,MACvB,KAAK,KAAK,MAAM,QAAQ,OAAO,MAAM,OAAO,CAAC;AAAA,IAAA;AAIjDG,QAAA;AAAA,MACI,MAAM,UAAU;AAAA,MAChB,CAAC,UAAU;AACP,YAAI,MAAM,UAAU;AAAY;MACpC;AAAA,IAAA;AAIE,UAAA,YAAYH,IAAAA,SAAS,MAAM;AACvB,YAAA,UAAU,OAAO,MAAM,OAAO;AACpC,YAAMI,aAAY,MAAM,UAAU,UAAU,UAAU;AAC/CA,aAAAA,cAAa,IAAIA,aAAY;AAAA,IAAA,CACvC;AAGD,UAAM,UAAUJ,IAAAA,SAAS,MAAM,MAAM,UAAU,CAAC;AAGhD,UAAM,WAAWA,IAAS,SAAA,MAAM,MAAM,WAAW,IAAI,MAAM,WAAW;AAGtE,UAAM,mBAAmBA,IAAS,SAAA,MAAM,MAAM,WAAW,MAAM,cAAc,CAAC;AAG9E,UAAM,UAAUA,IAAA;AAAA,MACZ,MAAM,MAAM,WAAW,UAAU,SAAS,IAAI,MAAM;AAAA,IAAA;AAIxD,UAAM,kBAAkBA,IAAA;AAAA,MACpB,MAAM,MAAM,UAAU,UAAU,SAAS,IAAI,MAAM;AAAA,IAAA;AAIvD,UAAM,UAAUA,IAAAA,SAAS,MAAM,MAAM,UAAU,UAAU,KAAK;AAMxD,UAAA,eAAeA,IAAAA,SAAuC,MAAM;AAC9D,UAAI,MAAM;AAAQ;AAElB,UAAI,OAAO,KAAK,IAAI,GAAG,MAAM,UAAU,MAAM,WAAW;AACpD,UAAA,OAAO,MAAM,GAAG;AAChB;AAAA,MACJ;AACI,UAAA,QAAQ,KAAK,IAAI,MAAM,UAAU,MAAM,YAAY,UAAU,KAAK;AAClE,UAAA,UAAU,QAAQ,UAAU,GAAG;AAC/B;AAAA,MACJ;AAEA,YAAM,QAAQ,CAAA;AACd,eAAS,IAAI,MAAM,KAAK,OAAO,KAAK;AAC1B,cAAA,KAAK,QAAQ,CAAC,CAAC;AAAA,MACzB;AACO,aAAA;AAAA,IAAA,CACV;AAGQ,aAAA,QACL,KACA,WAOF;AACS,aAAA;AAAA,QACH,QAAQ;AAAA,QACR,WAAW,MAAM,YAAY;AAAA,QAC7B,OAAO,CAAC,UAAuB,WAAW,KAAK,KAAK;AAAA,QACpD,WAAW,aAAa,iBAAiB,KAAK,MAAM,YAAY,GAAG;AAAA,QACnE,KAAK,MAAM;AAAA,MAAA;AAAA,IAEnB;AAGS,aAAA,iBAAiB,YAAoB,WAA4B;AACtE,UAAI,MAAM,kBAAkB,CAAC,aAAa,CAAC,MAAM;AACtC,eAAA,MAAM,gBAAgB,MAAM,aAAa;AAAA,eAC3C,MAAM,iBAAiB,aAAa,MAAM;AAC/C,eACI,MAAM,mBACN,OACA,MAAM,gBACN,MACA,aACA;AAED,aAAA;AAAA,IACX;AAGA,aAAS,KAAK,OAAqB;AACpB,iBAAA,MAAM,UAAU,GAAG,KAAK;AAAA,IACvC;AAGA,aAAS,KAAK,OAAqB;AACpB,iBAAA,MAAM,UAAU,GAAG,KAAK;AAAA,IACvC;AAGA,aAAS,MAAM,OAAqB;AAChC,iBAAW,GAAG,KAAK;AAAA,IACvB;AAGA,aAAS,KAAK,OAAqB;AACpB,iBAAA,UAAU,OAAO,KAAK;AAAA,IACrC;AAES,aAAA,WAAW,MAAc,OAAoB;AAClD,UAAI,MAAM,YAAY,QAAQ,OAAO,KAAK,OAAO,UAAU;AAAO;AAClE,YAAM,UAAU,IAAI;AACpB,cAAQ,QAAQ;AAGhB,UAAI,SAAS,MAAM;AACfK,YAAAA,SAAS,MAAO,MAAM,OAAuB,MAAO,CAAA;AAAA,IAC5D;AAIA,UAAM,cAAcC,cAAA;AAAA,MAChB,CAAC,aAAa,OAAO;AAAA,MACrB;AAAA,QACI;AAAA,QACA;AAAA,QACAN,aAAS,MAAM,MAAM,KAAK;AAAA,QAC1BA,IAAAA,SAAS,MAAM,CAAC,CAAC,MAAM,KAAK;AAAA,MAChC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACAA,aAAS,MAAM,MAAM,IAAI;AAAA,QACzBA,IAAAA,SAAS,MAAM,CAAC,CAAC,MAAM,IAAI;AAAA,MAC/B;AAAA,MACA,CAAC,eAAe,iBAAiB,MAAMA,aAAS,MAAM,MAAM,MAAM,CAAC;AAAA,MACnE,CAAC,eAAe,iBAAiB,MAAM,QAAQ;AAAA,IAAA;AAGnD,UAAM,iBAAiBM,cAAA;AAAA,MACnB,CAAC,mBAAmB,iBAAiB;AAAA,MACrC;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACAN,aAAS,MAAM,CAAC,QAAQ,KAAK;AAAA,MACjC;AAAA,IAAA;AAGJ,UAAM,iBAAiBM,cAAA;AAAA,MACnB,CAAC,mBAAmB,aAAa;AAAA,MACjC;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACAN,aAAS,MAAM,CAAC,QAAQ,KAAK;AAAA,MACjC;AAAA,IAAA;AAGJ,UAAM,cAAcM,cAAA,cAAc,CAAC,aAAa,aAAa,CAAC;AAE9D,UAAM,kBAAkBA,cAAA,cAAc,CAAC,iBAAiB,iBAAiB,CAAC;AAE1E,UAAM,cAAcA,cAAA,cAAc,CAAC,aAAa,aAAa,CAAC;AAE9D,UAAM,cAAcA,cAAA;AAAA,MAChB,CAAC,aAAa,aAAa;AAAA,MAC3B;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACAN,aAAS,MAAM,MAAM,OAAO;AAAA,MAChC;AAAA,IAAA;AAGJ,UAAM,qBAAqBM,cAAAA,cAAc;AAAA,MACrC;AAAA,MACA;AAAA,IAAA,CACH;AAED,UAAM,kBAAkBA,cAAA,cAAc,CAAC,iBAAiB,aAAa,CAAC;AAKtE,aAAa,EAAE,MAAM,OAAO,MAAM,KAAM,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}