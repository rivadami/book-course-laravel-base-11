{"version":3,"file":"modal.cjs","sources":["../../src/components/modal/Modal.vue","../../src/components/modal/ModalProgrammatic.ts","../../src/components/modal/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport {\n    ref,\n    computed,\n    watch,\n    nextTick,\n    onBeforeUnmount,\n    type Component,\n    type PropType,\n} from \"vue\";\n\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { vTrapFocus } from \"@/directives/trapFocus\";\nimport { getOption } from \"@/utils/config\";\nimport { removeElement, toCssDimension } from \"@/utils/helpers\";\nimport { isClient } from \"@/utils/ssr\";\nimport {\n    defineClasses,\n    getActiveClasses,\n    useMatchMedia,\n    useProgrammaticComponent,\n} from \"@/composables\";\n\nimport type { ComponentClass, ProgrammaticInstance } from \"@/types\";\n\n/**\n * Classic modal overlay to include any content you may need\n * @displayName Modal\n * @style _modal.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OModal\",\n    configField: \"modal\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Whether modal is active or not, use v-model:active to make it two-way binding */\n    active: { type: Boolean, default: false },\n    /** Display modal as full screen */\n    fullScreen: { type: Boolean, default: false },\n    /** Text content, unnecessary when default slot is used */\n    content: { type: String, default: undefined },\n    /** Width of the Modal */\n    width: {\n        type: [String, Number],\n        default: () => getOption(\"modal.width\", 960),\n    },\n    /** Custom animation (transition name) */\n    animation: {\n        type: String,\n        default: () => getOption(\"modal.animation\", \"zoom-out\"),\n    },\n    /**\n     * Is Modal cancleable by clicking 'X', pressing escape or clicking outside\n     * @values escape, x, outside, button, true, false\n     */\n    cancelable: {\n        type: [Array, Boolean] as PropType<string[] | boolean>,\n        default: () =>\n            getOption(\"modal.cancelable\", [\"escape\", \"x\", \"outside\", \"button\"]),\n    },\n    /** Callback function to call after user canceled (clicked 'X' / pressed escape / clicked outside) */\n    onCancel: { type: Function as PropType<() => void>, default: () => {} },\n    /** Callback function to call after close (programmatically close or user canceled) */\n    onClose: { type: Function as PropType<() => void>, default: () => {} },\n    /**\n     * Use `clip` to remove the body scrollbar, `keep` to have a non scrollable scrollbar to avoid shifting background,\n     * but will set body to position fixed, might break some layouts.\n     * @values keep, clip\n     */\n    scroll: {\n        type: String,\n        default: () => getOption(\"modal.scroll\", \"keep\"),\n        validator: (value: string) => [\"keep\", \"clip\"].indexOf(value) >= 0,\n    },\n    /** Trap focus inside the modal */\n    trapFocus: {\n        type: Boolean,\n        default: () => getOption(\"modal.trapFocus\", true),\n    },\n    /**\n     * Role attribute to be passed to the div wrapper for better accessibility.\n     * @values dialog, alertdialog\n     */\n    ariaRole: {\n        type: String,\n        default: () => getOption(\"modal.ariaRole\"),\n        validator: (value: string) =>\n            [\"dialog\", \"alertdialog\"].indexOf(value) >= 0,\n    },\n    /** Accessibility aria-label to be passed to the div wrapper element */\n    ariaLabel: { type: String, default: () => getOption(\"modal.ariaLabel\") },\n    /** Destroy modal on hide - default `true` for programmatic usage */\n    destroyOnHide: {\n        type: Boolean,\n        default: () => getOption(\"modal.destroyOnHide\", false),\n    },\n    /** Automatically focus modal when active */\n    autoFocus: {\n        type: Boolean,\n        default: () => getOption(\"modal.autoFocus\", true),\n    },\n    /** Close icon name */\n    closeIcon: {\n        type: String,\n        default: () => getOption(\"modal.closeIcon\", \"close\"),\n    },\n    /**\n     * Size of close icon\n     * @values small, medium, large\n     */\n    closeIconSize: {\n        type: String,\n        default: () => getOption(\"modal.closeIconSize\", \"medium\"),\n    },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"modal.mobileBreakpoint\"),\n    },\n    /**\n     * Append the component to another part of the DOM.\n     * Set `true` to append the component to the body.\n     * In addition, any CSS selector string or an actual DOM node can be used.\n     */\n    teleport: {\n        type: [Boolean, String, Object],\n        default: () => getOption(\"modal.teleport\", false),\n    },\n    /**\n     * Component to be injected, used to open a component modal programmatically.\n     * Close modal within the component by emitting a 'close' event â€” emits('close')\n     */\n    component: {\n        type: [Object, Function] as PropType<Component>,\n        default: undefined,\n    },\n    /** Props to be binded to the injected component */\n    props: { type: Object, default: undefined },\n    /** Events to be binded to the injected component */\n    events: { type: Object, default: () => ({}) },\n    /** DOM element where the modal component will be created on (for programmatic usage) */\n    container: {\n        type: [Object, String] as PropType<string | HTMLElement>,\n        default: () => getOption(\"modal.container\", \"body\"),\n    },\n    /**\n     * This is used internally for programmatic usage\n     * @ignore\n     */\n    programmatic: {\n        type: Object as PropType<ProgrammaticInstance>,\n        default: undefined,\n    },\n    /**\n     * This is used internally for programmatic usage\n     * @ignore\n     */\n    promise: { type: Promise, default: undefined },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of modal component when its active */\n    activeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the modal overlay */\n    overlayClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the modal content */\n    contentClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the close button */\n    closeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the modal when fullscreen */\n    fullScreenClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of modal component when on mobile */\n    mobileClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the modal when scroll is clip */\n    scrollClipClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the modal when scroll is not clip */\n    noScrollClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * active prop two-way binding\n     * @param value {boolean} - updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * on component close event\n     * @param value {any} - close event data\n     */\n    (e: \"close\", ...args: any[]): void;\n}>();\n\nconst rootRef = ref();\n\n/** add programmatic usage to this component */\nconst { isActive, close, cancel } = useProgrammaticComponent(\n    rootRef,\n    props,\n    emits,\n    {\n        destroyOnHide: props.destroyOnHide,\n        cancelOptions: getOption(\"modal.cancelable\", [\n            \"escape\",\n            \"x\",\n            \"outside\",\n            \"button\",\n        ]),\n    },\n);\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\nconst _teleport = computed(() =>\n    typeof props.teleport === \"boolean\"\n        ? { to: \"body\", disabled: !props.teleport }\n        : { to: props.teleport, disabled: false },\n);\n\nconst savedScrollTop = ref(null);\nconst isAnimating = ref(!props.active);\n\nwatch(isActive, (value) => {\n    handleScroll();\n    if (value && rootRef.value && props.autoFocus)\n        nextTick(() => rootRef.value.focus());\n    // mark the modal as destoyed after it get closed\n    if (!value && props.destroyOnHide)\n        // wait for transition finish\n        setTimeout(() => removeElement(rootRef.value));\n});\n\nconst showX = computed(() =>\n    Array.isArray(props.cancelable)\n        ? props.cancelable.indexOf(\"x\") >= 0\n        : props.cancelable,\n);\n\nconst customStyle = computed(() =>\n    !props.fullScreen ? { maxWidth: toCssDimension(props.width) } : null,\n);\n\nonBeforeUnmount(() => {\n    if (isClient) {\n        // reset scroll\n        const scrollto = savedScrollTop.value\n            ? savedScrollTop.value\n            : document.documentElement.scrollTop;\n        if (scrollClass.value) {\n            document.body.classList.remove(...scrollClass.value);\n            document.documentElement.classList.remove(...scrollClass.value);\n        }\n        document.documentElement.scrollTop = scrollto;\n        document.body.style.top = null;\n    }\n});\n\nfunction handleScroll(): void {\n    if (!isClient) return;\n\n    if (props.scroll === \"clip\") {\n        if (scrollClass.value) {\n            if (isActive.value)\n                document.documentElement.classList.add(...scrollClass.value);\n            else\n                document.documentElement.classList.remove(...scrollClass.value);\n        }\n        return;\n    }\n\n    savedScrollTop.value = savedScrollTop.value\n        ? savedScrollTop.value\n        : document.documentElement.scrollTop;\n\n    if (scrollClass.value) {\n        if (isActive.value) document.body.classList.add(...scrollClass.value);\n        else document.body.classList.remove(...scrollClass.value);\n    }\n\n    if (isActive.value) {\n        document.body.style.top = `-${savedScrollTop.value}px`;\n        return;\n    }\n\n    document.documentElement.scrollTop = savedScrollTop.value;\n    document.body.style.top = null;\n    savedScrollTop.value = null;\n}\n\n/** Transition after-enter hook */\nfunction afterEnter(): void {\n    isAnimating.value = false;\n}\n\n/** Transition before-leave hook */\nfunction beforeLeave(): void {\n    isAnimating.value = true;\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-modal\"],\n    [\"mobileClass\", \"o-modal--mobile\", null, isMobile],\n    [\"activeClass\", \"o-modal--active\", null, isActive],\n);\n\nconst overlayClasses = defineClasses([\"overlayClass\", \"o-modal__overlay\"]);\n\nconst contentClasses = defineClasses(\n    [\"contentClass\", \"o-modal__content\"],\n    [\n        \"fullScreenClass\",\n        \"o-modal__content--full-screen\",\n        null,\n        computed(() => props.fullScreen),\n    ],\n);\n\nconst closeClasses = defineClasses([\"closeClass\", \"o-modal__close\"]);\n\nconst scrollClasses = defineClasses([\"scrollClipClass\", \"o-clipped\"]);\nconst noScrollClasses = defineClasses([\"noScrollClass\", \"o-noscroll\"]);\n\nconst scrollClass = computed(() =>\n    getActiveClasses(\n        props.scroll === \"clip\" ? scrollClasses.value : noScrollClasses.value,\n    ),\n);\n\n// computed ref must be computed at least once for programmatic usage\nscrollClass.value;\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ close, promise: props.promise });\n</script>\n\n<template>\n    <Teleport :to=\"_teleport.to\" :disabled=\"_teleport.disabled\">\n        <transition\n            :name=\"animation\"\n            @after-enter=\"afterEnter\"\n            @before-leave=\"beforeLeave\">\n            <div\n                v-show=\"isActive\"\n                v-bind=\"$attrs\"\n                ref=\"rootRef\"\n                v-trap-focus=\"trapFocus\"\n                data-oruga=\"modal\"\n                :class=\"rootClasses\"\n                :tabindex=\"-1\"\n                :role=\"ariaRole\"\n                :aria-label=\"ariaLabel\"\n                :aria-modal=\"isActive\">\n                <div\n                    :class=\"overlayClasses\"\n                    tabindex=\"-1\"\n                    aria-hidden=\"true\"\n                    @click=\"cancel('outside')\" />\n\n                <div :class=\"contentClasses\" :style=\"customStyle\">\n                    <!-- injected component for programmatic usage -->\n                    <component\n                        v-bind=\"$props.props\"\n                        :is=\"component\"\n                        v-if=\"component\"\n                        v-on=\"$props.events\"\n                        @close=\"close\" />\n                    <!--\n                        @slot Modal default content, default is content prop\n                        @binding {(...args): void} close - function to close the component\n                    -->\n                    <slot v-else :close=\"close\">\n                        <div v-if=\"content\">{{ content }}</div>\n                    </slot>\n\n                    <o-icon\n                        v-if=\"showX\"\n                        v-show=\"!isAnimating\"\n                        clickable\n                        both\n                        :class=\"closeClasses\"\n                        :icon=\"closeIcon\"\n                        :size=\"closeIconSize\"\n                        @click=\"cancel('x')\" />\n                </div>\n            </div>\n        </transition>\n    </Teleport>\n</template>\n","import { createVNode, render } from \"vue\";\n\nimport Modal from \"./Modal.vue\";\nimport type { ModalProps } from \"./types\";\n\nimport InstanceRegistry from \"@/utils/InstanceRegistry\";\nimport { VueInstance } from \"@/utils/plugins\";\nimport { merge } from \"@/utils/helpers\";\nimport type { OrugaOptions, ProgrammaticExpose } from \"@/types\";\n\ndeclare module \"../../index\" {\n    interface OrugaProgrammatic {\n        modal: typeof ModalProgrammatic;\n    }\n}\n\nconst instances = new InstanceRegistry<typeof Modal>();\n\ntype ModalProgrammaticProps = Readonly<\n    string | (ModalProps & OrugaOptions[\"modal\"])\n>;\n\nconst ModalProgrammatic = {\n    open(params: ModalProgrammaticProps): ProgrammaticExpose {\n        const componentParams =\n            typeof params === \"string\"\n                ? {\n                      content: params,\n                  }\n                : { ...params };\n\n        let slot;\n        if (Array.isArray(componentParams.content)) {\n            slot = componentParams.content;\n            delete componentParams.content;\n        }\n\n        const defaultParams = {\n            programmatic: { instances },\n            active: true, // set the active state to true\n            destroyOnHide: true, // set destroy on hide true\n        };\n\n        const propsData = merge(defaultParams, componentParams);\n        propsData.promise = new Promise((p1, p2) => {\n            propsData.programmatic.resolve = p1;\n            propsData.programmatic.reject = p2;\n        });\n\n        const defaultSlot = () => slot;\n\n        const app = VueInstance;\n        const vnode = createVNode(Modal, propsData, defaultSlot);\n        vnode.appContext = app._context;\n        render(vnode, document.createElement(\"div\"));\n\n        // return exposed functionalities\n        return vnode.component.exposed as ProgrammaticExpose;\n    },\n    closeAll(...args: any[]): void {\n        instances.walk((entry) => entry.exposed.close(...args));\n    },\n};\n\nexport default ModalProgrammatic;\n","import type { App, Plugin } from \"vue\";\n\nimport Modal from \"./Modal.vue\";\nimport ModalProgrammatic from \"./ModalProgrammatic\";\n\nimport {\n    registerComponent,\n    registerComponentProgrammatic,\n} from \"@/utils/plugins\";\n\n/** export modal specific types */\nexport type { ModalProps } from \"./types\";\n\n/** export modal plugin */\nexport default {\n    install(app: App) {\n        registerComponent(app, Modal);\n        registerComponentProgrammatic(app, \"modal\", ModalProgrammatic);\n    },\n} as Plugin;\n\n/** export modal components */\nexport { ModalProgrammatic, Modal as OModal };\n"],"names":["ref","useProgrammaticComponent","getOption","useMatchMedia","computed","watch","nextTick","removeElement","toCssDimension","onBeforeUnmount","isClient","defineClasses","getActiveClasses","InstanceRegistry","merge","VueInstance","createVNode","Modal","render","registerComponent","registerComponentProgrammatic","ModalProgrammatic"],"mappings":"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"}