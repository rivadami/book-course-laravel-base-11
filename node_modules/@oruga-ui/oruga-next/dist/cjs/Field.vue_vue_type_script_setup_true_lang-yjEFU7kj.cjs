"use strict";
/*! Oruga v0.8.12 | MIT License | github.com/oruga-ui/oruga */
const vue = require("vue");
const config = require("./config-BGSKriL-.cjs");
const helpers = require("./helpers.cjs");
const defineClasses = require("./defineClasses-hfDvmFPC.cjs");
const useMatchMedia = require("./useMatchMedia-DngPqgqI.cjs");
const fieldInjection = require("./fieldInjection-CqF1QDfx.cjs");
const _hoisted_1 = ["for"];
const _hoisted_2 = ["for"];
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  ...{
    isOruga: true,
    name: "OField",
    configField: "field"
  },
  __name: "Field",
  props: {
    /** Override existing theme classes completely */
    override: { type: Boolean, default: void 0 },
    /**
     * Color of the field and help message, also adds a matching icon.
     * Used by Input, Select and Autocomplete.
     * @values primary, info, success, warning, danger, and any other custom color
     */
    variant: { type: String, default: void 0 },
    /** Field label */
    label: { type: String, default: void 0 },
    /**
     * Vertical size of input
     * @values small, medium, large
     */
    labelSize: {
      type: String,
      default: () => config.getOption("field.labelsize")
    },
    /** Same as native for set on the label */
    labelFor: { type: String, default: void 0 },
    /** Help message text */
    message: { type: String, default: void 0 },
    messageTag: {
      type: [String, Object, Function],
      default: () => config.getOption("field.messageTag", "p")
    },
    /**
     * Direct child components/elements of Field will be grouped horizontally
     * (see which ones at the top of the page).
     */
    grouped: { type: Boolean, default: false },
    /** Allow controls to fill up multiple lines, making it responsive */
    groupMultiline: { type: Boolean, default: false },
    /** Group label and control on the same line for horizontal forms */
    horizontal: { type: Boolean, default: false },
    /** Field automatically attach controls together */
    addons: { type: Boolean, default: true },
    /** Mobile breakpoint as max-width value */
    mobileBreakpoint: {
      type: String,
      default: () => config.getOption("field.mobileBreakpoint")
    },
    // class props (will not be displayed in the docs)
    /** Class of the root element */
    rootClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class to align label and control in horizontal forms */
    horizontalClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class when fields are grouped together */
    groupedClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class when fields fill up multiple lines */
    groupMultilineClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class for field label */
    labelClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class for field label size */
    labelSizeClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class for field label when horizontal */
    labelHorizontalClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class for field body */
    bodyClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** "Class for field body when horizontal */
    bodyHorizontalClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class for components automatically attached together when inside a field */
    addonsClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class for the field message */
    messageClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of the message field variant */
    variantMessageClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of the label field variant */
    variantLabelClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class of file component when on mobile */
    mobileClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class for the focused field */
    focusedClass: {
      type: [String, Array, Function],
      default: void 0
    },
    /** Class for the filled field */
    filledClass: {
      type: [String, Array, Function],
      default: void 0
    }
  },
  setup(__props) {
    const props = __props;
    const { isMobile } = useMatchMedia.useMatchMedia(props.mobileBreakpoint);
    const inputId = vue.ref(props.labelFor);
    vue.watch(
      () => props.labelFor,
      (v) => inputId.value = v
    );
    const fieldVariant = vue.ref(props.variant);
    vue.watch(
      () => props.variant,
      (v) => fieldVariant.value = v
    );
    const fieldMessage = vue.ref(props.message);
    vue.watch(
      () => props.message,
      (v) => fieldMessage.value = v
    );
    vue.watch(
      () => fieldMessage.value,
      (value) => {
        var _a;
        if ((_a = parentField == null ? void 0 : parentField.value) == null ? void 0 : _a.hasInnerField) {
          if (!parentField.value.fieldVariant)
            parentField.value.setVariant(fieldVariant.value);
          if (!parentField.value.fieldMessage)
            parentField.value.setMessage(value);
        }
      }
    );
    const isFocused = vue.ref(false);
    const isFilled = vue.ref(false);
    const hasInnerField = vue.ref(false);
    const { parentField } = fieldInjection.injectField();
    if (parentField == null ? void 0 : parentField.value)
      parentField.value.addInnerField();
    const slots = vue.useSlots();
    const hasLabel = vue.computed(() => props.label || !!slots.label);
    const hasMessage = vue.computed(() => !!fieldMessage.value || !!slots.message);
    const isGrouped = vue.computed(
      () => props.grouped || props.groupMultiline || hasInnerField.value || hasAddons.value
    );
    const hasAddons = vue.computed(
      () => props.addons && !props.horizontal && !!slots.default
    );
    function getInnerContent(vnode) {
      const slot = vnode();
      return slot.length === 1 && Array.isArray(slot[0].children) ? slot[0].children : slot;
    }
    const rootRef = vue.ref();
    function addInnerField() {
      hasInnerField.value = true;
    }
    function setFocus(value) {
      isFocused.value = value;
    }
    function setFilled(value) {
      isFilled.value = value;
    }
    function setVariant(value) {
      fieldVariant.value = value;
    }
    function setMessage(value) {
      fieldMessage.value = value;
    }
    function setInputId(value) {
      inputId.value = value;
    }
    const provideData = vue.computed(() => ({
      $el: rootRef.value,
      props,
      hasInnerField: hasInnerField.value,
      hasMessage: hasMessage.value,
      fieldVariant: fieldVariant.value,
      fieldMessage: fieldMessage.value,
      addInnerField,
      setInputId,
      setFocus,
      setFilled,
      setVariant,
      setMessage
    }));
    fieldInjection.provideField(provideData);
    const rootClasses = defineClasses.defineClasses(
      ["rootClass", "o-field"],
      [
        "horizontalClass",
        "o-field--horizontal",
        null,
        vue.computed(() => !!props.horizontal)
      ],
      ["mobileClass", "o-field--mobile", null, isMobile],
      ["focusedClass", "o-field--focused", null, isFocused],
      ["filledClass", "o-field--filled", null, isFilled]
    );
    const messageClasses = defineClasses.defineClasses(
      ["messageClass", "o-field__message"],
      [
        "variantMessageClass",
        "o-field__message-",
        fieldVariant,
        vue.computed(() => !!fieldVariant.value)
      ]
    );
    const labelClasses = defineClasses.defineClasses(
      ["labelClass", "o-field__label"],
      [
        "labelSizeClass",
        "o-field__label-",
        vue.computed(() => props.labelSize),
        vue.computed(() => !!props.labelSize)
      ],
      [
        "variantLabelClass",
        "o-field__label-",
        fieldVariant,
        vue.computed(() => !!fieldVariant.value)
      ]
    );
    const labelHorizontalClasses = defineClasses.defineClasses([
      "labelHorizontalClass",
      "o-field__horizontal-label"
    ]);
    const bodyClasses = defineClasses.defineClasses(["bodyClass", "o-field__body"]);
    const bodyHorizontalClasses = defineClasses.defineClasses([
      "bodyHorizontalClass",
      "o-field__horizontal-body"
    ]);
    const innerFieldClasses = defineClasses.defineClasses(
      ["rootClass", "o-field"],
      [
        "groupMultilineClass",
        "o-field--grouped-multiline",
        null,
        vue.computed(() => props.groupMultiline)
      ],
      ["groupedClass", "o-field--grouped", null, vue.computed(() => props.grouped)],
      [
        "addonsClass",
        "o-field--addons",
        null,
        vue.computed(() => !props.grouped && hasAddons.value)
      ]
    );
    return (_ctx, _cache) => {
      const _component_OField = vue.resolveComponent("OField");
      return vue.openBlock(), vue.createElementBlock("div", {
        ref_key: "rootRef",
        ref: rootRef,
        "data-oruga": "field",
        class: vue.normalizeClass(vue.unref(rootClasses))
      }, [
        __props.horizontal ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(vue.unref(labelHorizontalClasses))
        }, [
          hasLabel.value ? (vue.openBlock(), vue.createElementBlock("label", {
            key: 0,
            for: inputId.value,
            class: vue.normalizeClass(vue.unref(labelClasses))
          }, [
            vue.renderSlot(_ctx.$slots, "label", { label: __props.label }, () => [
              vue.createTextVNode(vue.toDisplayString(__props.label), 1)
            ])
          ], 10, _hoisted_1)) : vue.createCommentVNode("", true)
        ], 2)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
          hasLabel.value ? (vue.openBlock(), vue.createElementBlock("label", {
            key: 0,
            for: inputId.value,
            class: vue.normalizeClass(vue.unref(labelClasses))
          }, [
            vue.renderSlot(_ctx.$slots, "label", { label: __props.label }, () => [
              vue.createTextVNode(vue.toDisplayString(__props.label), 1)
            ])
          ], 10, _hoisted_2)) : vue.createCommentVNode("", true)
        ], 64)),
        __props.horizontal ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 2,
          class: vue.normalizeClass(vue.unref(bodyHorizontalClasses))
        }, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(getInnerContent(_ctx.$slots.default), (element, index) => {
            return vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: index }, [
              vue.unref(helpers.isVNodeEmpty)(element) ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(element), { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_OField, {
                key: 1,
                variant: fieldVariant.value,
                addons: false,
                "message-tag": __props.messageTag,
                "message-class": __props.messageClass
              }, vue.createSlots({
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(element)))
                ]),
                _: 2
              }, [
                index === 0 ? {
                  name: "message",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "message", { message: fieldMessage.value }, () => [
                      vue.createTextVNode(vue.toDisplayString(fieldMessage.value), 1)
                    ])
                  ]),
                  key: "0"
                } : void 0
              ]), 1032, ["variant", "message-tag", "message-class"]))
            ], 64);
          }), 128))
        ], 2)) : isGrouped.value ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 3,
          class: vue.normalizeClass(vue.unref(bodyClasses))
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(innerFieldClasses))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)
        ], 2)) : vue.renderSlot(_ctx.$slots, "default", { key: 4 }),
        hasMessage.value && !__props.horizontal ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(__props.messageTag), {
          key: 5,
          class: vue.normalizeClass(vue.unref(messageClasses))
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "message", { message: fieldMessage.value }, () => [
              vue.createTextVNode(vue.toDisplayString(fieldMessage.value), 1)
            ])
          ]),
          _: 3
        }, 8, ["class"])) : vue.createCommentVNode("", true)
      ], 2);
    };
  }
});
exports._sfc_main = _sfc_main;
//# sourceMappingURL=Field.vue_vue_type_script_setup_true_lang-yjEFU7kj.cjs.map
