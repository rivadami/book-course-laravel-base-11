{"version":3,"file":"taginput.cjs","sources":["../../src/components/taginput/Taginput.vue","../../src/components/taginput/index.ts"],"sourcesContent":["<script setup lang=\"ts\" generic=\"T extends String | Number | Object\">\nimport {\n    computed,\n    nextTick,\n    ref,\n    useAttrs,\n    watchEffect,\n    type ComponentInstance,\n    type PropType,\n} from \"vue\";\n\nimport OIcon from \"../icon/Icon.vue\";\nimport OAutocomplete from \"../autocomplete/Autocomplete.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { getValueByPath } from \"@/utils/helpers\";\nimport {\n    defineClasses,\n    getActiveClasses,\n    useInputHandler,\n} from \"@/composables\";\n\nimport type { ComponentClass } from \"@/types\";\n\n/**\n * A simple tag input field that can have autocomplete functionality\n * @displayName Taginput\n * @style _taginput.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OTaginput\",\n    configField: \"taginput\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** @model */\n    modelValue: { type: Array as PropType<T[]>, default: () => [] },\n    /** Items data */\n    data: { type: Array as PropType<T[]>, default: () => [] },\n    /** Property of the object (if data is array of objects) to use as display text */\n    field: { type: String, default: \"value\" },\n    /** Property of the object (if `data` is array of objects) to use as display text of group */\n    groupField: { type: String, default: undefined },\n    /** Property of the object (if `data` is array of objects) to use as key to get items array of each group */\n    groupOptions: { type: String, default: undefined },\n    /**\n     * Vertical size of the input control\n     * @values small, medium, large\n     */\n    size: {\n        type: String,\n        default: () => getOption(\"taginput.size\"),\n    },\n    /**\n     * Color of the each item\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    variant: {\n        type: String,\n        default: () => getOption(\"taginput.variant\"),\n    },\n    /** Limits the number of items, plus item counter */\n    maxitems: { type: [String, Number], default: undefined },\n    /** Same as native maxlength, plus character counter */\n    maxlength: { type: [String, Number], default: undefined },\n    /** Show counter when maxlength or maxtags props are passed */\n    counter: {\n        type: Boolean,\n        default: () => getOption(\"taginput.counter\", true),\n    },\n    /** Opens a dropdown with choices when the input field is focused */\n    openOnFocus: { type: Boolean, default: false },\n    /** Keep open dropdown list after select */\n    keepOpen: {\n        type: Boolean,\n        default: () => getOption(\"autocomplete.keepOpen\", false),\n    },\n    /** Input placeholder */\n    placeholder: { type: String, default: undefined },\n    /** Makes input full width when inside a grouped or addon field */\n    expanded: { type: Boolean, default: false },\n    /** Same as native input disabled */\n    disabled: { type: Boolean, default: false },\n    /**\n     * Array of keys\n     * (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)\n     * which will add a item when typing\n     */\n    confirmKeys: {\n        type: Array as PropType<string[]>,\n        default: () => getOption(\"taginput.confirmKeys\", [\",\", \"Tab\", \"Enter\"]),\n    },\n    /** Array of chars used to split when pasting a new string */\n    separators: {\n        type: Array as PropType<string[]>,\n        default: () => getOption(\"taginput.separators\", [\",\"]),\n    },\n    /** The first option will always be pre-selected (easier to just hit enter or tab) */\n    keepFirst: { type: Boolean, default: false },\n    /** When autocomplete, it allow to add new items */\n    allowNew: { type: Boolean, default: false },\n    /** Allows adding the same item multiple time */\n    allowDuplicates: { type: Boolean, default: false },\n    /** Add autocomplete feature (if true, any Autocomplete props may be used too) */\n    allowAutocomplete: { type: Boolean, default: false },\n    /** Allow removing last item when pressing given keys, if input is empty */\n    removeOnKeys: {\n        type: Array as PropType<string[]>,\n        default: () => getOption(\"taginput.removeOnKeys\", [\"Backspace\"]),\n    },\n    /** Function to validate the value of the item before adding */\n    beforeAdding: {\n        type: Function as PropType<(value: T | string) => boolean>,\n        default: () => true,\n    },\n    /** Function to create a new item to push into v-model (items) */\n    createItem: {\n        type: Function as PropType<(value: T | string) => T>,\n        default: (item: T | string) => item,\n    },\n    /** Makes the component check if list reached scroll start or end and emit scroll events. */\n    checkScroll: {\n        type: Boolean,\n        default: () => getOption(\"taginput.checkScroll\", false),\n    },\n    /** Add close/delete button to the item */\n    closable: {\n        type: Boolean,\n        default: () => getOption(\"taginput.closable\", true),\n    },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"taginput.iconPack\"),\n    },\n    /** Icon to be shown */\n    icon: {\n        type: String,\n        default: () => getOption(\"taginput.icon\"),\n    },\n    /** Icon name of close icon on selected item */\n    closeIcon: {\n        type: String,\n        default: () => getOption(\"taginput.closeIcon\", \"close\"),\n    },\n    /** Accessibility label for the close button */\n    ariaCloseLabel: {\n        type: String,\n        default: () => getOption(\"taginput.ariaCloseLabel\"),\n    },\n    /** Native options to use in HTML5 validation */\n    autocomplete: {\n        type: String,\n        default: () => getOption(\"taginput.autocomplete\", \"off\"),\n    },\n    /** Enable html 5 native validation */\n    useHtml5Validation: {\n        type: Boolean,\n        default: () => getOption(\"useHtml5Validation\", true),\n    },\n    /** The message which is shown when a validation error occurs */\n    validationMessage: { type: String, default: undefined },\n    /**\n     * Append the component to another part of the DOM.\n     * Set `true` to append the component to the body.\n     * In addition, any CSS selector string or an actual DOM node can be used.\n     */\n    teleport: {\n        type: [Boolean, String, Object],\n        default: () => getOption(\"taginput.teleport\", false),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of input when expanded */\n    expandedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the input container */\n    containerClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the input container size */\n    sizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the entered item variant */\n    variantClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the close button of entered item */\n    closeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the entered item */\n    itemClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the counter element */\n    counterClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /**\n     * Class configuration for the underlying autocomplete component\n     * @ignore\n     */\n    autocompleteClasses: {\n        type: Object,\n        default: () => getOption(\"taginput.autocompleteClasses\", {}),\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * modelValue prop two-way binding\n     * @param value {(string | number | object)[]} updated modelValue prop\n     */\n    (e: \"update:modelValue\", value: T[]): void;\n    /**\n     * on input change event\n     * @param value {String} input value\n     */\n    (e: \"input\", value: string): void;\n    /**\n     * new item got added\n     * @param value {string | number | object} added item\n     */\n    (e: \"add\", value: T): void;\n    /**\n     * item got removed\n     * @param value {string | number | object} removed item\n     */\n    (e: \"remove\", value: T): void;\n    /**\n     * on input focus event\n     * @param event {Event} native event\n     */\n    (e: \"focus\", event: Event): void;\n    /**\n     * on input blur event\n     * @param event {Event} native event\n     */\n    (e: \"blur\", event: Event): void;\n    /**\n     * on input invalid event\n     * @param event {Event} native event\n     */\n    (e: \"invalid\", event: Event): void;\n    /**\n     * on icon click event\n     * @param event {Event} native event\n     */\n    (e: \"icon-click\", event: Event): void;\n    /**\n     * on icon right click event\n     * @param event {Event} native event\n     */\n    (e: \"icon-right-click\", event: Event): void;\n    /** the list inside the dropdown reached the start */\n    (e: \"scroll-start\"): void;\n    /** the list inside the dropdown reached it's end */\n    (e: \"scroll-end\"): void;\n}>();\n\nconst autocompleteRef = ref<ComponentInstance<typeof OAutocomplete<T>>>();\n\nconst items = defineModel<T[]>({ default: () => [] });\n\n// use form input functionalities\nconst { setFocus, onFocus, onBlur, onInvalid } = useInputHandler(\n    autocompleteRef,\n    emits,\n    props,\n);\n\nconst newItem = ref<string>(\"\");\nconst isComposing = ref(false);\n\nconst valueLength = computed(() => newItem.value.trim().length);\nconst itemsLength = computed(() => items.value.length);\n\n/** Show the input field if a maxitems hasn't been set or reached. */\nconst hasInput = computed(\n    () => props.maxitems == null || itemsLength.value < Number(props.maxitems),\n);\n\nwatchEffect(() => {\n    // blur if input is empty\n    if (!hasInput.value) onBlur();\n});\n\n/**\n * If input has pasteSeparators prop,\n * returning new RegExp used to split pasted string.\n */\nconst separatorsAsRegExp = computed(() =>\n    props.separators.length\n        ? new RegExp(\n              props.separators\n                  .map((s) =>\n                      s ? s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\") : null,\n                  )\n                  .join(\"|\"),\n              \"g\",\n          )\n        : null,\n);\n\nfunction getNormalizedItemText(item: T): string {\n    if (typeof item === \"object\") item = getValueByPath(item, props.field);\n    return `${item}`;\n}\n\nfunction addItem(item?: T | string): void {\n    item = item || newItem.value.trim();\n\n    if (item) {\n        if (typeof item === \"string\") {\n            const reg = separatorsAsRegExp.value;\n            if (reg && item.match(reg)) {\n                item.split(reg)\n                    .map((t) => t.trim())\n                    .filter((t) => t.length !== 0)\n                    .map(addItem);\n                return;\n            }\n        }\n        // Add the item input if it is not blank\n        // or previously added (if not allowDuplicates).\n        const itemToAdd = props.createItem(item);\n        const add = !props.allowDuplicates\n            ? items.value.indexOf(itemToAdd) === -1\n            : true;\n        if (add && props.beforeAdding(item)) {\n            items.value = [...items.value, itemToAdd];\n            emits(\"add\", itemToAdd);\n        }\n    }\n\n    // after autocomplete events\n    requestAnimationFrame(() => {\n        newItem.value = \"\";\n        emits(\"input\", newItem.value);\n    });\n}\n\nfunction removeItem(index: number, event?: Event): void {\n    const item = items.value.at(index);\n    items.value = items.value.toSpliced(index, 1);\n    emits(\"remove\", item);\n    if (event) event.stopPropagation();\n    if (props.openOnFocus && autocompleteRef.value) setFocus();\n}\n\n// --- Event Handler ---\n\nfunction onSelect(option: T): void {\n    if (!option) return;\n    addItem(option);\n    nextTick(() => (newItem.value = \"\"));\n}\n\nfunction onKeydown(event: KeyboardEvent): void {\n    if (\n        props.removeOnKeys.indexOf(event.key) !== -1 &&\n        !newItem.value?.length &&\n        itemsLength.value > 0\n    ) {\n        // remove last item\n        removeItem(itemsLength.value - 1);\n    }\n    // Stop if is to accept select only\n    if (props.allowAutocomplete && !props.allowNew) return;\n\n    if (props.confirmKeys.indexOf(event.key) >= 0) {\n        // Allow Tab to advance to next field regardless\n        if (event.key !== \"Tab\") event.preventDefault();\n        if (event.key === \"Enter\" && isComposing.value) return;\n        addItem();\n    }\n}\n\nfunction onInput(value: string | number): void {\n    emits(\"input\", String(value).trim());\n}\n\nfunction handleOnBlur(event: Event): void {\n    // Add item on-blur if not select only\n    if (!props.allowAutocomplete) addItem();\n    onBlur(event);\n}\n\n// --- Computed Component Classes ---\n\nconst attrs = useAttrs();\n\nconst autocompleteRootClasses = defineClasses([\n    \"autocompleteClasses.rootClass\",\n    \"o-taginput__autocomplete\",\n]);\n\nconst autocompleteInputClasses = defineClasses([\n    \"autocompleteClasses.inputClasses.inputClass\",\n    \"o-taginput__input\",\n]);\n\nconst autocompleteBind = computed(() => ({\n    ...attrs,\n    \"root-class\": getActiveClasses(autocompleteRootClasses.value),\n    \"input-classes\": {\n        \"input-class\": getActiveClasses(autocompleteInputClasses.value),\n    },\n    ...props.autocompleteClasses,\n}));\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-taginput\"],\n    [\n        \"expandedClass\",\n        \"o-taginput--expanded\",\n        null,\n        computed(() => props.expanded),\n    ],\n);\n\nconst containerClasses = defineClasses(\n    [\"containerClass\", \"o-taginput__container\"],\n    [\n        \"sizeClass\",\n        \"o-taginput__container--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n);\n\nconst itemClasses = defineClasses(\n    [\"itemClass\", \"o-taginput__item\"],\n    [\n        \"variantClass\",\n        \"o-taginput__item--\",\n        computed(() => props.variant),\n        computed(() => !!props.variant),\n    ],\n);\n\nconst closeClasses = defineClasses([\"closeClass\", \"o-taginput__item__close\"]);\n\nconst counterClasses = defineClasses([\"counterClass\", \"o-taginput__counter\"]);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ focus: setFocus });\n</script>\n\n<template>\n    <div data-oruga=\"taginput\" :class=\"rootClasses\">\n        <div :class=\"containerClasses\" @focus=\"onFocus\" @blur=\"onBlur\">\n            <!--\n                @slot Override selected items\n                @binding {unknown[]} items - selected items\n            -->\n            <slot name=\"selected\" :items=\"items\" :remove-item=\"removeItem\">\n                <span\n                    v-for=\"(item, index) in items\"\n                    :key=\"getNormalizedItemText(item) + index\"\n                    :class=\"itemClasses\">\n                    <span>{{ getNormalizedItemText(item) }}</span>\n                    <o-icon\n                        v-if=\"closable\"\n                        :class=\"closeClasses\"\n                        clickable\n                        :pack=\"iconPack\"\n                        :icon=\"closeIcon\"\n                        :aria-label=\"ariaCloseLabel\"\n                        both\n                        @click=\"removeItem(index, $event)\" />\n                </span>\n            </slot>\n\n            <o-autocomplete\n                v-show=\"hasInput\"\n                ref=\"autocompleteRef\"\n                v-model=\"newItem\"\n                v-bind=\"autocompleteBind\"\n                :data=\"data\"\n                :field=\"field\"\n                :icon=\"icon\"\n                :icon-pack=\"iconPack\"\n                :maxlength=\"maxlength\"\n                :size=\"size\"\n                :disabled=\"disabled\"\n                :autocomplete=\"autocomplete\"\n                :open-on-focus=\"openOnFocus\"\n                :keep-first=\"keepFirst\"\n                :keep-open=\"keepOpen\"\n                :group-field=\"groupField\"\n                :group-options=\"groupOptions\"\n                :has-counter=\"false\"\n                :use-html5-validation=\"useHtml5Validation\"\n                :check-scroll=\"checkScroll\"\n                :teleport=\"teleport\"\n                :confirm-keys=\"confirmKeys\"\n                :placeholder=\"placeholder\"\n                :validation-message=\"validationMessage\"\n                :expanded=\"expanded\"\n                @input=\"onInput\"\n                @focus=\"onFocus\"\n                @blur=\"handleOnBlur\"\n                @invalid=\"onInvalid\"\n                @keydown=\"onKeydown\"\n                @compositionstart=\"isComposing = true\"\n                @compositionend=\"isComposing = false\"\n                @select=\"onSelect\"\n                @scroll-start=\"$emit('scroll-start')\"\n                @scroll-end=\"$emit('scroll-end')\"\n                @icon-click=\"$emit('icon-click', $event)\"\n                @icon-right-click=\"$emit('icon-right-click', $event)\">\n                <template v-if=\"$slots.header\" #header>\n                    <!--\n                        @slot Define an additional header\n                    -->\n                    <slot name=\"header\" />\n                </template>\n\n                <template v-if=\"$slots.default\" #default=\"props\">\n                    <!--\n                        @slot Override the select option\n                        @binding {object} option - option object\n                        @binding {number} index - option index\n                        @binding {unknown} value - option value\n                    -->\n                    <slot\n                        :option=\"props.option\"\n                        :index=\"props.index\"\n                        :value=\"props.value\" />\n                </template>\n\n                <template v-if=\"$slots.empty\" #empty>\n                    <!--\n                        @slot Define content for empty state \n                    -->\n                    <slot name=\"empty\" />\n                </template>\n\n                <template v-if=\"$slots.footer\" #footer>\n                    <!--\n                        @slot Define an additional footer\n                    -->\n                    <slot name=\"footer\" />\n                </template>\n            </o-autocomplete>\n        </div>\n\n        <small\n            v-if=\"counter && (maxitems || maxlength)\"\n            :class=\"counterClasses\">\n            <template v-if=\"maxlength && valueLength > 0\">\n                <!--\n                    @slot Override the counter\n                    @binding {number} items - items count\n                    @binding {number} total - total count\n                -->\n                <slot name=\"counter\" :items=\"valueLength\" :total=\"maxlength\">\n                    {{ valueLength }} / {{ maxlength }}\n                </slot>\n            </template>\n\n            <template v-else-if=\"maxitems\">\n                <!--\n                    @slot Override the counter\n                    @binding {number} items - items count\n                    @binding {number} total - total count\n                -->\n                <slot name=\"counter\" :items=\"itemsLength\" :total=\"maxitems\">\n                    {{ itemsLength }} / {{ maxitems }}\n                </slot>\n            </template>\n        </small>\n    </div>\n</template>\n","import type { App, Plugin } from \"vue\";\n\nimport Taginput from \"./Taginput.vue\";\n\nimport { registerComponent } from \"@/utils/plugins\";\n\n/** export taginput plugin */\nexport default {\n    install(Vue: App) {\n        registerComponent(Vue, Taginput);\n    },\n} as Plugin;\n\n/** export taginput components */\nexport { Taginput as OTaginput };\n"],"names":["ref","_useModel","useInputHandler","computed","watchEffect","getValueByPath","index","nextTick","useAttrs","defineClasses","getActiveClasses","registerComponent","Taginput"],"mappings":"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"}