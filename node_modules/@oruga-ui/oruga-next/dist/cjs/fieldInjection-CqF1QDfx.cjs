"use strict";
/*! Oruga v0.8.12 | MIT License | github.com/oruga-ui/oruga */
const vue = require("vue");
const config = require("./config-BGSKriL-.cjs");
const $FieldKey = Symbol("FielData");
function provideField(data) {
  vue.provide($FieldKey, data);
}
function injectField() {
  const parentField = vue.inject($FieldKey, void 0);
  const statusVariant = vue.computed(() => {
    var _a;
    if (!((_a = parentField == null ? void 0 : parentField.value) == null ? void 0 : _a.fieldVariant))
      return void 0;
    if (typeof parentField.value.fieldVariant === "string")
      return parentField.value.fieldVariant;
    if (Array.isArray(parentField.value.fieldVariant)) {
      for (const key in parentField.value.fieldVariant) {
        if (parentField.value.fieldVariant[key])
          return key;
      }
    }
    return void 0;
  });
  const statusMessage = vue.computed(
    () => {
      var _a;
      return ((_a = parentField.value) == null ? void 0 : _a.hasMessage) ? parentField.value.fieldMessage : "";
    }
  );
  const statusVariantIcon = vue.computed(() => {
    const statusVariantIcon2 = config.getOption("statusVariantIcon", {
      success: "check",
      danger: "alert-circle",
      info: "information",
      warning: "alert"
    });
    return statusVariantIcon2[statusVariant.value] || "";
  });
  return {
    parentField,
    statusVariant,
    statusVariantIcon,
    statusMessage
  };
}
exports.injectField = injectField;
exports.provideField = provideField;
//# sourceMappingURL=fieldInjection-CqF1QDfx.cjs.map
