{"version":3,"file":"Loading.vue_vue_type_script_setup_true_lang-CHiDTO9J.cjs","sources":["../../src/components/loading/Loading.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, onMounted, type PropType } from \"vue\";\n\nimport OIcon from \"../icon/Icon.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport {\n    defineClasses,\n    useProgrammaticComponent,\n    usePropBinding,\n} from \"@/composables\";\n\nimport type { ComponentClass, ProgrammaticInstance } from \"@/types\";\n\n/**\n * A simple loading overlay\n * @displayName Loading\n * @style _loading.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OLoading\",\n    configField: \"loading\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Whether loading is active or not, use v-model:active to make it two-way binding. */\n    active: { type: Boolean, default: false },\n    /** Loader will overlay the full page. */\n    fullPage: { type: Boolean, default: true },\n    /** Notification label, unnecessary when default slot is used. */\n    label: { type: String, default: undefined },\n    /** Custom animation (transition name) */\n    animation: {\n        type: String,\n        default: () => getOption(\"loading.animation\", \"fade\"),\n    },\n    /** Is Loading cancable by pressing escape or clicking outside. */\n    cancelable: { type: Boolean, default: false },\n    /** Callback function to call after user canceled (pressed escape / clicked outside). */\n    onCancel: { type: Function as PropType<() => void>, default: () => {} },\n    /** Callback function to call after close (programmatically close or user canceled). */\n    onClose: { type: Function as PropType<() => void>, default: () => {} },\n    /** Icon name to show, unnecessary when default slot is used. */\n    icon: {\n        type: String,\n        default: () => getOption(\"loading.icon\", \"loading\"),\n    },\n    /** Enable spin effect on icon */\n    iconSpin: {\n        type: Boolean,\n        default: () => getOption(\"loading.iconSpin\", true),\n    },\n    /**\n     * Icon size\n     * @values small, medium, large\n     */\n    iconSize: {\n        type: String,\n        default: () => getOption(\"loading.iconSize\", \"medium\"),\n    },\n    /**\n     * DOM element where the loading component will be created on (for programmatic usage).\n     * Note that this also changes fullPage to false.\n     */\n    container: {\n        type: [Object, String] as PropType<string | HTMLElement>,\n        default: () => getOption(\"loading.container\", \"body\"),\n    },\n    /**\n     * This is used internally for programmatic usage\n     * @ignore\n     */\n    programmatic: {\n        type: Object as PropType<ProgrammaticInstance>,\n        default: undefined,\n    },\n    /**\n     * This is used internally for programmatic usage.\n     * @ignore\n     */\n    promise: { type: Promise, default: undefined },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the root element when fullpage */\n    fullPageClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the loading overlay */\n    overlayClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the loading icon */\n    iconClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the loading label */\n    labelClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * active prop two-way binding\n     * @param value {boolean} - updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * fullPage prop two-way binding\n     * @param value {boolean} - updated fullPage prop\n     */\n    (e: \"update:fullPage\", value: boolean): void;\n    /**\n     * on component close event\n     * @param value {any} - close event data\n     */\n    (e: \"close\", ...args: any[]): void;\n}>();\n\nconst rootRef = ref();\n\nconst displayInFullPage = usePropBinding(\"fullPage\", props, emits);\n\n/** add programmatic usage to this component */\nconst { isActive, close, cancel } = useProgrammaticComponent(\n    rootRef,\n    props,\n    emits,\n    {\n        cancelOptions: [\"escape\", \"outside\"],\n    },\n);\n\nonMounted(() => {\n    if (props.programmatic && props.container) displayInFullPage.value = false;\n});\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-load\"],\n    [\"fullPageClass\", \"o-load--fullpage\", null, displayInFullPage],\n);\n\nconst overlayClasses = defineClasses([\"overlayClass\", \"o-load__overlay\"]);\n\nconst iconClasses = defineClasses([\"iconClass\", \"o-load__icon\"]);\n\nconst labelClasses = defineClasses([\"labelClass\", \"o-load__label\"]);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ close, promise: props.promise });\n</script>\n\n<template>\n    <transition :name=\"animation\">\n        <div\n            v-if=\"isActive\"\n            ref=\"rootRef\"\n            data-oruga=\"loading\"\n            role=\"dialog\"\n            :class=\"rootClasses\">\n            <div\n                :class=\"overlayClasses\"\n                :tabindex=\"-1\"\n                aria-hidden=\"true\"\n                @click=\"cancel('outside')\" />\n            <!-- \n                @slot Override icon and label\n                @binding {close} close - function to close the component\n            -->\n            <slot :close=\"close\">\n                <o-icon\n                    :icon=\"icon\"\n                    :spin=\"iconSpin\"\n                    :size=\"iconSize\"\n                    :class=\"iconClasses\"\n                    both />\n                <span v-if=\"label\" :class=\"labelClasses\">\n                    {{ label }}\n                </span>\n            </slot>\n        </div>\n    </transition>\n</template>\n"],"names":["ref","usePropBinding","useProgrammaticComponent","onMounted","defineClasses"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,UAAM,QAAQ;AAuFd,UAAM,QAAQ;AAkBd,UAAM,UAAUA,IAAAA;AAEhB,UAAM,oBAAoBC,aAAA,eAAe,YAAY,OAAO,KAAK;AAGjE,UAAM,EAAE,UAAU,OAAO,OAAW,IAAAC,gBAAA;AAAA,MAChC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACI,eAAe,CAAC,UAAU,SAAS;AAAA,MACvC;AAAA,IAAA;AAGJC,QAAAA,UAAU,MAAM;AACR,UAAA,MAAM,gBAAgB,MAAM;AAAW,0BAAkB,QAAQ;AAAA,IAAA,CACxE;AAID,UAAM,cAAcC,cAAA;AAAA,MAChB,CAAC,aAAa,QAAQ;AAAA,MACtB,CAAC,iBAAiB,oBAAoB,MAAM,iBAAiB;AAAA,IAAA;AAGjE,UAAM,iBAAiBA,cAAA,cAAc,CAAC,gBAAgB,iBAAiB,CAAC;AAExE,UAAM,cAAcA,cAAA,cAAc,CAAC,aAAa,cAAc,CAAC;AAE/D,UAAM,eAAeA,cAAA,cAAc,CAAC,cAAc,eAAe,CAAC;AAKlE,aAAa,EAAE,OAAO,SAAS,MAAM,QAAS,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}