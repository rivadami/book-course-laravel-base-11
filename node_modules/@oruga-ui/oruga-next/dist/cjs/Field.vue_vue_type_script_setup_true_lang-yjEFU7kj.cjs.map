{"version":3,"file":"Field.vue_vue_type_script_setup_true_lang-yjEFU7kj.cjs","sources":["../../src/components/field/Field.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport {\n    computed,\n    ref,\n    useSlots,\n    watch,\n    type PropType,\n    type VNodeArrayChildren,\n} from \"vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { isVNodeEmpty } from \"@/utils/helpers\";\nimport { defineClasses, useMatchMedia } from \"@/composables\";\n\nimport { injectField, provideField } from \"./fieldInjection\";\n\nimport type { ComponentClass, DynamicComponent } from \"@/types\";\n\n/**\n * Fields are used to add functionality to controls and to attach/group components and elements together\n * @displayName Field\n * @style _field.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OField\",\n    configField: \"field\",\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /**\n     * Color of the field and help message, also adds a matching icon.\n     * Used by Input, Select and Autocomplete.\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    variant: { type: String, default: undefined },\n    /** Field label */\n    label: { type: String, default: undefined },\n    /**\n     * Vertical size of input\n     * @values small, medium, large\n     */\n    labelSize: {\n        type: String,\n        default: () => getOption(\"field.labelsize\"),\n    },\n    /** Same as native for set on the label */\n    labelFor: { type: String, default: undefined },\n    /** Help message text */\n    message: { type: String, default: undefined },\n    messageTag: {\n        type: [String, Object, Function] as PropType<DynamicComponent>,\n        default: () => getOption<DynamicComponent>(\"field.messageTag\", \"p\"),\n    },\n    /**\n     * Direct child components/elements of Field will be grouped horizontally\n     * (see which ones at the top of the page).\n     */\n    grouped: { type: Boolean, default: false },\n    /** Allow controls to fill up multiple lines, making it responsive */\n    groupMultiline: { type: Boolean, default: false },\n    /** Group label and control on the same line for horizontal forms */\n    horizontal: { type: Boolean, default: false },\n    /** Field automatically attach controls together */\n    addons: { type: Boolean, default: true },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"field.mobileBreakpoint\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class to align label and control in horizontal forms */\n    horizontalClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class when fields are grouped together */\n    groupedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class when fields fill up multiple lines */\n    groupMultilineClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for field label */\n    labelClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for field label size */\n    labelSizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for field label when horizontal */\n    labelHorizontalClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for field body */\n    bodyClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** \"Class for field body when horizontal */\n    bodyHorizontalClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for components automatically attached together when inside a field */\n    addonsClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the field message */\n    messageClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the message field variant */\n    variantMessageClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the label field variant */\n    variantLabelClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of file component when on mobile */\n    mobileClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the focused field */\n    focusedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the filled field */\n    filledClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\nconst inputId = ref(props.labelFor);\nwatch(\n    () => props.labelFor,\n    (v) => (inputId.value = v),\n);\n\n/** Set internal variant when prop change. */\nconst fieldVariant = ref(props.variant);\nwatch(\n    () => props.variant,\n    (v) => (fieldVariant.value = v),\n);\n\n/** Set internal message when prop change. */\nconst fieldMessage = ref(props.message);\nwatch(\n    () => props.message,\n    (v) => (fieldMessage.value = v),\n);\n\n/** Set parent message if we use Field in Field. */\nwatch(\n    () => fieldMessage.value,\n    (value) => {\n        if (parentField?.value?.hasInnerField) {\n            if (!parentField.value.fieldVariant)\n                parentField.value.setVariant(fieldVariant.value);\n            if (!parentField.value.fieldMessage)\n                parentField.value.setMessage(value);\n        }\n    },\n);\n\n/** this can be set from outside to update the focus state */\nconst isFocused = ref(false);\n/** this can be set from outside to update the filled state */\nconst isFilled = ref(false);\n/** this can be set from sub fields to update the has inner field state */\nconst hasInnerField = ref<boolean>(false);\n\n// inject parent field component if used inside one\nconst { parentField } = injectField();\n// tell parent field it has an inner field\nif (parentField?.value) parentField.value.addInnerField();\n\nconst slots = useSlots();\n\nconst hasLabel = computed(() => props.label || !!slots.label);\n\nconst hasMessage = computed(() => !!fieldMessage.value || !!slots.message);\n\nconst isGrouped = computed(\n    () =>\n        props.grouped ||\n        props.groupMultiline ||\n        hasInnerField.value ||\n        hasAddons.value,\n);\n\nconst hasAddons = computed(\n    () => props.addons && !props.horizontal && !!slots.default,\n);\n\nfunction getInnerContent(vnode): VNodeArrayChildren {\n    const slot = vnode();\n    return slot.length === 1 && Array.isArray(slot[0].children)\n        ? slot[0].children\n        : slot;\n}\n\n// --- Field Dependency Injection Feature ---\n\nconst rootRef = ref();\n\nfunction addInnerField(): void {\n    hasInnerField.value = true;\n}\nfunction setFocus(value: boolean): void {\n    isFocused.value = value;\n}\nfunction setFilled(value: boolean): void {\n    isFilled.value = value;\n}\nfunction setVariant(value: string): void {\n    fieldVariant.value = value;\n}\nfunction setMessage(value: string): void {\n    fieldMessage.value = value;\n}\nfunction setInputId(value: string): void {\n    inputId.value = value;\n}\n\n// Provided data is a computed ref to enjure reactivity.\nconst provideData = computed(() => ({\n    $el: rootRef.value,\n    props,\n    hasInnerField: hasInnerField.value,\n    hasMessage: hasMessage.value,\n    fieldVariant: fieldVariant.value,\n    fieldMessage: fieldMessage.value,\n    addInnerField,\n    setInputId,\n    setFocus,\n    setFilled,\n    setVariant,\n    setMessage,\n}));\n\n// Provide field component data via dependency injection.\nprovideField(provideData);\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-field\"],\n    [\n        \"horizontalClass\",\n        \"o-field--horizontal\",\n        null,\n        computed(() => !!props.horizontal),\n    ],\n    [\"mobileClass\", \"o-field--mobile\", null, isMobile],\n    [\"focusedClass\", \"o-field--focused\", null, isFocused],\n    [\"filledClass\", \"o-field--filled\", null, isFilled],\n);\n\nconst messageClasses = defineClasses(\n    [\"messageClass\", \"o-field__message\"],\n    [\n        \"variantMessageClass\",\n        \"o-field__message-\",\n        fieldVariant,\n        computed(() => !!fieldVariant.value),\n    ],\n);\n\nconst labelClasses = defineClasses(\n    [\"labelClass\", \"o-field__label\"],\n    [\n        \"labelSizeClass\",\n        \"o-field__label-\",\n        computed(() => props.labelSize),\n        computed(() => !!props.labelSize),\n    ],\n    [\n        \"variantLabelClass\",\n        \"o-field__label-\",\n        fieldVariant,\n        computed(() => !!fieldVariant.value),\n    ],\n);\n\nconst labelHorizontalClasses = defineClasses([\n    \"labelHorizontalClass\",\n    \"o-field__horizontal-label\",\n]);\n\nconst bodyClasses = defineClasses([\"bodyClass\", \"o-field__body\"]);\n\nconst bodyHorizontalClasses = defineClasses([\n    \"bodyHorizontalClass\",\n    \"o-field__horizontal-body\",\n]);\n\nconst innerFieldClasses = defineClasses(\n    [\"rootClass\", \"o-field\"],\n    [\n        \"groupMultilineClass\",\n        \"o-field--grouped-multiline\",\n        null,\n        computed(() => props.groupMultiline),\n    ],\n\n    [\"groupedClass\", \"o-field--grouped\", null, computed(() => props.grouped)],\n    [\n        \"addonsClass\",\n        \"o-field--addons\",\n        null,\n        computed(() => !props.grouped && hasAddons.value),\n    ],\n);\n</script>\n\n<template>\n    <div ref=\"rootRef\" data-oruga=\"field\" :class=\"rootClasses\">\n        <div v-if=\"horizontal\" :class=\"labelHorizontalClasses\">\n            <label v-if=\"hasLabel\" :for=\"inputId\" :class=\"labelClasses\">\n                <!--\n                    @slot Override the label\n                    @binding {string} label - label property \n                -->\n                <slot name=\"label\" :label=\"label\">{{ label }}</slot>\n            </label>\n        </div>\n        <template v-else>\n            <label v-if=\"hasLabel\" :for=\"inputId\" :class=\"labelClasses\">\n                <!--\n                    @slot Override the label\n                    @binding {string} label - label property \n                -->\n                <slot name=\"label\" :label=\"label\">{{ label }}</slot>\n            </label>\n        </template>\n\n        <div v-if=\"horizontal\" :class=\"bodyHorizontalClasses\">\n            <template\n                v-for=\"(element, index) in getInnerContent($slots.default)\"\n                :key=\"index\">\n                <component :is=\"element\" v-if=\"isVNodeEmpty(element)\" />\n\n                <OField\n                    v-else\n                    :variant=\"fieldVariant\"\n                    :addons=\"false\"\n                    :message-tag=\"messageTag\"\n                    :message-class=\"messageClass\">\n                    <!-- render inner default slot element -->\n                    <component :is=\"element\" />\n                    <!-- show field message here -->\n                    <template v-if=\"index === 0\" #message>\n                        <slot name=\"message\" :message=\"fieldMessage\">\n                            {{ fieldMessage }}\n                        </slot>\n                    </template>\n                </OField>\n            </template>\n        </div>\n\n        <div v-else-if=\"isGrouped\" :class=\"bodyClasses\">\n            <div :class=\"innerFieldClasses\">\n                <!--\n                   @slot Default content\n                -->\n                <slot />\n            </div>\n        </div>\n\n        <template v-else>\n            <!--\n                @slot Default content\n            -->\n            <slot />\n        </template>\n\n        <component\n            :is=\"messageTag\"\n            v-if=\"hasMessage && !horizontal\"\n            :class=\"messageClasses\">\n            <!--\n                @slot Override the message\n                @binding {string} message - field message \n            -->\n            <slot name=\"message\" :message=\"fieldMessage\">\n                {{ fieldMessage }}\n            </slot>\n        </component>\n    </div>\n</template>\n"],"names":["useMatchMedia","ref","watch","injectField","useSlots","computed","provideField","defineClasses"],"mappings":"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"}