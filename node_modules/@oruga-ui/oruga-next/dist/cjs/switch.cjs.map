{"version":3,"file":"switch.cjs","sources":["../../src/components/switch/Switch.vue","../../src/components/switch/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, ref, type PropType } from \"vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport {\n    defineClasses,\n    useVModelBinding,\n    useInputHandler,\n} from \"@/composables\";\n\nimport type { ComponentClass } from \"@/types\";\n\n/**\n * Switch between two opposing states\n * @displayName Switch\n * @style _switch.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OSwitch\",\n    configField: \"switch\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** @model */\n    modelValue: { type: [String, Number, Boolean], default: undefined },\n    /**\n     * Color of the control\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    variant: {\n        type: String,\n        default: () => getOption(\"switch.variant\"),\n    },\n    /**\n     * Color of the switch when is passive\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    passiveVariant: {\n        type: String,\n        default: () => getOption(\"switch.passiveVariant\"),\n    },\n    /**\n     * Size of the control\n     * @values small, medium, large\n     */\n    size: {\n        type: String,\n        default: () => getOption(\"switch.size\"),\n    },\n    /** Input label, unnecessary when default slot is used */\n    label: { type: String, default: undefined },\n    /** Same as native value */\n    nativeValue: { type: [String, Number, Boolean], default: undefined },\n    /** Same as native disabled */\n    disabled: { type: Boolean, default: false },\n    /** Same as native required */\n    required: { type: Boolean, default: false },\n    /** Name attribute on native checkbox */\n    name: { type: String, default: undefined },\n    /** Overrides the returned value when it's checked */\n    trueValue: { type: [String, Number, Boolean], default: true },\n    /** Overrides the returned value when it's not checked */\n    falseValue: { type: [String, Number, Boolean], default: false },\n    /** Rounded style */\n    rounded: { type: Boolean, default: true },\n    /** Label position */\n    position: { type: String, default: \"right\" },\n    /** Same as native autocomplete options to use in HTML5 validation */\n    autocomplete: {\n        type: String,\n        default: () => getOption(\"switch.autocomplete\", \"off\"),\n    },\n    /** Enable html 5 native validation */\n    useHtml5Validation: {\n        type: Boolean,\n        default: () => getOption(\"useHtml5Validation\", true),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class when switch is disabled */\n    disabledClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the outer switch check */\n    switchClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the outer switch check when checked */\n    switchCheckedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the inner switch check */\n    switchCheckClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the switch when rounded */\n    roundedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the switch passive variant */\n    passiveVariantClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of switch label position */\n    positionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Root class of the native input checkbox */\n    inputClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the native input element when checked */\n    inputCheckedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the switch label */\n    labelClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the switch size */\n    sizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the switch variant */\n    variantClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * modelValue prop two-way binding\n     * @param value {string | number | boolean} updated modelValue prop\n     */\n    (e: \"update:modelValue\", value: string | number | boolean): void;\n    /**\n     * on input change event\n     * @param value {string, number, boolean} input value\n     * @param event {Event} native event\n     */\n    (e: \"input\", value: string | number | boolean, event: Event): void;\n    /**\n     * on input focus event\n     * @param event {Event} native event\n     */\n    (e: \"focus\", event: Event): void;\n    /**\n     * on input blur event\n     * @param event {Event} native event\n     */\n    (e: \"blur\", event: Event): void;\n    /**\n     * on input invalid event\n     * @param event {Event} native event\n     */\n    (e: \"invalid\", event: Event): void;\n}>();\n\nconst inputRef = ref();\n\n// use form input functionalities\nconst { onBlur, onFocus, onInvalid, setFocus } = useInputHandler(\n    inputRef,\n    emits,\n    props,\n);\n\nconst vmodel = useVModelBinding<string | number | boolean>(props, emits, {\n    passive: true,\n});\n\nconst isChecked = computed(\n    () =>\n        vmodel.value === props.trueValue ||\n        (Array.isArray(vmodel.value) &&\n            vmodel.value.includes(props.nativeValue)),\n);\n\nfunction onInput(event: Event): void {\n    emits(\"input\", vmodel.value, event);\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-switch\"],\n    [\n        \"sizeClass\",\n        \"o-switch--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n    [\n        \"disabledClass\",\n        \"o-switch--disabled\",\n        null,\n        computed(() => props.disabled),\n    ],\n    [\n        \"variantClass\",\n        \"o-switch--\",\n        computed(() => props.variant),\n        computed(() => !!props.variant),\n    ],\n    [\n        \"positionClass\",\n        \"o-switch--\",\n        computed(() => props.position),\n        computed(() => !!props.position),\n    ],\n    [\n        \"passiveVariantClass\",\n        \"o-switch--\",\n        computed(() => props.passiveVariant + \"-passive\"),\n        computed(() => !!props.passiveVariant),\n    ],\n);\n\nconst inputClasses = defineClasses(\n    [\"inputClass\", \"o-switch__input\"],\n    [\"inputCheckedClass\", \"o-switch__input--checked\", null, isChecked],\n);\n\nconst switchClasses = defineClasses(\n    [\"switchClass\", \"o-switch__check\"],\n    [\"switchCheckedClass\", \"o-switch__check--checked\", null, isChecked],\n    [\"roundedClass\", \"o-switch--rounded\", null, computed(() => props.rounded)],\n);\n\nconst switchCheckClasses = defineClasses(\n    [\"switchCheckClass\", \"o-switch__check-switch\"],\n    [\"roundedClass\", \"o-switch--rounded\", null, computed(() => props.rounded)],\n);\n\nconst labelClasses = defineClasses([\"labelClass\", \"o-switch__label\"]);\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ focus: setFocus });\n</script>\n\n<template>\n    <label\n        ref=\"label\"\n        :class=\"rootClasses\"\n        data-oruga=\"switch\"\n        role=\"switch\"\n        :aria-checked=\"isChecked\"\n        @click=\"setFocus\"\n        @keydown.prevent.enter=\"setFocus\">\n        <input\n            v-bind=\"$attrs\"\n            ref=\"inputRef\"\n            v-model=\"vmodel\"\n            type=\"checkbox\"\n            role=\"switch\"\n            data-oruga-input=\"switch\"\n            :class=\"inputClasses\"\n            :disabled=\"disabled\"\n            :required=\"required\"\n            :name=\"name\"\n            :autocomplete=\"autocomplete\"\n            :value=\"nativeValue\"\n            :true-value=\"trueValue\"\n            :false-value=\"falseValue\"\n            @click.stop\n            @blur=\"onBlur\"\n            @focus=\"onFocus\"\n            @invalid=\"onInvalid\"\n            @input=\"onInput\" />\n\n        <span :class=\"switchClasses\">\n            <span :class=\"switchCheckClasses\"></span>\n        </span>\n\n        <span v-if=\"label || $slots.default\" :class=\"labelClasses\">\n            <!--\n                @slot Override the label, default is label prop \n            -->\n            <slot>{{ label }}</slot>\n        </span>\n    </label>\n</template>\n","import type { App, Plugin } from \"vue\";\n\nimport Switch from \"./Switch.vue\";\n\nimport { registerComponent } from \"@/utils/plugins\";\n\n/** export switch plugin */\nexport default {\n    install(app: App) {\n        registerComponent(app, Switch);\n    },\n} as Plugin;\n\n/** export switch components */\nexport { Switch as OSwitch };\n"],"names":["ref","useInputHandler","useVModelBinding","computed","defineClasses","registerComponent","Switch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,UAAM,QAAQ;AA6Hd,UAAM,QAAQ;AA6Bd,UAAM,WAAWA,IAAAA;AAGjB,UAAM,EAAE,QAAQ,SAAS,WAAW,SAAa,IAAAC,gBAAA;AAAA,MAC7C;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAGE,UAAA,SAASC,aAAAA,iBAA4C,OAAO,OAAO;AAAA,MACrE,SAAS;AAAA,IAAA,CACZ;AAED,UAAM,YAAYC,IAAA;AAAA,MACd,MACI,OAAO,UAAU,MAAM,aACtB,MAAM,QAAQ,OAAO,KAAK,KACvB,OAAO,MAAM,SAAS,MAAM,WAAW;AAAA,IAAA;AAGnD,aAAS,QAAQ,OAAoB;AAC3B,YAAA,SAAS,OAAO,OAAO,KAAK;AAAA,IACtC;AAIA,UAAM,cAAcC,cAAA;AAAA,MAChB,CAAC,aAAa,UAAU;AAAA,MACxB;AAAA,QACI;AAAA,QACA;AAAA,QACAD,aAAS,MAAM,MAAM,IAAI;AAAA,QACzBA,IAAAA,SAAS,MAAM,CAAC,CAAC,MAAM,IAAI;AAAA,MAC/B;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,QACAA,aAAS,MAAM,MAAM,QAAQ;AAAA,MACjC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACAA,aAAS,MAAM,MAAM,OAAO;AAAA,QAC5BA,IAAAA,SAAS,MAAM,CAAC,CAAC,MAAM,OAAO;AAAA,MAClC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACAA,aAAS,MAAM,MAAM,QAAQ;AAAA,QAC7BA,IAAAA,SAAS,MAAM,CAAC,CAAC,MAAM,QAAQ;AAAA,MACnC;AAAA,MACA;AAAA,QACI;AAAA,QACA;AAAA,QACAA,IAAAA,SAAS,MAAM,MAAM,iBAAiB,UAAU;AAAA,QAChDA,IAAAA,SAAS,MAAM,CAAC,CAAC,MAAM,cAAc;AAAA,MACzC;AAAA,IAAA;AAGJ,UAAM,eAAeC,cAAA;AAAA,MACjB,CAAC,cAAc,iBAAiB;AAAA,MAChC,CAAC,qBAAqB,4BAA4B,MAAM,SAAS;AAAA,IAAA;AAGrE,UAAM,gBAAgBA,cAAA;AAAA,MAClB,CAAC,eAAe,iBAAiB;AAAA,MACjC,CAAC,sBAAsB,4BAA4B,MAAM,SAAS;AAAA,MAClE,CAAC,gBAAgB,qBAAqB,MAAMD,aAAS,MAAM,MAAM,OAAO,CAAC;AAAA,IAAA;AAG7E,UAAM,qBAAqBC,cAAA;AAAA,MACvB,CAAC,oBAAoB,wBAAwB;AAAA,MAC7C,CAAC,gBAAgB,qBAAqB,MAAMD,aAAS,MAAM,MAAM,OAAO,CAAC;AAAA,IAAA;AAG7E,UAAM,eAAeC,cAAA,cAAc,CAAC,cAAc,iBAAiB,CAAC;AAKvD,aAAA,EAAE,OAAO,SAAA,CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5PhC,MAAe,QAAA;AAAA,EACX,QAAQ,KAAU;AACdC,6BAAkB,KAAKC,SAAM;AAAA,EACjC;AACJ;;;"}