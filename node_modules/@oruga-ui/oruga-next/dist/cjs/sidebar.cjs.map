{"version":3,"file":"sidebar.cjs","sources":["../../src/components/sidebar/Sidebar.vue","../../src/components/sidebar/SidebarProgrammatic.ts","../../src/components/sidebar/index.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport {\n    ref,\n    computed,\n    watch,\n    onMounted,\n    onBeforeUnmount,\n    type Component,\n    type PropType,\n} from \"vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { isClient } from \"@/utils/ssr\";\nimport {\n    defineClasses,\n    getActiveClasses,\n    useClickOutside,\n    useMatchMedia,\n    useProgrammaticComponent,\n} from \"@/composables\";\n\nimport type { ComponentClass, ProgrammaticInstance } from \"@/types\";\n\n/**\n * A sidebar to use as left/right overlay or static\n * @displayName Sidebar\n * @style _sidebar.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OSidebar\",\n    configField: \"sidebar\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** Whether siedbar is active or not, use v-model:active to make it two-way binding. */\n    active: { type: Boolean, default: false },\n    /**\n     * Color of the sidebar\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    variant: {\n        type: String,\n        default: () => getOption(\"sidebar.variant\"),\n    },\n    /** Show an overlay like modal */\n    overlay: { type: Boolean, default: getOption(\"sidebar.overlay\", false) },\n    /** Display the Sidebear inline */\n    inline: { type: Boolean, default: false },\n    /**\n     * Sidebar position\n     * @values top, right, bottom, left\n     */\n    position: {\n        type: String as PropType<\"top\" | \"right\" | \"bottom\" | \"left\">,\n        default: () => getOption(\"sidebar.position\", \"left\"),\n    },\n    /** Show sidebar in fullheight */\n    fullheight: {\n        type: Boolean,\n        default: getOption(\"sidebar.fullheight\", false),\n    },\n    /** Show sidebar in fullwidth */\n    fullwidth: {\n        type: Boolean,\n        default: getOption(\"sidebar.fullwidth\", false),\n    },\n    /** Show a small sidebar */\n    reduce: { type: Boolean, default: getOption(\"sidebar.reduce\", false) },\n    /**\n     * Custom layout on mobile\n     * @values fullwidth, reduced, hidden\n     */\n    mobile: {\n        type: String,\n        default: getOption(\"sidebar.mobile\"),\n        validator: (value: string) =>\n            [\"fullwidth\", \"reduced\", \"hidden\"].indexOf(value) >= 0,\n    },\n    /** Expand sidebar on hover when reduced or mobile is reduce */\n    expandOnHover: {\n        type: Boolean,\n        default: getOption(\"sidebar.expandOnHover\", false),\n    },\n    /** Custom animation (transition name) */\n    animation: {\n        type: String,\n        default: () => getOption(\"sidebar.animation\"),\n    },\n    /**\n     * Is Sidebar cancleable by pressing escape or clicking outside.\n     * @values escape, outside, true, false\n     */\n    cancelable: {\n        type: [Array, Boolean] as PropType<string[] | boolean>,\n        default: () => getOption(\"sidebar.cancelable\", [\"escape\", \"outside\"]),\n    },\n    /** Callback function to call after user canceled (pressed escape / clicked outside) */\n    onCancel: { type: Function as PropType<() => void>, default: () => {} },\n    /** Callback function to call after close (programmatically close or user canceled) */\n    onClose: { type: Function as PropType<() => void>, default: () => {} },\n    /**\n     * Use `clip` to remove the body scrollbar, `keep` to have a non scrollable scrollbar to avoid shifting background,\n     * but will set body to position fixed, might break some layouts.\n     * @values keep, clip\n     */\n    scroll: {\n        type: String,\n        default: () => getOption(\"sidebar.scroll\", \"clip\"),\n        validator: (value: string) => [\"clip\", \"keep\"].indexOf(value) >= 0,\n    },\n    /** Destroy sidebar on hide */\n    destroyOnHide: {\n        type: Boolean,\n        default: () => getOption(\"sidebar.destroyOnHide\", false),\n    },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"sidebar.mobileBreakpoint\"),\n    },\n    /**\n     * Append the component to another part of the DOM.\n     * Set `true` to append the component to the body.\n     * In addition, any CSS selector string or an actual DOM node can be used.\n     */\n    teleport: {\n        type: [Boolean, String, Object],\n        default: () => getOption(\"sidebar.teleport\", false),\n    },\n    /**\n     * Component to be injected, used to open a component sidebar programmatically.\n     * Close sidebar within the component by emitting a 'close' event â€” emits('close')\n     */\n    component: {\n        type: [Object, Function] as PropType<Component>,\n        default: undefined,\n    },\n    /** Props to be binded to the injected component. */\n    props: { type: Object, default: undefined },\n    /** Events to be binded to the injected component. */\n    events: { type: Object, default: () => ({}) },\n    /** DOM element where the sidebar component will be created on (for programmatic usage). */\n    container: {\n        type: [Object, String] as PropType<string | HTMLElement>,\n        default: () => getOption(\"sidebar.container\", \"body\"),\n    },\n    /**\n     * This is used internally for programmatic usage.\n     * @ignore\n     */\n    programmatic: {\n        type: Object as PropType<ProgrammaticInstance>,\n        default: undefined,\n    },\n    /**\n     * This is used internally for programmatic usage.\n     * @ignore\n     */\n    promise: { type: Promise, default: undefined },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of sidebar component when its active */\n    activeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of sidebar when teleported */\n    teleportClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar overlay */\n    overlayClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar content */\n    contentClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar position */\n    positionClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar when is fullheight */\n    fullheightClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar when is fullwidth */\n    fullwidthClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar when its inlined */\n    inlineClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar when reduced */\n    reduceClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar when expanded on hover */\n    expandOnHoverClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar variant */\n    variantClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of sidebar component when on mobile */\n    mobileClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the body when sidebar clipped */\n    crollClipClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the body when sidebar is not clipped */\n    noScrollClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar content when sidebar is hidden */\n    hiddenClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the sidebar content when sidebar is visible */\n    visibleClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * active prop two-way binding\n     * @param value {boolean} - updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * on component close event\n     * @param value {any} - close event data\n     */\n    (e: \"close\", ...args: any[]): void;\n}>();\n\nconst rootRef = ref();\nconst sidebarContent = ref();\n\n/** add programmatic usage to this component */\nconst { isActive, close, cancel } = useProgrammaticComponent(\n    rootRef,\n    props,\n    emits,\n    {\n        destroyOnHide: props.destroyOnHide,\n        cancelOptions: getOption(\"sidebar.cancelable\", [\"escape\", \"outside\"]),\n    },\n);\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\nconst savedScrollTop = ref(null);\nconst isAnimating = ref(!props.active);\n\nwatch(isActive, (value) => {\n    if (props.overlay) handleScroll();\n    if (value) addHandler();\n    else removeHandler();\n});\n\nconst _teleport = computed(() =>\n    typeof props.teleport === \"boolean\"\n        ? { to: \"body\", disabled: !props.teleport }\n        : { to: props.teleport, disabled: false },\n);\n\nconst transitionName = computed(() => {\n    if (props.animation) return props.animation;\n\n    const vertical = props.position === \"top\" || props.position === \"bottom\";\n    const right = props.position === \"right\";\n    const open = right ? !isActive.value : isActive.value;\n\n    return open\n        ? vertical\n            ? \"slide-down\"\n            : \"slide-next\"\n        : vertical\n          ? \"slide-up\"\n          : \"slide-prev\";\n});\n\nconst hideOnMobile = computed(\n    () => props.mobile === \"hidden\" && isMobile.value,\n);\n\nonMounted(() => {\n    if (props.active) addHandler();\n});\n\nonBeforeUnmount(() => {\n    removeHandler();\n    if (isClient) {\n        if (props.overlay) {\n            // reset scroll\n            const scrollto = savedScrollTop.value\n                ? savedScrollTop.value\n                : document.documentElement.scrollTop;\n            if (scrollClass.value) {\n                document.body.classList.remove(...scrollClass.value);\n                document.documentElement.classList.remove(...scrollClass.value);\n            }\n            document.documentElement.scrollTop = scrollto;\n            document.body.style.top = null;\n        }\n    }\n});\n\nlet removeOutsideListener = null;\n\n/** add outside click event listener */\nfunction addHandler(): void {\n    if (isClient && !props.overlay) {\n        removeOutsideListener = useClickOutside(sidebarContent, clickedOutside);\n    }\n}\n\n/** remove outside click event listener */\nfunction removeHandler(): void {\n    if (removeOutsideListener !== null) removeOutsideListener();\n}\n\n/** Close fixed sidebar if clicked outside. */\nfunction clickedOutside(event: Event): void {\n    if (props.inline || !isActive.value || isAnimating.value) return;\n    if (props.overlay || !event.composedPath().includes(sidebarContent.value))\n        event.preventDefault();\n    cancel(\"outside\");\n}\n\nfunction handleScroll(): void {\n    if (!isClient) return;\n\n    if (props.scroll === \"clip\") {\n        if (scrollClass.value?.length) {\n            if (isActive.value) {\n                document.documentElement.classList.add(...scrollClass.value);\n            } else {\n                document.documentElement.classList.remove(...scrollClass.value);\n            }\n        }\n        return;\n    }\n\n    savedScrollTop.value = savedScrollTop.value\n        ? savedScrollTop.value\n        : document.documentElement.scrollTop;\n\n    if (scrollClass.value) {\n        if (isActive.value) document.body.classList.add(...scrollClass.value);\n        else document.body.classList.remove(...scrollClass.value);\n    }\n\n    if (isActive.value) {\n        document.body.style.top = `-${savedScrollTop.value}px`;\n        return;\n    }\n\n    document.documentElement.scrollTop = savedScrollTop.value;\n    document.body.style.top = null;\n    savedScrollTop.value = null;\n}\n\n/** Transition after-enter hook */\nfunction afterEnter(): void {\n    isAnimating.value = false;\n}\n\n/** Transition before-leave hook */\nfunction beforeLeave(): void {\n    isAnimating.value = true;\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-side\"],\n    [\"mobileClass\", \"o-side--mobile\", null, isMobile],\n    [\"activeClass\", \"o-side--active\", null, isActive],\n    [\n        \"teleportClass\",\n        \"o-side--teleport\",\n        null,\n        computed(() => !!props.teleport),\n    ],\n    [\"inlineClass\", \"o-side--inline\", null, computed(() => props.inline)],\n);\n\nconst overlayClasses = defineClasses([\"overlayClass\", \"o-side__overlay\"]);\n\nconst contentClasses = defineClasses(\n    [\"contentClass\", \"o-side__content\"],\n    [\n        \"variantClass\",\n        \"o-side__content--\",\n        computed(() => props.variant),\n        computed(() => !!props.variant),\n    ],\n    [\n        \"positionClass\",\n        \"o-side__content--\",\n        computed(() => props.position),\n        computed(() => !!props.position),\n    ],\n    [\n        \"fullheightClass\",\n        \"o-side__content--fullheight\",\n        null,\n        computed(() => props.fullheight),\n    ],\n    [\n        \"fullwidthClass\",\n        \"o-side__content--fullwidth\",\n        null,\n        computed(\n            () =>\n                props.fullwidth ||\n                (props.mobile === \"fullwidth\" && isMobile.value),\n        ),\n    ],\n    [\n        \"reduceClass\",\n        \"o-side__content--reduced\",\n        null,\n        computed(\n            () =>\n                props.reduce || (props.mobile === \"reduced\" && isMobile.value),\n        ),\n    ],\n    [\n        \"expandOnHoverClass\",\n        \"o-side__content--reduced-expand\",\n        null,\n        computed(\n            () =>\n                props.expandOnHover &&\n                (!isMobile.value || props.mobile !== \"fullwidth\"),\n        ),\n    ],\n    [\"visibleClass\", \"o-side__content--visible\", null, isActive],\n    [\n        \"hiddenClass\",\n        \"o-side__content--hidden\",\n        null,\n        computed(() => !isActive.value),\n    ],\n);\n\nconst scrollClasses = defineClasses([\"scrollClipClass\", \"o-clipped\"]);\nconst noScrollClasses = defineClasses([\"noScrollClass\", \"o-noscroll\"]);\n\nconst scrollClass = computed(() =>\n    getActiveClasses(\n        props.scroll === \"clip\" ? scrollClasses.value : noScrollClasses.value,\n    ),\n);\n\n// computed ref must be computed at least once for programmatic usage\nscrollClass.value;\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ close, promise: props.promise });\n</script>\n\n<template>\n    <Teleport :to=\"_teleport.to\" :disabled=\"_teleport.disabled\">\n        <div\n            v-show=\"!hideOnMobile\"\n            ref=\"rootRef\"\n            v-bind=\"$attrs\"\n            :class=\"rootClasses\"\n            data-oruga=\"sidebar\">\n            <div\n                v-if=\"overlay && isActive\"\n                :class=\"overlayClasses\"\n                :tabindex=\"-1\"\n                aria-hidden=\"true\"\n                @click=\"(evt) => clickedOutside(evt)\" />\n            <transition\n                :name=\"transitionName\"\n                @after-enter=\"afterEnter\"\n                @before-leave=\"beforeLeave\">\n                <div\n                    v-show=\"isActive\"\n                    ref=\"sidebarContent\"\n                    :class=\"contentClasses\">\n                    <!--\n                        @slot Sidebar default content, default is component prop\n                        @binding {(...args):void} close - function to close the component\n                    -->\n                    <slot :close=\"close\">\n                        <!-- injected component for programmatic usage -->\n                        <component\n                            v-bind=\"$props.props\"\n                            :is=\"component\"\n                            v-if=\"component\"\n                            v-on=\"$props.events\"\n                            @close=\"close\" />\n                    </slot>\n                </div>\n            </transition>\n        </div>\n    </Teleport>\n</template>\n","import { createVNode, render } from \"vue\";\n\nimport Sidebar from \"./Sidebar.vue\";\nimport type { SidebarProps } from \"./types\";\n\nimport InstanceRegistry from \"@/utils/InstanceRegistry\";\nimport { VueInstance } from \"@/utils/plugins\";\nimport { merge } from \"@/utils/helpers\";\nimport type { OrugaOptions, ProgrammaticExpose } from \"@/types\";\n\ndeclare module \"../../index\" {\n    interface OrugaProgrammatic {\n        sidebar: typeof SidebarProgrammatic;\n    }\n}\n\nconst instances = new InstanceRegistry<typeof Sidebar>();\n\ntype SidebarProgrammaticProps = Readonly<\n    SidebarProps & OrugaOptions[\"sidebar\"]\n>;\n\nconst SidebarProgrammatic = {\n    open(params: SidebarProgrammaticProps): ProgrammaticExpose {\n        const defaultParams = {\n            programmatic: { instances },\n            active: true, // set the active state to true\n        };\n\n        const propsData = merge(defaultParams, params);\n        propsData.promise = new Promise((p1, p2) => {\n            propsData.programmatic.resolve = p1;\n            propsData.programmatic.reject = p2;\n        });\n\n        const app = VueInstance;\n        const vnode = createVNode(Sidebar, propsData);\n        vnode.appContext = app._context;\n        render(vnode, document.createElement(\"div\"));\n        // return exposed functionalities\n        return vnode.component.exposed as ProgrammaticExpose;\n    },\n    closeAll(...args: any[]): void {\n        instances.walk((entry) => entry.exposed.close(...args));\n    },\n};\n\nexport default SidebarProgrammatic;\n","import type { App, Plugin } from \"vue\";\n\nimport Sidebar from \"./Sidebar.vue\";\nimport SidebarProgrammatic from \"./SidebarProgrammatic\";\n\nimport {\n    registerComponent,\n    registerComponentProgrammatic,\n} from \"@/utils/plugins\";\n\n/** export sidebar specific types */\nexport type { SidebarProps } from \"./types\";\n\n/** export sidebar plugin */\nexport default {\n    install(app: App) {\n        registerComponent(app, Sidebar);\n        registerComponentProgrammatic(app, \"sidebar\", SidebarProgrammatic);\n    },\n} as Plugin;\n\n/** export sidebar components */\nexport { SidebarProgrammatic, Sidebar as OSidebar };\n"],"names":["ref","useProgrammaticComponent","getOption","useMatchMedia","watch","computed","onMounted","onBeforeUnmount","isClient","useClickOutside","defineClasses","getActiveClasses","InstanceRegistry","merge","VueInstance","createVNode","Sidebar","render","registerComponent","registerComponentProgrammatic","SidebarProgrammatic"],"mappings":"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"}