{"version":3,"file":"Datepicker.vue_vue_type_script_setup_true_lang-isCSxt5_.cjs","sources":["../../src/components/datepicker/useDatepickerMixins.ts","../../src/components/datepicker/DatepickerTableRow.vue","../../src/components/datepicker/DatepickerTable.vue","../../src/components/datepicker/DatepickerMonth.vue","../../src/components/datepicker/Datepicker.vue"],"sourcesContent":["import { computed } from \"vue\";\nimport { matchWithGroups } from \"./utils\";\nimport type { DatepickerProps } from \"./types\";\n\nexport function useDatepickerMixins(props: DatepickerProps) {\n    /**\n     * Check that selected date is within earliest/latest params and\n     * is within a given month\n     */\n    function isDateSelectable(date: Date, month: number): boolean {\n        const validity = [];\n\n        if (props.minDate) validity.push(date >= props.minDate);\n        if (props.maxDate) validity.push(date <= props.maxDate);\n\n        if (props.nearbyMonthDays && !props.nearbySelectableMonthDays)\n            validity.push(date.getMonth() === month);\n\n        if (props.selectableDates) {\n            if (typeof props.selectableDates === \"function\") {\n                if (props.selectableDates(date)) return true;\n                else validity.push(false);\n            } else {\n                for (let i = 0; i < props.selectableDates.length; i++) {\n                    const enabledDate = props.selectableDates[i];\n                    if (\n                        date.getDate() === enabledDate.getDate() &&\n                        date.getFullYear() === enabledDate.getFullYear() &&\n                        date.getMonth() === enabledDate.getMonth()\n                    )\n                        return true;\n                    else validity.push(false);\n                }\n            }\n        }\n\n        if (props.unselectableDates) {\n            if (typeof props.unselectableDates === \"function\") {\n                validity.push(!props.unselectableDates(date));\n            } else {\n                for (let i = 0; i < props.unselectableDates.length; i++) {\n                    const disabledDate = props.unselectableDates[i];\n                    validity.push(\n                        date.getDate() !== disabledDate.getDate() ||\n                            date.getFullYear() !== disabledDate.getFullYear() ||\n                            date.getMonth() !== disabledDate.getMonth(),\n                    );\n                }\n            }\n        }\n\n        if (props.unselectableDaysOfWeek) {\n            for (let i = 0; i < props.unselectableDaysOfWeek.length; i++) {\n                const dayOfWeek = props.unselectableDaysOfWeek[i];\n                validity.push(date.getDay() !== dayOfWeek);\n            }\n        }\n\n        return validity.indexOf(false) < 0;\n    }\n\n    const isTypeMonth = computed(() => props.type === \"month\");\n\n    const localeOptions = computed(\n        () =>\n            new Intl.DateTimeFormat(props.locale, {\n                year: \"numeric\",\n                month: \"numeric\",\n            }).resolvedOptions() as Intl.DateTimeFormatOptions,\n    );\n\n    /** DateTime Format */\n    const dtf = computed(\n        () => new Intl.DateTimeFormat(props.locale /*, { timeZone: 'UTC' }*/),\n    );\n\n    /** DateTime Month Format */\n    const dtfMonth = computed(\n        () =>\n            new Intl.DateTimeFormat(props.locale, {\n                year: localeOptions.value.year || \"numeric\",\n                month: localeOptions.value.month || \"2-digit\",\n                // timeZone: 'UTC'\n            }),\n    );\n\n    const sampleTime = computed(() => {\n        const d = props.dateCreator();\n        d.setHours(10);\n        d.setSeconds(0);\n        d.setMinutes(0);\n        d.setMilliseconds(0);\n        return d;\n    });\n\n    /** Format date into string */\n    const defaultDateFormatter = (date: Date | Date[]): string => {\n        if (!date) return \"\";\n        const targetDates = Array.isArray(date) ? date : [date];\n        if (!targetDates.length) return \"\";\n        const dates = targetDates.map((date) => {\n            const d = new Date(\n                date.getFullYear(),\n                date.getMonth(),\n                date.getDate(),\n                12,\n            );\n            return !isTypeMonth.value\n                ? dtf.value.format(d)\n                : dtfMonth.value.format(d);\n        });\n        return !props.multiple ? dates.join(\" - \") : dates.join(\", \");\n    };\n\n    /** Parse a string into a date */\n    const defaultDateParser = (date: string): Date[] | Date => {\n        if (!date) return null;\n        const targetDates = !props.multiple ? [date] : date.split(\", \");\n        const dates = targetDates.map((date) => {\n            if (\n                dtf.value.formatToParts &&\n                typeof dtf.value.formatToParts === \"function\"\n            ) {\n                const formatRegex = (\n                    isTypeMonth.value ? dtfMonth.value : dtf.value\n                )\n                    .formatToParts(sampleTime.value)\n                    .map((part) => {\n                        if (part.type === \"literal\") return part.value;\n                        return `((?!=<${part.type}>)\\\\d+)`;\n                    })\n                    .join(\"\");\n                const dateGroups = matchWithGroups(formatRegex, date);\n\n                // We do a simple validation for the group.\n                // If it is not valid, it will fallback to Date.parse below\n                if (\n                    dateGroups.year &&\n                    dateGroups.year.length === 4 &&\n                    dateGroups.month &&\n                    dateGroups.month <= 12\n                ) {\n                    if (isTypeMonth.value)\n                        return new Date(dateGroups.year, dateGroups.month - 1);\n                    else if (dateGroups.day && dateGroups.day <= 31) {\n                        return new Date(\n                            dateGroups.year,\n                            dateGroups.month - 1,\n                            dateGroups.day,\n                            12,\n                        );\n                    }\n                }\n            }\n            // Fallback if formatToParts is not supported or if we were not able to parse a valid date\n            if (!isTypeMonth.value) return new Date(Date.parse(date));\n            const s = date.split(\"/\");\n            const year = s[0].length === 4 ? s[0] : s[1];\n            const month = s[0].length === 2 ? s[0] : s[1];\n            if (year && month) {\n                return new Date(\n                    parseInt(year, 10),\n                    parseInt(month, 10) - 1,\n                    1,\n                    0,\n                    0,\n                    0,\n                    0,\n                );\n            }\n        });\n        return props.multiple ? dates : dates[0];\n    };\n\n    return { isDateSelectable, defaultDateParser, defaultDateFormatter };\n}\n","<script setup lang=\"ts\">\nimport {\n    computed,\n    watch,\n    nextTick,\n    ref,\n    type PropType,\n    type ComponentPublicInstance,\n} from \"vue\";\n\nimport { defineClasses } from \"@/composables\";\n\nimport { useDatepickerMixins } from \"./useDatepickerMixins\";\nimport { weeksInYear, firstWeekOffset } from \"./utils\";\nimport type { DatepickerProps, DatepickerEvent } from \"./types\";\nimport type { ClassBind } from \"@/types\";\n\ndefineOptions({\n    name: \"ODatepickerTableRow\",\n    configField: \"datepicker\",\n});\n\nconst props = defineProps({\n    day: { type: Number, required: true },\n    week: { type: Array as PropType<Date[]>, required: true },\n    month: { type: Number, required: true },\n    selectedDate: {\n        type: [Date, Array] as PropType<Date | Date[]>,\n        default: undefined,\n    },\n    events: { type: Array as PropType<DatepickerEvent[]>, default: undefined },\n    hoveredDateRange: { type: Array as PropType<Date[]>, default: () => [] },\n    pickerProps: {\n        type: Object as PropType<DatepickerProps>,\n        required: true,\n    },\n});\n\nconst emits = defineEmits<{\n    (e: \"select\", value: Date): void;\n    (e: \"hover-enddate\", value: Date): void;\n    (e: \"change-focus\", value: Date): void;\n    (e: \"week-number-click\", value: number): void;\n}>();\n\nconst { isDateSelectable } = useDatepickerMixins(props.pickerProps);\n\nconst datepicker = computed<DatepickerProps>(() => props.pickerProps);\n\nconst hasEvents = computed(() => !!props.events?.length);\n\nconst dayRefs = ref(new Map());\n\nfunction setDayRef(date: Date, el: Element | ComponentPublicInstance): void {\n    const refKey = `day-${date.getMonth()}-${date.getDate()}`;\n    if (el) dayRefs.value.set(refKey, el);\n}\n\nwatch(\n    () => props.day,\n    (day) => {\n        // if day is in week\n        if (props.week.map((d) => d.getDate()).includes(day))\n            nextTick(() => {\n                // $nextTick is needed when month is changed\n                const refKey = `day-${props.month}-${day}`;\n                const ref = dayRefs.value.get(refKey);\n                if (ref) ref.focus();\n            });\n    },\n);\n\nwatch(\n    () => props.month,\n    // clear day refs on month change\n    () => (dayRefs.value = new Map()),\n);\n\nfunction clickWeekNumber(week: number): void {\n    if (datepicker.value.weekNumberClickable) emits(\"week-number-click\", week);\n}\n\nfunction getDayOfYear(input): number {\n    return (\n        Math.round(\n            (input.getTime() - new Date(input.getFullYear(), 0, 1).getTime()) /\n                864e5,\n        ) + 1\n    );\n}\n\nfunction getWeekNumber(mom): number {\n    const dow = datepicker.value.firstDayOfWeek; // first day of week\n    // Rules for the first week : 1 for the 1st January, 4 for the 4th January\n    const doy = datepicker.value.rulesForFirstWeek;\n    const weekOffset = firstWeekOffset(mom.getFullYear(), dow, doy);\n    const week = Math.floor((getDayOfYear(mom) - weekOffset - 1) / 7) + 1;\n    let resWeek;\n    let resYear;\n    if (week < 1) {\n        resYear = mom.getFullYear() - 1;\n        resWeek = week + weeksInYear(resYear, dow, doy);\n    } else if (week > weeksInYear(mom.getFullYear(), dow, doy)) {\n        resWeek = week - weeksInYear(mom.getFullYear(), dow, doy);\n        resYear = mom.getFullYear() + 1;\n    } else {\n        resYear = mom.getFullYear();\n        resWeek = week;\n    }\n    return resWeek;\n}\n\nfunction eventsDateMatch(day: Date): DatepickerEvent[] {\n    if (!props.events?.length) return [];\n    return props.events.filter((event) => event.date.getDay() === day.getDay());\n}\n\n// --- Event Handlers ---\n\nfunction onKeydown(event: KeyboardEvent, weekDay: Date): void {\n    let preventDefault = true;\n    switch (event.key) {\n        case \"Tab\": {\n            preventDefault = false;\n            break;\n        }\n        case \" \":\n        case \"Space\":\n        case \"Spacebar\":\n        case \"Enter\": {\n            selectDate(weekDay);\n            break;\n        }\n\n        case \"ArrowLeft\":\n        case \"Left\": {\n            changeFocus(weekDay, -1);\n            break;\n        }\n        case \"ArrowRight\":\n        case \"Right\": {\n            changeFocus(weekDay, 1);\n            break;\n        }\n        case \"ArrowUp\":\n        case \"Up\": {\n            changeFocus(weekDay, -7);\n            break;\n        }\n        case \"ArrowDown\":\n        case \"Down\": {\n            changeFocus(weekDay, 7);\n            break;\n        }\n    }\n    if (preventDefault) event.preventDefault();\n}\n\n/** Emit select event with chosen date as payload */\nfunction selectDate(date: Date): void {\n    if (datepicker.value.disabled || datepicker.value.readonly) return;\n    if (isDateSelectable(date, props.month)) emits(\"select\", date);\n}\n\nfunction changeFocus(day, inc): void {\n    const nextDay = new Date(day.getTime());\n    nextDay.setDate(day.getDate() + inc);\n    // if next day is out of range or not selectable, move to next selectable date\n    while (\n        (datepicker.value.minDate && nextDay < datepicker.value.minDate) ||\n        (datepicker.value.maxDate && nextDay > datepicker.value.maxDate) ||\n        !isDateSelectable(nextDay, nextDay.getMonth())\n    ) {\n        // revert day selection until selectable day is reached\n        nextDay.setDate(nextDay.getDate() - Math.sign(inc));\n    }\n    setRangeHoverEndDate(nextDay);\n    emits(\"change-focus\", nextDay);\n}\n\nfunction setRangeHoverEndDate(day): void {\n    if (datepicker.value.range) emits(\"hover-enddate\", day);\n}\n\n// --- Computed Component Classes ---\n\nfunction dateMatch(\n    dateOne: Date,\n    dateTwo: Date | Date[],\n    multiple = false,\n): boolean {\n    // if either date is null or undefined, return false\n    // if using multiple flag, return false\n    if (!dateOne || !dateTwo || multiple) return false;\n\n    if (Array.isArray(dateTwo)) {\n        return dateTwo.some(\n            (date) =>\n                dateOne.getDate() === date.getDate() &&\n                dateOne.getFullYear() === date.getFullYear() &&\n                dateOne.getMonth() === date.getMonth(),\n        );\n    }\n    return (\n        dateOne.getDate() === dateTwo.getDate() &&\n        dateOne.getFullYear() === dateTwo.getFullYear() &&\n        dateOne.getMonth() === dateTwo.getMonth()\n    );\n}\n\nfunction dateWithin(\n    dateOne: Date,\n    dates: Date | Date[],\n    multiple = false,\n): boolean {\n    if (!Array.isArray(dates) || multiple) return false;\n    return dateOne > dates[0] && dateOne < dates[1];\n}\n\n/** Build cellClasses for cell using validations */\nfunction cellClasses(day: Date): ClassBind[] {\n    const classes = defineClasses(\n        [\n            \"tableCellSelectedClass\",\n            \"o-dpck__table__cell--selected\",\n            null,\n            dateMatch(day, props.selectedDate) ||\n                dateWithin(day, props.selectedDate, datepicker.value.multiple),\n        ],\n        [\n            \"tableCellFirstSelectedClass\",\n            \"o-dpck__table__cell--first-selected\",\n            null,\n            dateMatch(\n                day,\n                Array.isArray(props.selectedDate) && props.selectedDate[0],\n                datepicker.value.multiple,\n            ),\n        ],\n        [\n            \"tableCellWithinSelectedClass\",\n            \"o-dpck__table__cell--within-selected\",\n            null,\n            dateWithin(day, props.selectedDate, datepicker.value.multiple),\n        ],\n        [\n            \"tableCellLastSelectedClass\",\n            \"o-dpck__table__cell--last-selected\",\n            null,\n            dateMatch(\n                day,\n                Array.isArray(props.selectedDate) && props.selectedDate[1],\n                datepicker.value.multiple,\n            ),\n        ],\n        [\n            \"tableCellFirstHoveredClass\",\n            \"o-dpck__table__cell--first-hovered\",\n            null,\n            dateMatch(\n                day,\n                Array.isArray(props.hoveredDateRange) &&\n                    props.hoveredDateRange[0],\n            ),\n        ],\n        [\n            \"tableCellWithinHoveredClass\",\n            \"o-dpck__table__cell--within-hovered\",\n            null,\n            dateWithin(day, props.hoveredDateRange),\n        ],\n        [\n            \"tableCellLastHoveredClass\",\n            \"o-dpck__table__cell--last-hovered\",\n            null,\n            dateMatch(\n                day,\n                Array.isArray(props.hoveredDateRange) &&\n                    props.hoveredDateRange[1],\n            ),\n        ],\n        [\n            \"tableCellTodayClass\",\n            \"o-dpck__table__cell--today\",\n            null,\n            dateMatch(day, datepicker.value.dateCreator()),\n        ],\n        [\n            \"tableCellSelectableClass\",\n            \"o-dpck__table__cell--selectable\",\n            null,\n            isDateSelectable(day, props.month) &&\n                !datepicker.value.disabled &&\n                !datepicker.value.readonly,\n        ],\n        [\n            \"tableCellUnselectableClass\",\n            \"o-dpck__table__cell--unselectable\",\n            null,\n            !isDateSelectable(day, props.month) || datepicker.value.disabled,\n        ],\n\n        [\n            \"tableCellInvisibleClass\",\n            \"o-dpck__table__cell--invisible\",\n            null,\n            !datepicker.value.nearbyMonthDays && day.getMonth() !== props.month,\n        ],\n\n        [\n            \"tableCellNearbyClass\",\n            \"o-dpck__table__cell--nearby\",\n            null,\n            datepicker.value.nearbySelectableMonthDays &&\n                day.getMonth() !== props.month,\n        ],\n        [\n            \"tableCellTodayClass\",\n            \"o-dpck__table__cell--today\",\n            null,\n            dateMatch(day, datepicker.value.dateCreator()),\n        ],\n    );\n\n    return [\n        ...tableCellClasses.value,\n        ...cellEventsClass.value,\n        ...classes.value,\n    ];\n}\n\nfunction eventClasses(event: DatepickerEvent): ClassBind[] {\n    const classes = defineClasses(\n        [\"tableEventClass\", \"o-dpck__table__event\"],\n        [\n            \"tableEventVariantClass\",\n            \"o-dpck__table__event--\",\n            event.type,\n            !!event.type,\n        ],\n        [\n            \"tableEventIndicatorsClass\",\n            \"o-dpck__table__event--\",\n            datepicker.value.indicators,\n            !!datepicker.value.indicators,\n        ],\n    );\n    return classes.value;\n}\n\nconst tableRowClasses = defineClasses([\"tableRowClass\", \"o-dpck__table__row\"]);\n\nconst tableCellClasses = defineClasses([\n    \"tableCellClass\",\n    \"o-dpck__table__cell\",\n]);\n\nconst tableEventsClasses = defineClasses([\n    \"tableEventsClass\",\n    \"o-dpck__table__events\",\n]);\n\nconst cellEventsClass = defineClasses([\n    \"tableCellEventsClass\",\n    \"o-dpck__table__cell--events\",\n    null,\n    hasEvents,\n]);\n</script>\n\n<template>\n    <div :class=\"tableRowClasses\">\n        <div\n            v-if=\"datepicker.showWeekNumber\"\n            :class=\"tableCellClasses\"\n            :style=\"{\n                cursor: datepicker.weekNumberClickable ? 'pointer' : 'auto',\n            }\"\n            :tabindex=\"datepicker.weekNumberClickable ? 0 : null\"\n            role=\"button\"\n            @click.prevent=\"clickWeekNumber(getWeekNumber(week[6]))\"\n            @keydown.enter.prevent=\"clickWeekNumber(getWeekNumber(week[6]))\">\n            <span>{{ getWeekNumber(week[6]) }}</span>\n        </div>\n        <template v-for=\"(weekDay, idx) in week\" :key=\"idx\">\n            <div\n                v-if=\"\n                    !datepicker.disabled &&\n                    !datepicker.readonly &&\n                    isDateSelectable(weekDay, month)\n                \"\n                :ref=\"(el) => setDayRef(weekDay, el)\"\n                :class=\"cellClasses(weekDay)\"\n                role=\"button\"\n                :tabindex=\"\n                    day === weekDay.getDate() && month === weekDay.getMonth()\n                        ? null\n                        : 0\n                \"\n                @click.prevent=\"selectDate(weekDay)\"\n                @mouseenter=\"setRangeHoverEndDate(weekDay)\"\n                @focus=\"setRangeHoverEndDate(weekDay)\"\n                @keydown.enter.prevent=\"onKeydown($event, weekDay)\">\n                <span>{{ weekDay.getDate() }}</span>\n                <div\n                    v-if=\"eventsDateMatch(weekDay).length\"\n                    :class=\"tableEventsClasses\">\n                    <div\n                        v-for=\"(event, index) in eventsDateMatch(weekDay)\"\n                        :key=\"index\"\n                        :class=\"eventClasses(event)\" />\n                </div>\n            </div>\n            <div v-else :class=\"cellClasses(weekDay)\">\n                <span>{{ weekDay.getDate() }}</span>\n            </div>\n        </template>\n    </div>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, ref, type PropType } from \"vue\";\n\nimport ODatepickerTableRow from \"./DatepickerTableRow.vue\";\n\nimport { isDefined } from \"@/utils/helpers\";\nimport { defineClasses } from \"@/composables\";\n\nimport { useDatepickerMixins } from \"./useDatepickerMixins\";\nimport { weekBuilder } from \"./utils\";\nimport type { DatepickerProps, DatepickerEvent, FocusedDate } from \"./types\";\n\ndefineOptions({\n    name: \"ODatepickerTable\",\n    configField: \"datepicker\",\n});\n\nconst props = defineProps({\n    modelValue: {\n        type: [Date, Array] as PropType<Date | Date[]>,\n        default: undefined,\n    },\n    focusedDate: { type: Object as PropType<FocusedDate>, required: true },\n    dayNames: { type: Array as PropType<string[]>, required: true },\n    monthNames: { type: Array as PropType<string[]>, required: true },\n    pickerProps: {\n        type: Object as PropType<DatepickerProps>,\n        required: true,\n    },\n});\n\nconst emits = defineEmits<{\n    /** modelValue prop two-way binding */\n    (e: \"update:modelValue\", value: Date | Date[]): void;\n    /** focusedDate prop two-way binding */\n    (e: \"update:focusedDate\", value: FocusedDate): void;\n    (e: \"range-start\", value: Date): void;\n    (e: \"range-end\", value: Date): void;\n    (e: \"week-number-click\", value: number): void;\n}>();\n\nconst { isDateSelectable } = useDatepickerMixins(props.pickerProps);\n\nconst focusedDateModel = defineModel<FocusedDate>(\"focusedDate\");\n\nconst selectedBeginDate = ref<Date>();\nconst selectedEndDate = ref<Date>();\nconst hoveredEndDate = ref<Date>();\n\nconst datepicker = computed<DatepickerProps>(() => props.pickerProps);\n\nconst visibleDayNames = computed(() => {\n    const visibleDayNames = [];\n    let index = datepicker.value.firstDayOfWeek;\n    while (visibleDayNames.length < props.dayNames.length) {\n        const currentDayName = props.dayNames[index % props.dayNames.length];\n        visibleDayNames.push(currentDayName);\n        index++;\n    }\n    if (datepicker.value.showWeekNumber) visibleDayNames.unshift(\"\");\n    return visibleDayNames;\n});\n\n/** Return array of all events in the specified month */\nconst eventsInThisMonth = computed(() => {\n    if (!datepicker.value.events) return [];\n    return datepicker.value.events\n        .map((event) =>\n            !event.date && event instanceof Date ? { date: event } : event,\n        )\n        .filter(\n            (event) =>\n                event.date.getMonth() === focusedDateModel.value.month &&\n                event.date.getFullYear() === focusedDateModel.value.year,\n        );\n});\n\n/** Return array of all weeks in the specified month */\nconst weeksInThisMonth = computed(() => {\n    validateFocusedDay();\n    const month = focusedDateModel.value.month;\n    const year = focusedDateModel.value.year;\n    const weeksInThisMonth = [];\n\n    let startingDay = 1;\n\n    while (weeksInThisMonth.length < 6) {\n        const newWeek = weekBuilder(\n            startingDay,\n            month,\n            year,\n            datepicker.value.firstDayOfWeek,\n        );\n        weeksInThisMonth.push(newWeek);\n        startingDay += 7;\n    }\n\n    return weeksInThisMonth;\n});\n\nfunction eventsInThisWeek(week: Date[]): DatepickerEvent[] {\n    if (!datepicker.value.events) return [];\n    return eventsInThisMonth.value.filter((event) => {\n        const stripped = new Date(event.date);\n        stripped.setHours(0, 0, 0, 0);\n        const timed = stripped.getTime();\n        return week.some((weekDate) => weekDate.getTime() === timed);\n    });\n}\n\nconst hoveredDateRange = computed(() => {\n    if (!datepicker.value.range || selectedEndDate.value) return [];\n    return (\n        hoveredEndDate.value < selectedBeginDate.value\n            ? [hoveredEndDate.value, selectedBeginDate.value]\n            : [selectedBeginDate.value, hoveredEndDate.value]\n    ).filter(isDefined);\n});\n\nfunction validateFocusedDay(): void {\n    const currentDate = new Date(\n        focusedDateModel.value.year,\n        focusedDateModel.value.month,\n        focusedDateModel.value.day,\n    );\n    if (isDateSelectable(currentDate, focusedDateModel.value.month)) return;\n\n    let day = 0;\n    // Number of days in the current month\n    const monthDays = new Date(\n        focusedDateModel.value.year,\n        focusedDateModel.value.month + 1,\n        0,\n    ).getDate();\n    let firstFocusable = null;\n    while (!firstFocusable && ++day < monthDays) {\n        const date = new Date(\n            focusedDateModel.value.year,\n            focusedDateModel.value.month,\n            day,\n        );\n        if (isDateSelectable(date, focusedDateModel.value.month)) {\n            firstFocusable = currentDate;\n            focusedDateModel.value = {\n                day: date.getDate(),\n                month: date.getMonth(),\n                year: date.getFullYear(),\n            };\n        }\n    }\n}\n\n// --- Event Handlers ---\n\n/** Emit input event with selected date as payload for v-model in parent */\nfunction onSelectedDate(date: Date): void {\n    if (datepicker.value.disabled) return;\n    if (!datepicker.value.range && !datepicker.value.multiple)\n        emits(\"update:modelValue\", date);\n    else if (datepicker.value.range) handleSelectRangeDate(date);\n    else if (datepicker.value.multiple) handleSelectMultipleDates(date);\n}\n\n/*\n * If both begin and end dates are set, reset the end date and set the begin date.\n * If only begin date is selected, emit an array of the begin date and the new date.\n * If not set, only set the begin date.\n */\nfunction handleSelectRangeDate(date: Date): void {\n    if (selectedBeginDate.value && selectedEndDate.value) {\n        selectedBeginDate.value = date;\n        selectedEndDate.value = undefined;\n        emits(\"range-start\", date);\n    } else if (selectedBeginDate.value && !selectedEndDate.value) {\n        if (selectedBeginDate.value > date) {\n            selectedEndDate.value = selectedBeginDate.value;\n            selectedBeginDate.value = date;\n        } else {\n            selectedEndDate.value = date;\n        }\n        emits(\"range-end\", date);\n        emits(\"update:modelValue\", [\n            selectedBeginDate.value,\n            selectedEndDate.value,\n        ]);\n    } else {\n        selectedBeginDate.value = date;\n        emits(\"range-start\", date);\n    }\n}\n\n/*\n * If selected date already exists list of selected dates, remove it from the list\n * Otherwise, add date to list of selected dates\n */\nfunction handleSelectMultipleDates(date: Date): void {\n    if (!Array.isArray(props.modelValue)) return;\n\n    let multipleSelectedDates = props.modelValue;\n    const multipleSelect = multipleSelectedDates.filter(\n        (selectedDate) =>\n            selectedDate.getDate() === date.getDate() &&\n            selectedDate.getFullYear() === date.getFullYear() &&\n            selectedDate.getMonth() === date.getMonth(),\n    );\n    if (multipleSelect.length) {\n        multipleSelectedDates = multipleSelectedDates.filter(\n            (selectedDate) =>\n                selectedDate.getDate() !== date.getDate() ||\n                selectedDate.getFullYear() !== date.getFullYear() ||\n                selectedDate.getMonth() !== date.getMonth(),\n        );\n    } else {\n        multipleSelectedDates = [...multipleSelectedDates, date];\n    }\n    emits(\"update:modelValue\", multipleSelectedDates);\n}\n\nfunction onRangeHoverEndDate(date: Date): void {\n    hoveredEndDate.value = date;\n}\n\nfunction onChangeFocus(date: Date): void {\n    focusedDateModel.value = {\n        day: date.getDate(),\n        month: date.getMonth(),\n        year: date.getFullYear(),\n    };\n}\n\n// --- Computed Component Classes ---\n\nconst tableClasses = defineClasses([\"tableClass\", \"o-dpck__table\"]);\n\nconst tableHeadClasses = defineClasses([\n    \"tableHeadClass\",\n    \"o-dpck__table__head\",\n]);\n\nconst tableCellClasses = defineClasses([\n    \"tableCellClass\",\n    \"o-dpck__table__cell\",\n]);\n\nconst tableHeadCellClasses = defineClasses([\n    \"tableHeadCellClass\",\n    \"o-dpck__table__head-cell\",\n]);\n\nconst tableBodyClasses = defineClasses([\n    \"tableBodyClass\",\n    \"o-dpck__table__body\",\n]);\n</script>\n\n<template>\n    <section :class=\"tableClasses\">\n        <header :class=\"tableHeadClasses\">\n            <div\n                v-for=\"(day, index) in visibleDayNames\"\n                :key=\"index\"\n                :class=\"[...tableCellClasses, ...tableHeadCellClasses]\">\n                <span>{{ day }}</span>\n            </div>\n        </header>\n        <div :class=\"tableBodyClasses\">\n            <o-datepicker-table-row\n                v-for=\"(week, index) in weeksInThisMonth\"\n                :key=\"index\"\n                :selected-date=\"modelValue\"\n                :day=\"focusedDateModel.day\"\n                :week=\"week\"\n                :month=\"focusedDateModel.month\"\n                :events=\"eventsInThisWeek(week)\"\n                :hovered-date-range=\"hoveredDateRange\"\n                :picker-props=\"props.pickerProps\"\n                @select=\"onSelectedDate\"\n                @hover-enddate=\"onRangeHoverEndDate\"\n                @change-focus=\"onChangeFocus\"\n                @week-number-click=\"$emit('week-number-click', $event)\" />\n        </div>\n    </section>\n</template>\n","<script setup lang=\"ts\">\nimport {\n    computed,\n    ref,\n    nextTick,\n    watch,\n    type PropType,\n    type ComponentPublicInstance,\n} from \"vue\";\n\nimport { isDefined } from \"@/utils/helpers\";\nimport { defineClasses } from \"@/composables\";\n\nimport type { DatepickerProps, DatepickerEvent, FocusedDate } from \"./types\";\nimport type { ClassBind } from \"@/types\";\n\ndefineOptions({\n    name: \"ODatepickerMonth\",\n    configField: \"datepicker\",\n    inheritAttrs: false,\n});\n\nconst props = defineProps({\n    modelValue: {\n        type: [Date, Array] as PropType<Date | Date[]>,\n        default: undefined,\n    },\n    monthNames: { type: Array as PropType<string[]>, required: true },\n    focusedDate: { type: Object as PropType<FocusedDate>, required: true },\n    pickerProps: {\n        type: Object as PropType<DatepickerProps>,\n        required: true,\n    },\n});\n\nconst emits = defineEmits<{\n    /** modelValue prop two-way binding */\n    (e: \"update:modelValue\", value: Date | Date[]): void;\n    /** focusedDate prop two-way binding */\n    (e: \"update:focusedDate\", value: FocusedDate): void;\n    (e: \"range-start\", value: Date): void;\n    (e: \"range-end\", value: Date): void;\n}>();\n\nconst selectedBeginDate = ref<Date>();\nconst selectedEndDate = ref<Date>();\nconst hoveredEndDate = ref<Date>();\n\nconst datepicker = computed<DatepickerProps>(() => props.pickerProps);\n\nconst hasEvents = computed(() => !!datepicker.value.events?.length);\n\nconst monthRefs = ref(new Map());\n\nfunction setMonthRef(date: Date, el: Element | ComponentPublicInstance): void {\n    const refKey = `month-${date.getMonth()}`;\n    if (el) monthRefs.value.set(refKey, el);\n}\n\nwatch(\n    () => props.focusedDate.month,\n    (month) => {\n        const refKey = `month-${month}`;\n        nextTick(() => {\n            // $nextTick is needed when month is changed\n            const ref = monthRefs.value.get(refKey);\n            if (ref?.length > 0 && ref[0]) {\n                ref[0].focus();\n            }\n        });\n    },\n);\n\n/** Return array of all events in the specified month */\nconst eventsInThisYear = computed(() => {\n    if (!datepicker.value.events) return [];\n\n    return datepicker.value.events\n        .map((event) => {\n            if (!event.date && event instanceof Date) event = { date: event };\n            if (!event.type) event.type = \"is-primary\";\n            return event;\n        })\n        .filter((event) => event.date.getFullYear() === props.focusedDate.year);\n});\n\nconst monthDates = computed(() => {\n    const year = props.focusedDate.year;\n    const months = [];\n    for (let i = 0; i < 12; i++) {\n        const d = new Date(year, i, 1);\n        d.setHours(0, 0, 0, 0);\n        months.push(d);\n    }\n    return months;\n});\n\nconst hoveredDateRange = computed(() => {\n    if (!datepicker.value.range || !selectedEndDate.value) return [];\n\n    return (\n        hoveredEndDate.value < selectedBeginDate.value\n            ? [hoveredEndDate.value, selectedBeginDate.value]\n            : [selectedBeginDate.value, hoveredEndDate.value]\n    ).filter(isDefined);\n});\n\nfunction eventsDateMatch(day): DatepickerEvent[] {\n    if (!eventsInThisYear.value.length) return [];\n    return eventsInThisYear.value.filter(\n        (event) => event.date.getMonth() === day.getMonth(),\n    );\n}\n\nfunction isDateSelectable(date: Date): boolean {\n    const validity = [];\n\n    if (datepicker.value.minDate)\n        validity.push(date >= datepicker.value.minDate);\n    if (datepicker.value.maxDate)\n        validity.push(date <= datepicker.value.maxDate);\n\n    validity.push(date.getFullYear() === props.focusedDate.year);\n\n    if (datepicker.value.selectableDates) {\n        if (typeof datepicker.value.selectableDates === \"function\") {\n            if (datepicker.value.selectableDates(date)) return true;\n            else validity.push(false);\n        } else {\n            for (let i = 0; i < datepicker.value.selectableDates.length; i++) {\n                const enabledDate = datepicker.value.selectableDates[i];\n                if (\n                    date.getFullYear() === enabledDate.getFullYear() &&\n                    date.getMonth() === enabledDate.getMonth()\n                )\n                    return true;\n                else validity.push(false);\n            }\n        }\n    }\n\n    if (datepicker.value.unselectableDates) {\n        if (typeof datepicker.value.unselectableDates === \"function\") {\n            validity.push(!datepicker.value.unselectableDates(date));\n        } else {\n            for (\n                let i = 0;\n                i < datepicker.value.unselectableDates.length;\n                i++\n            ) {\n                const disabledDate = datepicker.value.unselectableDates[i];\n                validity.push(\n                    date.getFullYear() !== disabledDate.getFullYear() ||\n                        date.getMonth() !== disabledDate.getMonth(),\n                );\n            }\n        }\n    }\n\n    if (datepicker.value.unselectableDaysOfWeek) {\n        for (\n            let i = 0;\n            i < datepicker.value.unselectableDaysOfWeek.length;\n            i++\n        ) {\n            const dayOfWeek = datepicker.value.unselectableDaysOfWeek[i];\n            validity.push(date.getDay() !== dayOfWeek);\n        }\n    }\n\n    return validity.indexOf(false) < 0;\n}\n\n// --- Event Handlers ---\n\nfunction onKeydown(event: KeyboardEvent, weekDay: Date): void {\n    let preventDefault = true;\n    switch (event.key) {\n        case \"Tab\": {\n            preventDefault = false;\n            break;\n        }\n        case \" \":\n        case \"Space\":\n        case \"Spacebar\":\n        case \"Enter\": {\n            selectDate(weekDay);\n            break;\n        }\n\n        case \"ArrowLeft\":\n        case \"Left\": {\n            changeFocus(weekDay, -1);\n            break;\n        }\n        case \"ArrowRight\":\n        case \"Right\": {\n            changeFocus(weekDay, 1);\n            break;\n        }\n        case \"ArrowUp\":\n        case \"Up\": {\n            changeFocus(weekDay, -7);\n            break;\n        }\n        case \"ArrowDown\":\n        case \"Down\": {\n            changeFocus(weekDay, 7);\n            break;\n        }\n    }\n    if (preventDefault) event.preventDefault();\n}\n\n/*\n * Emit update:modelValue event with selected date as payload for v-model in parent\n */\nfunction selectDate(date: Date): void {\n    if (datepicker.value.disabled || datepicker.value.readonly) return;\n    if (\n        !datepicker.value.range &&\n        !datepicker.value.multiple &&\n        isDateSelectable(date)\n    )\n        emits(\"update:modelValue\", date);\n    else if (datepicker.value.range) handleSelectRangeDate(date);\n    else if (datepicker.value.multiple) handleSelectMultipleDates(date);\n}\n\n/*\n * If both begin and end dates are set, reset the end date and set the begin date.\n * If only begin date is selected, emit an array of the begin date and the new date.\n * If not set, only set the begin date.\n */\nfunction handleSelectRangeDate(date: Date): void {\n    if (selectedBeginDate.value && selectedEndDate.value) {\n        selectedBeginDate.value = date;\n        selectedEndDate.value = undefined;\n        emits(\"range-start\", date);\n    } else if (selectedBeginDate.value && !selectedEndDate.value) {\n        if (selectedBeginDate.value > date) {\n            selectedEndDate.value = selectedBeginDate.value;\n            selectedBeginDate.value = date;\n        } else {\n            selectedEndDate.value = date;\n        }\n        emits(\"range-end\", date);\n        emits(\"update:modelValue\", [\n            selectedBeginDate.value,\n            selectedEndDate.value,\n        ]);\n    } else {\n        selectedBeginDate.value = date;\n        emits(\"range-start\", date);\n    }\n}\n\nconst multipleSelectedDates = computed(() =>\n    datepicker.value.multiple && props.modelValue ? props.modelValue : [],\n);\n\nfunction handleSelectMultipleDates(date: Date): void {\n    if (!Array.isArray(props.modelValue)) return;\n    let multipleSelectedDates = props.modelValue;\n\n    const multipleSelect = multipleSelectedDates.filter(\n        (selectedDate) =>\n            selectedDate.getDate() === date.getDate() &&\n            selectedDate.getFullYear() === date.getFullYear() &&\n            selectedDate.getMonth() === date.getMonth(),\n    );\n    if (multipleSelect.length) {\n        multipleSelectedDates = multipleSelectedDates.filter(\n            (selectedDate) =>\n                selectedDate.getDate() !== date.getDate() ||\n                selectedDate.getFullYear() !== date.getFullYear() ||\n                selectedDate.getMonth() !== date.getMonth(),\n        );\n    } else {\n        multipleSelectedDates.push(date);\n    }\n    emits(\"update:modelValue\", multipleSelectedDates);\n}\n\nfunction changeFocus(month: Date, inc: number): void {\n    month.setMonth(month.getMonth() + inc);\n    const focused = {\n        day: month.getDate(),\n        month: month.getMonth(),\n        year: month.getFullYear(),\n    };\n    emits(\"update:focusedDate\", focused);\n}\n\nfunction onRangeHoverEndDate(day: Date): void {\n    if (datepicker.value.range) hoveredEndDate.value = day;\n}\n\n// --- Computed Component Classes ---\n\nfunction dateMatch(dateOne, dateTwo, multiple = false): boolean {\n    // if either date is null or undefined, return false\n    if (!dateOne || !dateTwo || multiple) return false;\n    if (Array.isArray(dateTwo))\n        return dateTwo.some(\n            (date) =>\n                dateOne.getFullYear() === date.getFullYear() &&\n                dateOne.getMonth() === date.getMonth(),\n        );\n    return (\n        dateOne.getFullYear() === dateTwo.getFullYear() &&\n        dateOne.getMonth() === dateTwo.getMonth()\n    );\n}\n\nfunction dateWithin(dateOne, dates, multiple = false): boolean {\n    if (!Array.isArray(dates) || multiple) return false;\n    return dateOne > dates[0] && dateOne < dates[1];\n}\n\nfunction dateMultipleSelected(dateOne, dates, multiple = false): boolean {\n    if (!Array.isArray(dates) || !multiple) return false;\n    return dates.some(\n        (date) =>\n            dateOne.getDate() === date.getDate() &&\n            dateOne.getFullYear() === date.getFullYear() &&\n            dateOne.getMonth() === date.getMonth(),\n    );\n}\n\nconst monthClasses = defineClasses([\"monthClass\", \"o-dpck__month\"]);\n\nconst monthBodyClasses = defineClasses([\n    \"monthBodyClass\",\n    \"o-dpck__month__body\",\n]);\n\nconst monthTableClasses = defineClasses([\n    \"monthTableClass\",\n    \"o-dpck__month__table\",\n]);\n\nconst monthCellClasses = defineClasses(\n    [\"monthCellClass\", \"o-dpck__month__cell\"],\n    [\"monthCellEventsClass\", \"o-dpck__month__cell--events\", null, hasEvents],\n);\n\n/**\n * Build cellClasses for cell using validations\n */\nfunction cellClasses(day: Date): ClassBind[] {\n    const classes = defineClasses(\n        [\n            \"monthCellSelectedClass\",\n            \"o-dpck__month__cell--selected\",\n            null,\n            dateMatch(day, props.modelValue, datepicker.value.multiple) ||\n                dateWithin(day, props.modelValue, datepicker.value.multiple) ||\n                dateMultipleSelected(\n                    day,\n                    multipleSelectedDates.value,\n                    datepicker.value.multiple,\n                ),\n        ],\n\n        [\n            \"monthCellFirstSelectedClass\",\n            \"o-dpck__month__cell--first-selected\",\n            null,\n            dateMatch(\n                day,\n                Array.isArray(props.modelValue) && props.modelValue[0],\n                datepicker.value.multiple,\n            ),\n        ],\n        [\n            \"monthCellWithinSelectedClass\",\n            \"o-dpck__month__cell--within-selected\",\n            null,\n            dateWithin(day, props.modelValue, datepicker.value.multiple),\n        ],\n        [\n            \"monthCellLastSelectedClass\",\n            \"o-dpck__month__cell--last-selected\",\n            null,\n            dateMatch(\n                day,\n                Array.isArray(props.modelValue) && props.modelValue[1],\n                datepicker.value.multiple,\n            ),\n        ],\n        [\n            \"monthCellWithinHoveredRangeClass\",\n            \"o-dpck__month__cell--within-hovered-range\",\n            null,\n            hoveredDateRange.value &&\n                hoveredDateRange.value.length === 2 &&\n                (dateMatch(day, hoveredDateRange.value) ||\n                    dateWithin(day, hoveredDateRange.value)),\n        ],\n        [\n            \"monthCellFirstHoveredClass\",\n            \"o-dpck__month__cell--first-hovered\",\n            null,\n            dateMatch(\n                day,\n                Array.isArray(hoveredDateRange.value) &&\n                    hoveredDateRange.value[0],\n            ),\n        ],\n        [\n            \"monthCellWithinHoveredClass\",\n            \"o-dpck__month__cell--within-hovered\",\n            null,\n            dateWithin(day, hoveredDateRange.value),\n        ],\n        [\n            \"monthCellLastHoveredClass\",\n            \"o-dpck__month__cell--last-hovered\",\n            null,\n            dateMatch(\n                day,\n                Array.isArray(hoveredDateRange.value) &&\n                    hoveredDateRange.value[1],\n            ),\n        ],\n        [\n            \"monthCellTodayClass\",\n            \"o-dpck__month__cell--today\",\n            null,\n            dateMatch(day, datepicker.value.dateCreator()),\n        ],\n        [\n            \"monthCellSelectableclass\",\n            \"o-dpck__month__cell--selectable\",\n            null,\n            isDateSelectable(day) &&\n                !datepicker.value.disabled &&\n                !datepicker.value.readonly,\n        ],\n        [\n            \"monthCellUnselectableClass\",\n            \"o-dpck__month__cell--unselectable\",\n            null,\n            !isDateSelectable(day) || datepicker.value.disabled,\n        ],\n    );\n\n    return [...monthCellClasses.value, ...classes.value];\n}\n</script>\n\n<template>\n    <section :class=\"monthClasses\">\n        <div :class=\"monthBodyClasses\">\n            <div :class=\"monthTableClasses\">\n                <template v-for=\"(date, idx) in monthDates\" :key=\"idx\">\n                    <div\n                        v-if=\"\n                            !datepicker.disabled &&\n                            !datepicker.readonly &&\n                            isDateSelectable(date)\n                        \"\n                        :ref=\"(el) => setMonthRef(date, el)\"\n                        :class=\"cellClasses(date)\"\n                        role=\"button\"\n                        :tabindex=\"\n                            focusedDate.month === date.getMonth() ? null : 0\n                        \"\n                        @click.prevent=\"selectDate(date)\"\n                        @mouseenter=\"onRangeHoverEndDate(date)\"\n                        @focus=\"onRangeHoverEndDate(date)\"\n                        @keydown.prevent=\"onKeydown($event, date)\">\n                        {{ monthNames[date.getMonth()] }}\n                        <div v-if=\"eventsDateMatch(date).length\" class=\"events\">\n                            <div\n                                v-for=\"(event, index) in eventsDateMatch(date)\"\n                                :key=\"index\"\n                                class=\"event\"\n                                :class=\"event.type\" />\n                        </div>\n                    </div>\n                    <div v-else :class=\"cellClasses(date)\">\n                        {{ monthNames[date.getMonth()] }}\n                    </div>\n                </template>\n            </div>\n        </div>\n    </section>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, ref, watch, type PropType } from \"vue\";\n\nimport OButton from \"../button/Button.vue\";\nimport OSelect from \"../select/Select.vue\";\nimport OPickerWrapper from \"../utils/PickerWrapper.vue\";\nimport ODatepickerTable from \"./DatepickerTable.vue\";\nimport ODatepickerMonth from \"./DatepickerMonth.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { isDate } from \"@/utils/helpers\";\nimport { defineClasses, getActiveClasses, useMatchMedia } from \"@/composables\";\n\nimport { useDatepickerMixins } from \"./useDatepickerMixins\";\nimport { getMonthNames, getWeekdayNames } from \"./utils\";\n\nimport type { DatepickerEvent, FocusedDate } from \"./types\";\nimport type { ComponentClass, OrugaOptions } from \"@/types\";\n\n/**\n * An input with a simple dropdown/modal for selecting a date, uses native datepicker for mobile\n * @displayName Datepicker\n * @style _datepicker.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"ODatepicker\",\n    configField: \"datepicker\",\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /** @model */\n    modelValue: {\n        type: [Date, Array] as PropType<Date | Date[]>,\n        default: undefined,\n    },\n    /** The active state of the dropdown, use v-model:active to make it two-way binding. */\n    active: { type: Boolean, default: false },\n    /**\n     * Define picker mode\n     * @values date, month\n     */\n    type: {\n        type: String,\n        default: \"date\",\n        validator: (value: string) => [\"month\", \"date\"].indexOf(value) >= 0,\n    },\n    /** Set custom day names, else use names based on locale */\n    dayNames: {\n        type: Array as PropType<string[]>,\n        default: () => getOption(\"datepicker.dayNames\", undefined),\n    },\n    /** Set custom month names, else use names based on locale */\n    monthNames: {\n        type: Array as PropType<string[]>,\n        default: () => getOption(\"datepicker.monthNames\", undefined),\n    },\n    /**\n     * Size of the control input\n     * @values small, medium, large\n     */\n    size: {\n        type: String,\n        default: () => getOption(\"datepicker.size\"),\n    },\n    /** Set default date to focus on */\n    focusedDate: { type: Date, default: undefined },\n    /** Events to display on picker */\n    events: { type: Array as PropType<DatepickerEvent[]>, default: undefined },\n    /** Event indicators for style class definiton */\n    indicators: { type: String, default: \"dots\" },\n    /** Min date to select */\n    minDate: { type: Date, default: undefined },\n    /** Max date to select */\n    maxDate: { type: Date, default: undefined },\n    /** Enable date range selection */\n    range: { type: Boolean, default: false },\n    /** Makes input full width when inside a grouped or addon field */\n    expanded: { type: Boolean, default: false },\n    /** Makes the input rounded */\n    rounded: { type: Boolean, default: false },\n    /** Display datepicker inline */\n    inline: { type: Boolean, default: false },\n    /** Input placeholder */\n    placeholder: { type: String, default: undefined },\n    /** Same as native input readonly */\n    readonly: { type: Boolean, default: false },\n    /** Same as native, also push new item to v-model instead of replacing */\n    multiple: { type: Boolean, default: false },\n    /** Same as native disabled */\n    disabled: { type: Boolean, default: false },\n    /** Open dropdown on focus */\n    openOnFocus: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.openOnFocus\", true),\n    },\n    /** Close dropdown on click */\n    closeOnClick: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.closeOnClick\", true),\n    },\n    /** Date format locale */\n    locale: {\n        type: String,\n        default: () => getOption(\"locale\"),\n    },\n    /** Custom function to format a date into a string */\n    dateFormatter: {\n        type: Function as PropType<(date: Date | Date[]) => string>,\n        default: (\n            date: Date | Date[],\n            defaultFunction: (date: Date | Date[]) => string,\n        ) => getOption(\"datepicker.dateFormatter\", defaultFunction)(date),\n    },\n    /** Custom function to parse a string into a date */\n    dateParser: {\n        type: Function as PropType<(date: string) => Date | Date[]>,\n        default: (\n            date: string,\n            defaultFunction: (date: string) => Date | Date[],\n        ) => getOption(\"datepicker.dateParser\", defaultFunction)(date),\n    },\n    /** Date creator function, default is `new Date()` */\n    dateCreator: {\n        type: Function as PropType<() => Date>,\n        default: () => getOption(\"datepicker.dateCreator\", () => new Date())(),\n    },\n    /** Define a list of dates which can be selected */\n    selectableDates: {\n        type: [Array, Function] as PropType<Date[] | ((date: Date) => boolean)>,\n        default: () => [],\n    },\n    /** Define a list of dates which can not be selected */\n    unselectableDates: {\n        type: [Array, Function] as PropType<Date[] | ((date: Date) => boolean)>,\n        default: () => [],\n    },\n    /** Define a list of weeks which can not be selected */\n    unselectableDaysOfWeek: {\n        type: Array as PropType<number[]>,\n        default: () =>\n            getOption(\"datepicker.unselectableDaysOfWeek\", undefined),\n    },\n    /** Show nearby month days */\n    nearbyMonthDays: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.nearbyMonthDays\", true),\n    },\n    /** Define if nearby month days can be selected */\n    nearbySelectableMonthDays: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.nearbySelectableMonthDays\", false),\n    },\n    /** Show weeek numbers */\n    showWeekNumber: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.showWeekNumber\", false),\n    },\n    /** Define if weeek numbers are clickable */\n    weekNumberClickable: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.weekNumberClickable\", false),\n    },\n    /** Set the first day of a week */\n    firstDayOfWeek: {\n        type: Number,\n        default: () => getOption(\"datepicker.firstDayOfWeek\", 0),\n    },\n    /** Rules for the first week : 1 for the 1st January, 4 for the 4th January */\n    rulesForFirstWeek: { type: Number, default: () => 4 },\n    /** Define the range of years to show */\n    yearsRange: {\n        type: Array as PropType<number[]>,\n        default: () => getOption(\"datepicker.yearsRange\", [-100, 10]),\n    },\n    /** Trap dropdown on focus */\n    trapFocus: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.trapFocus\", true),\n    },\n    /** Position of the dropdown relative to the input */\n    position: { type: String, default: undefined },\n    /** Enable dropdown mobile modal */\n    mobileModal: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.mobileModal\", true),\n    },\n    /**\n     * Enable mobile native input if mobile agent\n     * (Default will be switched to `false` in 0.9)\n     */\n    mobileNative: {\n        type: Boolean,\n        default: () => getOption(\"datepicker.mobileNative\", true), // TODO: make false\n    },\n    /**\n     * Icon pack to use\n     * @values mdi, fa, fas and any other custom icon pack\n     */\n    iconPack: {\n        type: String,\n        default: () => getOption(\"datepicker.iconPack\", undefined),\n    },\n    /** Icon to be shown */\n    icon: {\n        type: String,\n        default: () => getOption(\"datepicker.icon\", undefined),\n    },\n    /** Icon to be added on the right side */\n    iconRight: {\n        type: String,\n        default: () => getOption(\"datepicker.iconRight\", undefined),\n    },\n    /** Make the icon right clickable */\n    iconRightClickable: { type: Boolean, default: false },\n    /** Icon name for previous icon */\n    iconPrev: {\n        type: String,\n        default: () => getOption(\"datepicker.iconPrev\", \"chevron-left\"),\n    },\n    /** Icon name for next icon */\n    iconNext: {\n        type: String,\n        default: () => getOption(\"datepicker.iconNext\", \"chevron-right\"),\n    },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"datepicker.mobileBreakpoint\"),\n    },\n    /**\n     * Append the component to another part of the DOM.\n     * Set `true` to append the component to the body.\n     * In addition, any CSS selector string or an actual DOM node can be used.\n     */\n    teleport: {\n        type: [Boolean, String, Object],\n        default: () => getOption(\"datepicker.teleport\", false),\n    },\n    /** Enable html 5 native validation */\n    useHtml5Validation: {\n        type: Boolean,\n        default: () => getOption(\"useHtml5Validation\", true),\n    },\n    /** The message which is shown when a validation error occurs */\n    validationMessage: { type: String, default: undefined },\n    /** Accessibility next button aria label */\n    ariaNextLabel: {\n        type: String,\n        default: () => getOption(\"datepicker.ariaNextLabel\", \"Next Page\"),\n    },\n    /** Accessibility previous button aria label  */\n    ariaPreviousLabel: {\n        type: String,\n        default: () => getOption(\"datepicker.ariaNextLabel\", \"Previous Page\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker size */\n    sizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker box where you choose the date */\n    boxClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker header inside the box */\n    headerClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker buttons inside the box */\n    headerButtonsClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker buttons inside the box when a size is choosen */\n    headerButtonsSizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the prev button inside the Datepicker box */\n    prevButtonClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the next button inside the Datepicker box */\n    nextButtonClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the month and year selects container inside the Datepicker box */\n    listsClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker footer */\n    footerClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker table inside the box */\n    tableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of Datepicker header with days of the week inside the table */\n    tableHeadClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the cell inside the table header */\n    tableHeadCellClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table body inside the box */\n    tableBodyClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table row */\n    tableRowClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell */\n    tableCellClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell when nearby month days are hidden */\n    tableCellInvisibleClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of table cell when it's selected */\n    tableCellSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the first selected table cell when in range */\n    tableCellFirstSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cells within the range when the range is selected */\n    tableCellWithinSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the last selected table cell during range selection */\n    tableCellLastSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the first hovered table cell during range selection */\n    tableCellFirstHoveredClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell when hovered during range selection */\n    tableCellWithinHoveredClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the last table cell hovered during range selection */\n    tableCellLastHoveredClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell of the current day */\n    tableCellTodayClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell that is selectable */\n    tableCellSelectableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell that is unselectable */\n    tableCellUnselectableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell when nearby days (prev/next month) are selectable */\n    tableCellNearbyClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the cell of a row when at least one event is present */\n    tableCellEventsClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the events container */\n    tableEventsClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the event */\n    tableEventClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the event indicator when a `variant` is specified */\n    tableEventVariantClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the event indicator */\n    tableEventIndicatorsClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker table inside the box when type is month */\n    monthClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table body inside the box when type is month */\n    monthBodyClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table container when type is month */\n    monthTableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell when type is month */\n    monthCellClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of table cell when it's selected when type is month */\n    monthCellSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the first selected table cell when in range when type is month */\n    monthCellFirstSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cells within the range when the range is selected when type is month */\n    monthCellWithinSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the last selected table cell during range selection when type is month */\n    monthCellLastSelectedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the first hovered table cell during range selection when type is month */\n    monthCellWithinHoveredRangeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell when hovered during range selection when type is month */\n    monthCellFirstHoveredClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell when hovered during range selection and cell is in range when type is month */\n    monthCellWithinHoveredClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the last table cell hovered during range selection when type is month */\n    monthCellLastHoveredClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell of the current day when type is month */\n    monthCellTodayClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell that is selectable when type is month */\n    monthCellSelectableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the table cell that is unselectable when type is month */\n    monthCellUnselectableClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /**Class of the events container when type is month */\n    monthCellEventsClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the Datepicker when on mobile */\n    mobileClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /**\n     * Class configuration for the internal input component\n     * @ignore\n     */\n    inputClasses: {\n        type: Object,\n        default: () =>\n            getOption<OrugaOptions[\"input\"]>(\"datepicker.inputClasses\", {}),\n    },\n    /**\n     * Class configuration for the internal dropdown component\n     * @ignore\n     */\n    dropdownClasses: {\n        type: Object,\n        default: () =>\n            getOption<OrugaOptions[\"dropdown\"]>(\n                \"datepicker.dropdownClasses\",\n                {},\n            ),\n    },\n    /**\n     * Class configuration for the internal select component\n     * @ignore\n     */\n    selectClasses: {\n        type: Object,\n        default: () =>\n            getOption<OrugaOptions[\"select\"]>(\"datepicker.selectClasses\", {}),\n    },\n});\n\nconst emits = defineEmits<{\n    /**\n     * modelValue prop two-way binding\n     * @param value {Date | Date[]} updated modelValue prop\n     */\n    (e: \"update:modelValue\", value: Date | Date[]): void;\n    /**\n     * active prop two-way binding\n     * @param value {boolean} updated active prop\n     */\n    (e: \"update:active\", value: boolean): void;\n    /**\n     * on range start is selected event\n     * @param value {Date} range start date\n     */\n    (e: \"range-start\", value: Date): void;\n    /**\n     * on range end is selected event\n     * @param value {Date} range end date\n     */\n    (e: \"range-end\", value: Date): void;\n    /**\n     * on month change event\n     * @param value {number} month number\n     */\n    (e: \"change-month\", value: number): void;\n    /**\n     * on year change event\n     * @param value {number} year number\n     */\n    (e: \"change-year\", value: number): void;\n    /**\n     * on input focus event\n     * @param event {Event} native event\n     */\n    (e: \"focus\", event: Event): void;\n    /**\n     * on input blur event\n     * @param event {Event} native event\n     */\n    (e: \"blur\", event: Event): void;\n    /**\n     * on input invalid event\n     * @param event {Event} native event\n     */\n    (e: \"invalid\", event: Event): void;\n    /**\n     * on icon click event\n     * @param event {Event} native event\n     */\n    (e: \"icon-click\", event: Event): void;\n    /**\n     * on icon right click event\n     * @param event {Event} native event\n     */\n    (e: \"icon-right-click\", event: Event): void;\n}>();\n\nconst { defaultDateFormatter, defaultDateParser } = useDatepickerMixins(props);\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\nconst pickerRef = ref<InstanceType<typeof OPickerWrapper>>();\n\n/** modelvalue of selected date */\nconst vmodel = defineModel<Date | Date[]>({ default: null });\n\n/** Dropdown active state */\nconst isActive = defineModel<boolean>(\"active\", { default: false });\n\n/** modelValue formated into string */\nconst formattedValue = computed(() =>\n    Array.isArray(vmodel.value)\n        ? (props.dateFormatter as any)([...vmodel.value], defaultDateFormatter)\n        : (props.dateFormatter as any)(vmodel.value, defaultDateFormatter),\n);\n\nconst isTypeMonth = computed(() => props.type === \"month\");\n\n/**\n * When v-model is changed:\n *   1. Update internal value.\n */\nwatch(\n    () => props.modelValue,\n    (value) => {\n        const isArray = Array.isArray(value);\n        const currentDate = isArray\n            ? value.length\n                ? value[value.length - 1]\n                : props.dateCreator()\n            : value\n              ? value\n              : props.dateCreator();\n        if (\n            !isArray ||\n            (isArray &&\n                Array.isArray(vmodel.value) &&\n                value.length > vmodel.value.length)\n        )\n            // updateInternalState\n            focusedDateData.value = {\n                day: currentDate.getDate(),\n                month: currentDate.getMonth(),\n                year: currentDate.getFullYear(),\n            };\n    },\n);\n\nwatch(\n    () => props.focusedDate,\n    (value) => {\n        if (value) {\n            focusedDateData.value = {\n                day: value.getDate(),\n                month: value.getMonth(),\n                year: value.getFullYear(),\n            };\n        }\n    },\n);\n\nconst _initialDate =\n    (Array.isArray(props.modelValue)\n        ? props.modelValue[0]\n        : props.modelValue) ||\n    props.focusedDate ||\n    props.dateCreator();\n\nif (\n    !props.modelValue &&\n    props.maxDate &&\n    props.maxDate.getFullYear() < _initialDate.getFullYear()\n) {\n    _initialDate.setFullYear(props.maxDate.getFullYear());\n}\n\nconst focusedDateData = ref<FocusedDate>({\n    day: _initialDate.getDate(),\n    month: _initialDate.getMonth(),\n    year: _initialDate.getFullYear(),\n});\n\n/*\n * Emit input event on month and/or year change\n */\nwatch(\n    () => focusedDateData.value.month,\n    (value) => emits(\"change-month\", value),\n);\nwatch(\n    () => focusedDateData.value.year,\n    (value) => emits(\"change-year\", value),\n);\n\nconst computedMonthNames = computed(() =>\n    Array.isArray(props.monthNames)\n        ? props.monthNames\n        : getMonthNames(props.locale),\n);\n\nconst listOfMonths = computed(() => {\n    let minMonth = 0;\n    let maxMonth = 12;\n    if (\n        props.minDate &&\n        focusedDateData.value.year === props.minDate.getFullYear()\n    ) {\n        minMonth = props.minDate.getMonth();\n    }\n    if (\n        props.maxDate &&\n        focusedDateData.value.year === props.maxDate.getFullYear()\n    ) {\n        maxMonth = props.maxDate.getMonth();\n    }\n    return computedMonthNames.value.map((name, index) => ({\n        name: name,\n        index: index,\n        disabled: index < minMonth || index > maxMonth,\n    }));\n});\n\nconst computedDayNames = computed(() => {\n    if (Array.isArray(props.dayNames)) return props.dayNames;\n    return getWeekdayNames(props.locale);\n});\n\n/*\n * Returns an array of years for the year dropdown. If earliest/latest\n * dates are set by props, range of years will fall within those dates.\n */\nconst listOfYears = computed(() => {\n    let latestYear = focusedDateData.value.year + props.yearsRange[1];\n    if (props.maxDate && props.maxDate.getFullYear() < latestYear) {\n        latestYear = Math.max(\n            props.maxDate.getFullYear(),\n            focusedDateData.value.year,\n        );\n    }\n\n    let earliestYear = focusedDateData.value.year + props.yearsRange[0];\n    if (props.minDate && props.minDate.getFullYear() > earliestYear) {\n        earliestYear = Math.min(\n            props.minDate.getFullYear(),\n            focusedDateData.value.year,\n        );\n    }\n\n    return Array.from(\n        { length: latestYear - earliestYear + 1 || 1 },\n        (value, index) => earliestYear + index,\n    ).reverse();\n});\n\nconst showPrev = computed(() => {\n    if (!props.minDate) return true;\n    if (isTypeMonth.value)\n        return focusedDateData.value.year > props.minDate.getFullYear();\n\n    const dateToCheck = new Date(\n        focusedDateData.value.year,\n        focusedDateData.value.month,\n    );\n    const date = new Date(\n        props.minDate.getFullYear(),\n        props.minDate.getMonth(),\n    );\n    return dateToCheck > date;\n});\n\n/**\n * Either decrement month by 1 if not January or decrement year by 1\n * and set month to 11 (December) or decrement year when 'month'\n */\nfunction prev(): void {\n    if (props.disabled) return;\n\n    if (isTypeMonth.value) {\n        focusedDateData.value.year -= 1;\n    } else {\n        if (focusedDateData.value.month > 0) {\n            focusedDateData.value.month -= 1;\n        } else {\n            focusedDateData.value.month = 11;\n            focusedDateData.value.year -= 1;\n        }\n    }\n}\n\nconst showNext = computed(() => {\n    if (!props.maxDate) return true;\n    if (isTypeMonth.value)\n        return focusedDateData.value.year < props.maxDate.getFullYear();\n\n    const dateToCheck = new Date(\n        focusedDateData.value.year,\n        focusedDateData.value.month,\n    );\n    const date = new Date(\n        props.maxDate.getFullYear(),\n        props.maxDate.getMonth(),\n    );\n    return dateToCheck < date;\n});\n\n/**\n * Either increment month by 1 if not December or increment year by 1\n * and set month to 0 (January) or increment year when 'month'\n */\nfunction next(): void {\n    if (props.disabled) return;\n    if (isTypeMonth.value) {\n        focusedDateData.value.year += 1;\n    } else {\n        if (focusedDateData.value.month < 11) {\n            focusedDateData.value.month += 1;\n        } else {\n            focusedDateData.value.month = 0;\n            focusedDateData.value.year += 1;\n        }\n    }\n}\n\nfunction formatNative(value: Date | Date[]): string {\n    if (Array.isArray(value)) value = value[0];\n    const date = new Date(value);\n    // return null if no value is given or value can't parse to proper date\n    if (!value || !date || isNaN(date.getTime())) return null;\n\n    if (isTypeMonth.value) {\n        // Format date into string 'YYYY-MM'\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        return year + \"-\" + ((month < 10 ? \"0\" : \"\") + month);\n    } else {\n        // Format date into string 'YYYY-MM-DD'\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return (\n            year +\n            \"-\" +\n            ((month < 10 ? \"0\" : \"\") + month) +\n            \"-\" +\n            ((day < 10 ? \"0\" : \"\") + day)\n        );\n    }\n}\n\n// --- Event Handler ---\n\n/** Parse string into date */\nfunction onChange(value: string): void {\n    const date = (props.dateParser as any)(value, defaultDateParser);\n\n    const isValid =\n        isDate(date) ||\n        (Array.isArray(date) &&\n            date.length === 2 &&\n            isDate(date[0]) &&\n            isDate(date[1]));\n\n    vmodel.value = isValid ? date : null;\n}\n\n/** Parse date from string */\nfunction onChangeNativePicker(value: string): void {\n    const s = value ? value.split(\"-\") : [];\n    if (s.length === 3) {\n        const year = parseInt(s[0], 10);\n        const month = parseInt(s[1]) - 1;\n        const day = parseInt(s[2]);\n        vmodel.value = new Date(year, month, day);\n    } else {\n        vmodel.value = null;\n    }\n}\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-dpck\"],\n    [\n        \"sizeClass\",\n        \"o-dpck--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n    [\"mobileClass\", \"o-dpck--mobile\", null, isMobile],\n    [\"expandedClass\", \"o-dpck--expanded\", null, computed(() => props.expanded)],\n);\n\nconst headerClasses = defineClasses([\"headerClass\", \"o-dpck__header\"]);\n\nconst headerButtonsClasses = defineClasses(\n    [\"headerButtonsClass\", \"o-dpck__header__buttons\"],\n    [\n        \"headerButtonsSizeClass\",\n        \"o-dpck__header__buttons--\",\n        computed(() => props.size),\n        computed(() => !!props.size),\n    ],\n);\n\nconst prevButtonClasses = defineClasses([\n    \"prevButtonClass\",\n    \"o-dpck__header__previous\",\n]);\n\nconst nextButtonClasses = defineClasses([\n    \"nextButtonClass\",\n    \"o-dpck__header__next\",\n]);\n\nconst listsClasses = defineClasses([\"listsClass\", \"o-dpck__header__list\"]);\n\nconst footerClasses = defineClasses([\"footerClass\", \"o-dpck__footer\"]);\n\nconst dropdownClass = defineClasses([\n    \"dropdownClasses.rootClass\",\n    \"o-tpck__dropdown\",\n]);\n\nconst boxClasses = defineClasses([\"boxClass\", \"o-dpck__box\"]);\nconst boxClassBind = computed(() => getActiveClasses(boxClasses.value));\n\n// --- Expose Public Functionalities ---\n\n/** expose functionalities for programmatic usage */\ndefineExpose({ focus: () => pickerRef.value?.focus() });\n</script>\n\n<template>\n    <OPickerWrapper\n        ref=\"pickerRef\"\n        v-model:active=\"isActive\"\n        data-oruga=\"datepicker\"\n        :value=\"vmodel\"\n        :picker=\"props\"\n        :formatted-value=\"formattedValue\"\n        :native-type=\"!isTypeMonth ? 'date' : 'month'\"\n        :native-value=\"formatNative(vmodel)\"\n        :native-max=\"formatNative(maxDate)\"\n        :native-min=\"formatNative(minDate)\"\n        :stay-open=\"multiple\"\n        :dropdown-classes=\"dropdownClass\"\n        :root-classes=\"rootClasses\"\n        :box-class=\"boxClassBind\"\n        @change=\"onChange\"\n        @native-change=\"onChangeNativePicker\"\n        @focus=\"$emit('focus', $event)\"\n        @blur=\"$emit('blur', $event)\"\n        @invalid=\"$emit('invalid', $event)\"\n        @icon-click=\"$emit('icon-click', $event)\"\n        @icon-right-click=\"$emit('icon-right-click', $event)\">\n        <template v-if=\"$slots.trigger\" #trigger>\n            <!--\n                @slot Override the trigger\n            -->\n            <slot name=\"trigger\" />\n        </template>\n        <header :class=\"headerClasses\">\n            <!--\n                @slot Override the header\n            -->\n            <slot name=\"header\">\n                <div :class=\"headerButtonsClasses\">\n                    <OButton\n                        v-if=\"!disabled\"\n                        :class=\"prevButtonClasses\"\n                        :disabled=\"!showPrev\"\n                        :aria-label=\"ariaPreviousLabel\"\n                        :icon-pack=\"iconPack\"\n                        :icon-left=\"iconPrev\"\n                        outlined\n                        @click.prevent=\"prev\"\n                        @keydown.enter.prevent=\"prev\"\n                        @keydown.space.prevent=\"prev\" />\n\n                    <OButton\n                        v-if=\"!disabled\"\n                        :class=\"nextButtonClasses\"\n                        :disabled=\"!showNext\"\n                        :aria-label=\"ariaNextLabel\"\n                        :icon-pack=\"iconPack\"\n                        :icon-left=\"iconNext\"\n                        outlined\n                        @click.prevent=\"next\"\n                        @keydown.enter.prevent=\"next\"\n                        @keydown.space.prevent=\"next\" />\n\n                    <div :class=\"listsClasses\">\n                        <o-select\n                            v-if=\"!isTypeMonth\"\n                            v-model=\"focusedDateData.month\"\n                            :disabled=\"disabled\"\n                            :size=\"size\"\n                            v-bind=\"selectClasses\">\n                            <option\n                                v-for=\"month in listOfMonths\"\n                                :key=\"month.name\"\n                                :value=\"month.index\"\n                                :disabled=\"month.disabled\">\n                                {{ month.name }}\n                            </option>\n                        </o-select>\n                        <o-select\n                            v-model=\"focusedDateData.year\"\n                            :disabled=\"disabled\"\n                            :size=\"size\"\n                            v-bind=\"selectClasses\">\n                            <option\n                                v-for=\"year in listOfYears\"\n                                :key=\"year\"\n                                :value=\"year\">\n                                {{ year }}\n                            </option>\n                        </o-select>\n                    </div>\n                </div>\n            </slot>\n        </header>\n        <!--\n            @slot Override the body\n        -->\n        <slot name=\"body\">\n            <o-datepicker-month\n                v-if=\"isTypeMonth\"\n                v-model=\"vmodel\"\n                v-model:focused-date=\"focusedDateData\"\n                :month-names=\"computedMonthNames\"\n                :picker-props=\"props\"\n                @range-start=\"(date) => $emit('range-start', date)\"\n                @range-end=\"(date) => $emit('range-end', date)\" />\n            <o-datepicker-table\n                v-else\n                v-model=\"vmodel\"\n                v-model:focused-date=\"focusedDateData\"\n                :day-names=\"computedDayNames\"\n                :month-names=\"computedMonthNames\"\n                :picker-props=\"props\"\n                @range-start=\"(date) => $emit('range-start', date)\"\n                @range-end=\"(date) => $emit('range-end', date)\" />\n        </slot>\n        <footer v-if=\"$slots.footer\" :class=\"footerClasses\">\n            <!--\n                @slot Define an additional footer\n            -->\n            <slot name=\"footer\" />\n        </footer>\n    </OPickerWrapper>\n</template>\n"],"names":["computed","date","matchWithGroups","ref","watch","nextTick","firstWeekOffset","weeksInYear","defineClasses","_useModel","visibleDayNames","weeksInThisMonth","weekBuilder","isDefined","multipleSelectedDates","useMatchMedia","getMonthNames","getWeekdayNames","isDate","getActiveClasses"],"mappings":"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"}