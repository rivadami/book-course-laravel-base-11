import { ComponentClass, DynamicComponent } from '../../types';

declare const _default: <T extends Object | String | Number>(__VLS_props: {
    data?: T[];
    size?: string;
    iconPack?: string;
    statusIcon?: boolean;
    useHtml5Validation?: boolean;
    override?: boolean;
    type?: string;
    modelValue?: string | number;
    field?: string;
    rootClass?: ComponentClass;
    onFocus?: (event: Event) => any;
    onBlur?: (event: Event) => any;
    onInput?: (value: string | number) => any;
    onInvalid?: (event: Event) => any;
    onSelect?: (value: T, evt: Event) => any;
    disabled?: boolean;
    maxlength?: string | number;
    validationMessage?: string;
    "onUpdate:modelValue"?: (value: string | number) => any;
    "onSelect-header"?: (event: Event) => any;
    "onSelect-footer"?: (event: Event) => any;
    "onIcon-click"?: (event: Event) => any;
    "onIcon-right-click"?: (event: Event) => any;
    "onScroll-start"?: () => any;
    "onScroll-end"?: () => any;
    menuTag?: DynamicComponent;
    itemTag?: DynamicComponent;
    position?: string;
    groupField?: string;
    groupOptions?: string;
    formatter?: (value: unknown) => string | number;
    placeholder?: string;
    expanded?: boolean;
    rounded?: boolean;
    checkScroll?: boolean;
    debounce?: number;
    keepFirst?: boolean;
    clearOnSelect?: boolean;
    openOnFocus?: boolean;
    keepOpen?: boolean;
    maxHeight?: string | number;
    confirmKeys?: string[];
    mobileModal?: boolean;
    animation?: string;
    selectOnClickOutside?: boolean;
    selectableHeader?: boolean;
    selectableFooter?: boolean;
    icon?: string;
    iconClickable?: boolean;
    iconRight?: string;
    iconRightClickable?: boolean;
    iconRightVariant?: string;
    clearable?: boolean;
    clearIcon?: string;
    autocomplete?: string;
    teleport?: string | boolean | Record<string, any>;
    itemClass?: ComponentClass;
    itemHoverClass?: ComponentClass;
    itemGroupTitleClass?: ComponentClass;
    itemEmptyClass?: ComponentClass;
    itemHeaderClass?: ComponentClass;
    itemFooterClass?: ComponentClass;
    inputClasses?: Record<string, any>;
} & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, __VLS_ctx?: {
    slots: {
        header?(_: {}): any;
        group?(_: {
            group: any;
            index: number;
        }): any;
        default?(_: {
            option: any;
            value: string;
            index: number;
        }): any;
        empty?(_: {}): any;
        footer?(_: {}): any;
    };
    attrs: any;
    emit: {
        (e: "update:modelValue", value: string | number): void;
        (e: "input", value: string | number): void;
        (e: "select", value: T, evt: Event): void;
        (e: "select-header", event: Event): void;
        (e: "select-footer", event: Event): void;
        (e: "focus", event: Event): void;
        (e: "blur", event: Event): void;
        (e: "invalid", event: Event): void;
        (e: "icon-click", event: Event): void;
        (e: "icon-right-click", event: Event): void;
        (e: "scroll-start"): void;
        (e: "scroll-end"): void;
    };
}, __VLS_expose?: (exposed: import('vue').ShallowUnwrapRef<{
    focus: () => void;
}>) => void, __VLS_setup?: Promise<{
    props: {
        data?: T[];
        size?: string;
        iconPack?: string;
        statusIcon?: boolean;
        useHtml5Validation?: boolean;
        override?: boolean;
        type?: string;
        modelValue?: string | number;
        field?: string;
        rootClass?: ComponentClass;
        onFocus?: (event: Event) => any;
        onBlur?: (event: Event) => any;
        onInput?: (value: string | number) => any;
        onInvalid?: (event: Event) => any;
        onSelect?: (value: T, evt: Event) => any;
        disabled?: boolean;
        maxlength?: string | number;
        validationMessage?: string;
        "onUpdate:modelValue"?: (value: string | number) => any;
        "onSelect-header"?: (event: Event) => any;
        "onSelect-footer"?: (event: Event) => any;
        "onIcon-click"?: (event: Event) => any;
        "onIcon-right-click"?: (event: Event) => any;
        "onScroll-start"?: () => any;
        "onScroll-end"?: () => any;
        menuTag?: DynamicComponent;
        itemTag?: DynamicComponent;
        position?: string;
        groupField?: string;
        groupOptions?: string;
        formatter?: (value: unknown) => string | number;
        placeholder?: string;
        expanded?: boolean;
        rounded?: boolean;
        checkScroll?: boolean;
        debounce?: number;
        keepFirst?: boolean;
        clearOnSelect?: boolean;
        openOnFocus?: boolean;
        keepOpen?: boolean;
        maxHeight?: string | number;
        confirmKeys?: string[];
        mobileModal?: boolean;
        animation?: string;
        selectOnClickOutside?: boolean;
        selectableHeader?: boolean;
        selectableFooter?: boolean;
        icon?: string;
        iconClickable?: boolean;
        iconRight?: string;
        iconRightClickable?: boolean;
        iconRightVariant?: string;
        clearable?: boolean;
        clearIcon?: string;
        autocomplete?: string;
        teleport?: string | boolean | Record<string, any>;
        itemClass?: ComponentClass;
        itemHoverClass?: ComponentClass;
        itemGroupTitleClass?: ComponentClass;
        itemEmptyClass?: ComponentClass;
        itemHeaderClass?: ComponentClass;
        itemFooterClass?: ComponentClass;
        inputClasses?: Record<string, any>;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        focus: () => void;
    }>): void;
    attrs: any;
    slots: {
        header?(_: {}): any;
        group?(_: {
            group: any;
            index: number;
        }): any;
        default?(_: {
            option: any;
            value: string;
            index: number;
        }): any;
        empty?(_: {}): any;
        footer?(_: {}): any;
    };
    emit: {
        (e: "update:modelValue", value: string | number): void;
        (e: "input", value: string | number): void;
        (e: "select", value: T, evt: Event): void;
        (e: "select-header", event: Event): void;
        (e: "select-footer", event: Event): void;
        (e: "focus", event: Event): void;
        (e: "blur", event: Event): void;
        (e: "invalid", event: Event): void;
        (e: "icon-click", event: Event): void;
        (e: "icon-right-click", event: Event): void;
        (e: "scroll-start"): void;
        (e: "scroll-end"): void;
    };
}>) => import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            data?: T[];
            size?: string;
            iconPack?: string;
            statusIcon?: boolean;
            useHtml5Validation?: boolean;
            override?: boolean;
            type?: string;
            modelValue?: string | number;
            field?: string;
            rootClass?: ComponentClass;
            onFocus?: (event: Event) => any;
            onBlur?: (event: Event) => any;
            onInput?: (value: string | number) => any;
            onInvalid?: (event: Event) => any;
            onSelect?: (value: T, evt: Event) => any;
            disabled?: boolean;
            maxlength?: string | number;
            validationMessage?: string;
            "onUpdate:modelValue"?: (value: string | number) => any;
            "onSelect-header"?: (event: Event) => any;
            "onSelect-footer"?: (event: Event) => any;
            "onIcon-click"?: (event: Event) => any;
            "onIcon-right-click"?: (event: Event) => any;
            "onScroll-start"?: () => any;
            "onScroll-end"?: () => any;
            menuTag?: DynamicComponent;
            itemTag?: DynamicComponent;
            position?: string;
            groupField?: string;
            groupOptions?: string;
            formatter?: (value: unknown) => string | number;
            placeholder?: string;
            expanded?: boolean;
            rounded?: boolean;
            checkScroll?: boolean;
            debounce?: number;
            keepFirst?: boolean;
            clearOnSelect?: boolean;
            openOnFocus?: boolean;
            keepOpen?: boolean;
            maxHeight?: string | number;
            confirmKeys?: string[];
            mobileModal?: boolean;
            animation?: string;
            selectOnClickOutside?: boolean;
            selectableHeader?: boolean;
            selectableFooter?: boolean;
            icon?: string;
            iconClickable?: boolean;
            iconRight?: string;
            iconRightClickable?: boolean;
            iconRightVariant?: string;
            clearable?: boolean;
            clearIcon?: string;
            autocomplete?: string;
            teleport?: string | boolean | Record<string, any>;
            itemClass?: ComponentClass;
            itemHoverClass?: ComponentClass;
            itemGroupTitleClass?: ComponentClass;
            itemEmptyClass?: ComponentClass;
            itemHeaderClass?: ComponentClass;
            itemFooterClass?: ComponentClass;
            inputClasses?: Record<string, any>;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
        expose(exposed: import('vue').ShallowUnwrapRef<{
            focus: () => void;
        }>): void;
        attrs: any;
        slots: {
            header?(_: {}): any;
            group?(_: {
                group: any;
                index: number;
            }): any;
            default?(_: {
                option: any;
                value: string;
                index: number;
            }): any;
            empty?(_: {}): any;
            footer?(_: {}): any;
        };
        emit: {
            (e: "update:modelValue", value: string | number): void;
            (e: "input", value: string | number): void;
            (e: "select", value: T, evt: Event): void;
            (e: "select-header", event: Event): void;
            (e: "select-footer", event: Event): void;
            (e: "focus", event: Event): void;
            (e: "blur", event: Event): void;
            (e: "invalid", event: Event): void;
            (e: "icon-click", event: Event): void;
            (e: "icon-right-click", event: Event): void;
            (e: "scroll-start"): void;
            (e: "scroll-end"): void;
        };
    };
};
export default _default;
