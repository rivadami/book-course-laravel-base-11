import { ComponentClass } from '../../types';

declare const _default: <T extends Object | String | Number>(__VLS_props: {
    data?: T[];
    size?: string;
    iconPack?: string;
    useHtml5Validation?: boolean;
    override?: boolean;
    modelValue?: T[];
    field?: string;
    variant?: string;
    rootClass?: ComponentClass;
    onFocus?: (event: Event) => any;
    onBlur?: (event: Event) => any;
    onInput?: (value: string) => any;
    onInvalid?: (event: Event) => any;
    disabled?: boolean;
    maxlength?: string | number;
    validationMessage?: string;
    "onUpdate:modelValue"?: (value: T[]) => any;
    "onIcon-click"?: (event: Event) => any;
    "onIcon-right-click"?: (event: Event) => any;
    "onScroll-start"?: () => any;
    "onScroll-end"?: () => any;
    groupField?: string;
    groupOptions?: string;
    placeholder?: string;
    expanded?: boolean;
    checkScroll?: boolean;
    keepFirst?: boolean;
    openOnFocus?: boolean;
    keepOpen?: boolean;
    confirmKeys?: string[];
    icon?: string;
    autocomplete?: string;
    teleport?: string | boolean | Record<string, any>;
    itemClass?: ComponentClass;
    counter?: boolean;
    expandedClass?: ComponentClass;
    counterClass?: ComponentClass;
    sizeClass?: ComponentClass;
    variantClass?: ComponentClass;
    closeIcon?: string;
    closeClass?: ComponentClass;
    ariaCloseLabel?: string;
    closable?: boolean;
    onAdd?: (value: T) => any;
    onRemove?: (value: T) => any;
    maxitems?: string | number;
    separators?: string[];
    allowNew?: boolean;
    allowDuplicates?: boolean;
    allowAutocomplete?: boolean;
    removeOnKeys?: string[];
    beforeAdding?: (value: T | string) => boolean;
    createItem?: (value: T | string) => T;
    containerClass?: ComponentClass;
    autocompleteClasses?: Record<string, any>;
} & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, __VLS_ctx?: {
    slots: {
        selected?(_: {
            items: T[];
            removeItem: (index: number, event?: Event) => void;
        }): any;
        header?(_: {}): any;
        default?(_: {
            option: any;
            index: number;
            value: string;
        }): any;
        empty?(_: {}): any;
        footer?(_: {}): any;
        counter?(_: {
            items: number;
            total: string | number;
        }): any;
    };
    attrs: any;
    emit: {
        (e: "update:modelValue", value: T[]): void;
        (e: "input", value: string): void;
        (e: "add", value: T): void;
        (e: "remove", value: T): void;
        (e: "focus", event: Event): void;
        (e: "blur", event: Event): void;
        (e: "invalid", event: Event): void;
        (e: "icon-click", event: Event): void;
        (e: "icon-right-click", event: Event): void;
        (e: "scroll-start"): void;
        (e: "scroll-end"): void;
    };
}, __VLS_expose?: (exposed: import('vue').ShallowUnwrapRef<{
    focus: () => void;
}>) => void, __VLS_setup?: Promise<{
    props: {
        data?: T[];
        size?: string;
        iconPack?: string;
        useHtml5Validation?: boolean;
        override?: boolean;
        modelValue?: T[];
        field?: string;
        variant?: string;
        rootClass?: ComponentClass;
        onFocus?: (event: Event) => any;
        onBlur?: (event: Event) => any;
        onInput?: (value: string) => any;
        onInvalid?: (event: Event) => any;
        disabled?: boolean;
        maxlength?: string | number;
        validationMessage?: string;
        "onUpdate:modelValue"?: (value: T[]) => any;
        "onIcon-click"?: (event: Event) => any;
        "onIcon-right-click"?: (event: Event) => any;
        "onScroll-start"?: () => any;
        "onScroll-end"?: () => any;
        groupField?: string;
        groupOptions?: string;
        placeholder?: string;
        expanded?: boolean;
        checkScroll?: boolean;
        keepFirst?: boolean;
        openOnFocus?: boolean;
        keepOpen?: boolean;
        confirmKeys?: string[];
        icon?: string;
        autocomplete?: string;
        teleport?: string | boolean | Record<string, any>;
        itemClass?: ComponentClass;
        counter?: boolean;
        expandedClass?: ComponentClass;
        counterClass?: ComponentClass;
        sizeClass?: ComponentClass;
        variantClass?: ComponentClass;
        closeIcon?: string;
        closeClass?: ComponentClass;
        ariaCloseLabel?: string;
        closable?: boolean;
        onAdd?: (value: T) => any;
        onRemove?: (value: T) => any;
        maxitems?: string | number;
        separators?: string[];
        allowNew?: boolean;
        allowDuplicates?: boolean;
        allowAutocomplete?: boolean;
        removeOnKeys?: string[];
        beforeAdding?: (value: T | string) => boolean;
        createItem?: (value: T | string) => T;
        containerClass?: ComponentClass;
        autocompleteClasses?: Record<string, any>;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{
        focus: () => void;
    }>): void;
    attrs: any;
    slots: {
        selected?(_: {
            items: T[];
            removeItem: (index: number, event?: Event) => void;
        }): any;
        header?(_: {}): any;
        default?(_: {
            option: any;
            index: number;
            value: string;
        }): any;
        empty?(_: {}): any;
        footer?(_: {}): any;
        counter?(_: {
            items: number;
            total: string | number;
        }): any;
    };
    emit: {
        (e: "update:modelValue", value: T[]): void;
        (e: "input", value: string): void;
        (e: "add", value: T): void;
        (e: "remove", value: T): void;
        (e: "focus", event: Event): void;
        (e: "blur", event: Event): void;
        (e: "invalid", event: Event): void;
        (e: "icon-click", event: Event): void;
        (e: "icon-right-click", event: Event): void;
        (e: "scroll-start"): void;
        (e: "scroll-end"): void;
    };
}>) => import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            data?: T[];
            size?: string;
            iconPack?: string;
            useHtml5Validation?: boolean;
            override?: boolean;
            modelValue?: T[];
            field?: string;
            variant?: string;
            rootClass?: ComponentClass;
            onFocus?: (event: Event) => any;
            onBlur?: (event: Event) => any;
            onInput?: (value: string) => any;
            onInvalid?: (event: Event) => any;
            disabled?: boolean;
            maxlength?: string | number;
            validationMessage?: string;
            "onUpdate:modelValue"?: (value: T[]) => any;
            "onIcon-click"?: (event: Event) => any;
            "onIcon-right-click"?: (event: Event) => any;
            "onScroll-start"?: () => any;
            "onScroll-end"?: () => any;
            groupField?: string;
            groupOptions?: string;
            placeholder?: string;
            expanded?: boolean;
            checkScroll?: boolean;
            keepFirst?: boolean;
            openOnFocus?: boolean;
            keepOpen?: boolean;
            confirmKeys?: string[];
            icon?: string;
            autocomplete?: string;
            teleport?: string | boolean | Record<string, any>;
            itemClass?: ComponentClass;
            counter?: boolean;
            expandedClass?: ComponentClass;
            counterClass?: ComponentClass;
            sizeClass?: ComponentClass;
            variantClass?: ComponentClass;
            closeIcon?: string;
            closeClass?: ComponentClass;
            ariaCloseLabel?: string;
            closable?: boolean;
            onAdd?: (value: T) => any;
            onRemove?: (value: T) => any;
            maxitems?: string | number;
            separators?: string[];
            allowNew?: boolean;
            allowDuplicates?: boolean;
            allowAutocomplete?: boolean;
            removeOnKeys?: string[];
            beforeAdding?: (value: T | string) => boolean;
            createItem?: (value: T | string) => T;
            containerClass?: ComponentClass;
            autocompleteClasses?: Record<string, any>;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
        expose(exposed: import('vue').ShallowUnwrapRef<{
            focus: () => void;
        }>): void;
        attrs: any;
        slots: {
            selected?(_: {
                items: T[];
                removeItem: (index: number, event?: Event) => void;
            }): any;
            header?(_: {}): any;
            default?(_: {
                option: any;
                index: number;
                value: string;
            }): any;
            empty?(_: {}): any;
            footer?(_: {}): any;
            counter?(_: {
                items: number;
                total: string | number;
            }): any;
        };
        emit: {
            (e: "update:modelValue", value: T[]): void;
            (e: "input", value: string): void;
            (e: "add", value: T): void;
            (e: "remove", value: T): void;
            (e: "focus", event: Event): void;
            (e: "blur", event: Event): void;
            (e: "invalid", event: Event): void;
            (e: "icon-click", event: Event): void;
            (e: "icon-right-click", event: Event): void;
            (e: "scroll-start"): void;
            (e: "scroll-end"): void;
        };
    };
};
export default _default;
