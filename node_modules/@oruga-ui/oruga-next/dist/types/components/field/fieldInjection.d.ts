import { default as Field } from './Field.vue';
import { ComputedRef } from 'vue';

export type FieldProps = InstanceType<typeof Field>["$props"];
type FieldData = {
    $el: Element;
    props: FieldProps;
    hasInnerField: boolean;
    hasMessage: boolean;
    fieldVariant: string;
    fieldMessage: string;
    addInnerField: () => void;
    setInputId: (value: string) => void;
    setFocus: (value: boolean) => void;
    setFilled: (value: boolean) => void;
    setVariant: (value: string) => void;
    setMessage: (value: string) => void;
};
/** provide/inject type */
type ProvidedField = ComputedRef<FieldData> | undefined;
/**
 * Provide field component data via dependency injection.
 * Provided data is a computed ref to enjure reactivity.
 */
export declare function provideField(data: ProvidedField): void;
/** Inject parent field component if used inside one. **/
export declare function injectField(): {
    parentField: ComputedRef<FieldData>;
    statusVariant: ComputedRef<string>;
    statusVariantIcon: ComputedRef<string>;
    statusMessage: ComputedRef<string>;
};
export {};
